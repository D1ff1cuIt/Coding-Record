
NUCLEOF446RE Mpu6050 KalmanFilter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078d0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  08007aa0  08007aa0  00017aa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f18  08007f18  00020284  2**0
                  CONTENTS
  4 .ARM          00000008  08007f18  08007f18  00017f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f20  08007f20  00020284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f20  08007f20  00017f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f24  08007f24  00017f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000284  20000000  08007f28  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000288  080081ac  00020288  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  080081ac  000203c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da49  00000000  00000000  000202b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000216b  00000000  00000000  0002dcfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  0002fe68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a18  00000000  00000000  00030960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000338f  00000000  00000000  00031378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fcbf  00000000  00000000  00034707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd59e  00000000  00000000  000443c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00111964  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dfc  00000000  00000000  001119b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000288 	.word	0x20000288
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007a88 	.word	0x08007a88

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000028c 	.word	0x2000028c
 800020c:	08007a88 	.word	0x08007a88

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f92:	f107 0314 	add.w	r3, r7, #20
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	4b37      	ldr	r3, [pc, #220]	; (8001084 <MX_GPIO_Init+0xf8>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a36      	ldr	r2, [pc, #216]	; (8001084 <MX_GPIO_Init+0xf8>)
 8000fac:	f043 0304 	orr.w	r3, r3, #4
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b34      	ldr	r3, [pc, #208]	; (8001084 <MX_GPIO_Init+0xf8>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0304 	and.w	r3, r3, #4
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	4b30      	ldr	r3, [pc, #192]	; (8001084 <MX_GPIO_Init+0xf8>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a2f      	ldr	r2, [pc, #188]	; (8001084 <MX_GPIO_Init+0xf8>)
 8000fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b2d      	ldr	r3, [pc, #180]	; (8001084 <MX_GPIO_Init+0xf8>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	4b29      	ldr	r3, [pc, #164]	; (8001084 <MX_GPIO_Init+0xf8>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a28      	ldr	r2, [pc, #160]	; (8001084 <MX_GPIO_Init+0xf8>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b26      	ldr	r3, [pc, #152]	; (8001084 <MX_GPIO_Init+0xf8>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	4b22      	ldr	r3, [pc, #136]	; (8001084 <MX_GPIO_Init+0xf8>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a21      	ldr	r2, [pc, #132]	; (8001084 <MX_GPIO_Init+0xf8>)
 8001000:	f043 0302 	orr.w	r3, r3, #2
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <MX_GPIO_Init+0xf8>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	2120      	movs	r1, #32
 8001016:	481c      	ldr	r0, [pc, #112]	; (8001088 <MX_GPIO_Init+0xfc>)
 8001018:	f001 fa92 	bl	8002540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	2180      	movs	r1, #128	; 0x80
 8001020:	481a      	ldr	r0, [pc, #104]	; (800108c <MX_GPIO_Init+0x100>)
 8001022:	f001 fa8d 	bl	8002540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001026:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800102a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800102c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	4619      	mov	r1, r3
 800103c:	4813      	ldr	r0, [pc, #76]	; (800108c <MX_GPIO_Init+0x100>)
 800103e:	f001 f8eb 	bl	8002218 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001042:	2320      	movs	r3, #32
 8001044:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001046:	2301      	movs	r3, #1
 8001048:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2300      	movs	r3, #0
 8001050:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4619      	mov	r1, r3
 8001058:	480b      	ldr	r0, [pc, #44]	; (8001088 <MX_GPIO_Init+0xfc>)
 800105a:	f001 f8dd 	bl	8002218 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800105e:	2380      	movs	r3, #128	; 0x80
 8001060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001062:	2301      	movs	r3, #1
 8001064:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001066:	2302      	movs	r3, #2
 8001068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106a:	2303      	movs	r3, #3
 800106c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4619      	mov	r1, r3
 8001074:	4805      	ldr	r0, [pc, #20]	; (800108c <MX_GPIO_Init+0x100>)
 8001076:	f001 f8cf 	bl	8002218 <HAL_GPIO_Init>

}
 800107a:	bf00      	nop
 800107c:	3728      	adds	r7, #40	; 0x28
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40023800 	.word	0x40023800
 8001088:	40020000 	.word	0x40020000
 800108c:	40020800 	.word	0x40020800

08001090 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <MX_I2C1_Init+0x50>)
 8001096:	4a13      	ldr	r2, [pc, #76]	; (80010e4 <MX_I2C1_Init+0x54>)
 8001098:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_I2C1_Init+0x50>)
 800109c:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <MX_I2C1_Init+0x58>)
 800109e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <MX_I2C1_Init+0x50>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <MX_I2C1_Init+0x50>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <MX_I2C1_Init+0x50>)
 80010ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b4:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <MX_I2C1_Init+0x50>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <MX_I2C1_Init+0x50>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c0:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <MX_I2C1_Init+0x50>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <MX_I2C1_Init+0x50>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010cc:	4804      	ldr	r0, [pc, #16]	; (80010e0 <MX_I2C1_Init+0x50>)
 80010ce:	f001 fa6b 	bl	80025a8 <HAL_I2C_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010d8:	f000 f9ac 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200002a4 	.word	0x200002a4
 80010e4:	40005400 	.word	0x40005400
 80010e8:	00061a80 	.word	0x00061a80

080010ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a19      	ldr	r2, [pc, #100]	; (8001170 <HAL_I2C_MspInit+0x84>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d12b      	bne.n	8001166 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	4b18      	ldr	r3, [pc, #96]	; (8001174 <HAL_I2C_MspInit+0x88>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a17      	ldr	r2, [pc, #92]	; (8001174 <HAL_I2C_MspInit+0x88>)
 8001118:	f043 0302 	orr.w	r3, r3, #2
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <HAL_I2C_MspInit+0x88>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800112a:	23c0      	movs	r3, #192	; 0xc0
 800112c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800112e:	2312      	movs	r3, #18
 8001130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001136:	2303      	movs	r3, #3
 8001138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800113a:	2304      	movs	r3, #4
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	4619      	mov	r1, r3
 8001144:	480c      	ldr	r0, [pc, #48]	; (8001178 <HAL_I2C_MspInit+0x8c>)
 8001146:	f001 f867 	bl	8002218 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <HAL_I2C_MspInit+0x88>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	4a08      	ldr	r2, [pc, #32]	; (8001174 <HAL_I2C_MspInit+0x88>)
 8001154:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001158:	6413      	str	r3, [r2, #64]	; 0x40
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_I2C_MspInit+0x88>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001166:	bf00      	nop
 8001168:	3728      	adds	r7, #40	; 0x28
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40005400 	.word	0x40005400
 8001174:	40023800 	.word	0x40023800
 8001178:	40020400 	.word	0x40020400

0800117c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001184:	1d39      	adds	r1, r7, #4
 8001186:	f04f 33ff 	mov.w	r3, #4294967295
 800118a:	2201      	movs	r2, #1
 800118c:	4803      	ldr	r0, [pc, #12]	; (800119c <__io_putchar+0x20>)
 800118e:	f003 f850 	bl	8004232 <HAL_UART_Transmit>
return ch;
 8001192:	687b      	ldr	r3, [r7, #4]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	2000036c 	.word	0x2000036c

080011a0 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 80011a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011a4:	b084      	sub	sp, #16
 80011a6:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a8:	f000 feba 	bl	8001f20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ac:	f000 f8d0 	bl	8001350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b0:	f7ff feec 	bl	8000f8c <MX_GPIO_Init>
  MX_I2C1_Init();
 80011b4:	f7ff ff6c 	bl	8001090 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80011b8:	f000 fe16 	bl	8001de8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init(&hi2c1);
 80011bc:	4855      	ldr	r0, [pc, #340]	; (8001314 <main+0x174>)
 80011be:	f000 f93e 	bl	800143e <MPU6050_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
   {
     /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80011c2:	2120      	movs	r1, #32
 80011c4:	4854      	ldr	r0, [pc, #336]	; (8001318 <main+0x178>)
 80011c6:	f001 f9d4 	bl	8002572 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_7);
 80011ca:	2180      	movs	r1, #128	; 0x80
 80011cc:	4853      	ldr	r0, [pc, #332]	; (800131c <main+0x17c>)
 80011ce:	f001 f9d0 	bl	8002572 <HAL_GPIO_TogglePin>

	  MPU6050_Read_All(&hi2c1, &MPU6050);
 80011d2:	4953      	ldr	r1, [pc, #332]	; (8001320 <main+0x180>)
 80011d4:	484f      	ldr	r0, [pc, #316]	; (8001314 <main+0x174>)
 80011d6:	f000 f99b 	bl	8001510 <MPU6050_Read_All>
	  AngX = MPU6050.KalmanAngleX;
 80011da:	4b51      	ldr	r3, [pc, #324]	; (8001320 <main+0x180>)
 80011dc:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80011e0:	4610      	mov	r0, r2
 80011e2:	4619      	mov	r1, r3
 80011e4:	f7ff fd00 	bl	8000be8 <__aeabi_d2f>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4a4e      	ldr	r2, [pc, #312]	; (8001324 <main+0x184>)
 80011ec:	6013      	str	r3, [r2, #0]
	  AngY = MPU6050.KalmanAngleY;
 80011ee:	4b4c      	ldr	r3, [pc, #304]	; (8001320 <main+0x180>)
 80011f0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80011f4:	4610      	mov	r0, r2
 80011f6:	4619      	mov	r1, r3
 80011f8:	f7ff fcf6 	bl	8000be8 <__aeabi_d2f>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4a4a      	ldr	r2, [pc, #296]	; (8001328 <main+0x188>)
 8001200:	6013      	str	r3, [r2, #0]
	  AccX = MPU6050.Ax;
 8001202:	4b47      	ldr	r3, [pc, #284]	; (8001320 <main+0x180>)
 8001204:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001208:	4610      	mov	r0, r2
 800120a:	4619      	mov	r1, r3
 800120c:	f7ff fcec 	bl	8000be8 <__aeabi_d2f>
 8001210:	4603      	mov	r3, r0
 8001212:	4a46      	ldr	r2, [pc, #280]	; (800132c <main+0x18c>)
 8001214:	6013      	str	r3, [r2, #0]
	  AccY = MPU6050.Ay;
 8001216:	4b42      	ldr	r3, [pc, #264]	; (8001320 <main+0x180>)
 8001218:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800121c:	4610      	mov	r0, r2
 800121e:	4619      	mov	r1, r3
 8001220:	f7ff fce2 	bl	8000be8 <__aeabi_d2f>
 8001224:	4603      	mov	r3, r0
 8001226:	4a42      	ldr	r2, [pc, #264]	; (8001330 <main+0x190>)
 8001228:	6013      	str	r3, [r2, #0]
	  AccZ = MPU6050.Az;
 800122a:	4b3d      	ldr	r3, [pc, #244]	; (8001320 <main+0x180>)
 800122c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001230:	4610      	mov	r0, r2
 8001232:	4619      	mov	r1, r3
 8001234:	f7ff fcd8 	bl	8000be8 <__aeabi_d2f>
 8001238:	4603      	mov	r3, r0
 800123a:	4a3e      	ldr	r2, [pc, #248]	; (8001334 <main+0x194>)
 800123c:	6013      	str	r3, [r2, #0]
	  /*printf("%.4f%.4f%.4f\n\n",AccX,AccY,AccZ); */
	  printf("%.4f%.4f%.4f\n", ( AngX + AngXAvg + 90 ) / 100 , ( AngY + AngYAvg + 90 ) / 100 , ( (AccZ + AccZAvg) + 90 ) / 100);
 800123e:	4b39      	ldr	r3, [pc, #228]	; (8001324 <main+0x184>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f9a0 	bl	8000588 <__aeabi_f2d>
 8001248:	4b3b      	ldr	r3, [pc, #236]	; (8001338 <main+0x198>)
 800124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124e:	f7ff f83d 	bl	80002cc <__adddf3>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	4b37      	ldr	r3, [pc, #220]	; (800133c <main+0x19c>)
 8001260:	f7ff f834 	bl	80002cc <__adddf3>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4610      	mov	r0, r2
 800126a:	4619      	mov	r1, r3
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	4b33      	ldr	r3, [pc, #204]	; (8001340 <main+0x1a0>)
 8001272:	f7ff fb0b 	bl	800088c <__aeabi_ddiv>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4690      	mov	r8, r2
 800127c:	4699      	mov	r9, r3
 800127e:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <main+0x188>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff f980 	bl	8000588 <__aeabi_f2d>
 8001288:	4b2e      	ldr	r3, [pc, #184]	; (8001344 <main+0x1a4>)
 800128a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128e:	f7ff f81d 	bl	80002cc <__adddf3>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4610      	mov	r0, r2
 8001298:	4619      	mov	r1, r3
 800129a:	f04f 0200 	mov.w	r2, #0
 800129e:	4b27      	ldr	r3, [pc, #156]	; (800133c <main+0x19c>)
 80012a0:	f7ff f814 	bl	80002cc <__adddf3>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4610      	mov	r0, r2
 80012aa:	4619      	mov	r1, r3
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	4b23      	ldr	r3, [pc, #140]	; (8001340 <main+0x1a0>)
 80012b2:	f7ff faeb 	bl	800088c <__aeabi_ddiv>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4614      	mov	r4, r2
 80012bc:	461d      	mov	r5, r3
 80012be:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <main+0x194>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f960 	bl	8000588 <__aeabi_f2d>
 80012c8:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <main+0x1a8>)
 80012ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ce:	f7fe fffd 	bl	80002cc <__adddf3>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4610      	mov	r0, r2
 80012d8:	4619      	mov	r1, r3
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	4b17      	ldr	r3, [pc, #92]	; (800133c <main+0x19c>)
 80012e0:	f7fe fff4 	bl	80002cc <__adddf3>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4610      	mov	r0, r2
 80012ea:	4619      	mov	r1, r3
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	4b13      	ldr	r3, [pc, #76]	; (8001340 <main+0x1a0>)
 80012f2:	f7ff facb 	bl	800088c <__aeabi_ddiv>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012fe:	e9cd 4500 	strd	r4, r5, [sp]
 8001302:	4642      	mov	r2, r8
 8001304:	464b      	mov	r3, r9
 8001306:	4811      	ldr	r0, [pc, #68]	; (800134c <main+0x1ac>)
 8001308:	f003 ffa4 	bl	8005254 <iprintf>

	  HAL_Delay(25);
 800130c:	2019      	movs	r0, #25
 800130e:	f000 fe79 	bl	8002004 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001312:	e756      	b.n	80011c2 <main+0x22>
 8001314:	200002a4 	.word	0x200002a4
 8001318:	40020000 	.word	0x40020000
 800131c:	40020800 	.word	0x40020800
 8001320:	200002f8 	.word	0x200002f8
 8001324:	20000350 	.word	0x20000350
 8001328:	20000354 	.word	0x20000354
 800132c:	20000358 	.word	0x20000358
 8001330:	2000035c 	.word	0x2000035c
 8001334:	20000360 	.word	0x20000360
 8001338:	20000000 	.word	0x20000000
 800133c:	40568000 	.word	0x40568000
 8001340:	40590000 	.word	0x40590000
 8001344:	20000008 	.word	0x20000008
 8001348:	20000010 	.word	0x20000010
 800134c:	08007aa0 	.word	0x08007aa0

08001350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b094      	sub	sp, #80	; 0x50
 8001354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	2234      	movs	r2, #52	; 0x34
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f003 fb06 	bl	8004970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001364:	f107 0308 	add.w	r3, r7, #8
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001374:	2300      	movs	r3, #0
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	4b2c      	ldr	r3, [pc, #176]	; (800142c <SystemClock_Config+0xdc>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	4a2b      	ldr	r2, [pc, #172]	; (800142c <SystemClock_Config+0xdc>)
 800137e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001382:	6413      	str	r3, [r2, #64]	; 0x40
 8001384:	4b29      	ldr	r3, [pc, #164]	; (800142c <SystemClock_Config+0xdc>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001390:	2300      	movs	r3, #0
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	4b26      	ldr	r3, [pc, #152]	; (8001430 <SystemClock_Config+0xe0>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a25      	ldr	r2, [pc, #148]	; (8001430 <SystemClock_Config+0xe0>)
 800139a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	4b23      	ldr	r3, [pc, #140]	; (8001430 <SystemClock_Config+0xe0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013a8:	603b      	str	r3, [r7, #0]
 80013aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013ac:	2302      	movs	r3, #2
 80013ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013b0:	2301      	movs	r3, #1
 80013b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013b4:	2310      	movs	r3, #16
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b8:	2302      	movs	r3, #2
 80013ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013bc:	2300      	movs	r3, #0
 80013be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013c0:	2308      	movs	r3, #8
 80013c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80013c4:	23b4      	movs	r3, #180	; 0xb4
 80013c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013c8:	2302      	movs	r3, #2
 80013ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013cc:	2302      	movs	r3, #2
 80013ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013d0:	2302      	movs	r3, #2
 80013d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d4:	f107 031c 	add.w	r3, r7, #28
 80013d8:	4618      	mov	r0, r3
 80013da:	f002 fc3f 	bl	8003c5c <HAL_RCC_OscConfig>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013e4:	f000 f826 	bl	8001434 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80013e8:	f002 f89e 	bl	8003528 <HAL_PWREx_EnableOverDrive>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80013f2:	f000 f81f 	bl	8001434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f6:	230f      	movs	r3, #15
 80013f8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013fa:	2302      	movs	r3, #2
 80013fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001402:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001406:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800140e:	f107 0308 	add.w	r3, r7, #8
 8001412:	2105      	movs	r1, #5
 8001414:	4618      	mov	r0, r3
 8001416:	f002 f8d7 	bl	80035c8 <HAL_RCC_ClockConfig>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001420:	f000 f808 	bl	8001434 <Error_Handler>
  }
}
 8001424:	bf00      	nop
 8001426:	3750      	adds	r7, #80	; 0x50
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40023800 	.word	0x40023800
 8001430:	40007000 	.word	0x40007000

08001434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001438:	b672      	cpsid	i
}
 800143a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800143c:	e7fe      	b.n	800143c <Error_Handler+0x8>

0800143e <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 800143e:	b580      	push	{r7, lr}
 8001440:	b088      	sub	sp, #32
 8001442:	af04      	add	r7, sp, #16
 8001444:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001446:	2364      	movs	r3, #100	; 0x64
 8001448:	9302      	str	r3, [sp, #8]
 800144a:	2301      	movs	r3, #1
 800144c:	9301      	str	r3, [sp, #4]
 800144e:	f107 030f 	add.w	r3, r7, #15
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	2301      	movs	r3, #1
 8001456:	2275      	movs	r2, #117	; 0x75
 8001458:	21d0      	movs	r1, #208	; 0xd0
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f001 fae2 	bl	8002a24 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	2b68      	cmp	r3, #104	; 0x68
 8001464:	d14c      	bne.n	8001500 <MPU6050_Init+0xc2>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 800146a:	2364      	movs	r3, #100	; 0x64
 800146c:	9302      	str	r3, [sp, #8]
 800146e:	2301      	movs	r3, #1
 8001470:	9301      	str	r3, [sp, #4]
 8001472:	f107 030e 	add.w	r3, r7, #14
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	2301      	movs	r3, #1
 800147a:	226b      	movs	r2, #107	; 0x6b
 800147c:	21d0      	movs	r1, #208	; 0xd0
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f001 f9d6 	bl	8002830 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x00;
 8001484:	2300      	movs	r3, #0
 8001486:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001488:	2364      	movs	r3, #100	; 0x64
 800148a:	9302      	str	r3, [sp, #8]
 800148c:	2301      	movs	r3, #1
 800148e:	9301      	str	r3, [sp, #4]
 8001490:	f107 030e 	add.w	r3, r7, #14
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	2301      	movs	r3, #1
 8001498:	2219      	movs	r2, #25
 800149a:	21d0      	movs	r1, #208	; 0xd0
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f001 f9c7 	bl	8002830 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x03;
 80014a2:	2303      	movs	r3, #3
 80014a4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80014a6:	2364      	movs	r3, #100	; 0x64
 80014a8:	9302      	str	r3, [sp, #8]
 80014aa:	2301      	movs	r3, #1
 80014ac:	9301      	str	r3, [sp, #4]
 80014ae:	f107 030e 	add.w	r3, r7, #14
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	2301      	movs	r3, #1
 80014b6:	221c      	movs	r2, #28
 80014b8:	21d0      	movs	r1, #208	; 0xd0
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f001 f9b8 	bl	8002830 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80014c0:	2300      	movs	r3, #0
 80014c2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80014c4:	2364      	movs	r3, #100	; 0x64
 80014c6:	9302      	str	r3, [sp, #8]
 80014c8:	2301      	movs	r3, #1
 80014ca:	9301      	str	r3, [sp, #4]
 80014cc:	f107 030e 	add.w	r3, r7, #14
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	2301      	movs	r3, #1
 80014d4:	221b      	movs	r2, #27
 80014d6:	21d0      	movs	r1, #208	; 0xd0
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f001 f9a9 	bl	8002830 <HAL_I2C_Mem_Write>
        	 * @Fs = 1000 Hz
        	 * @Gyro BW: 42 Hz
        	 * @Temperature BW: 44 Hz
        	 * @Note: Sensor fusion update rate cannot be higher than (1/5.9ms) = 170 Hz
        	 */
        Data = 0x03;
 80014de:	2303      	movs	r3, #3
 80014e0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, DLPF_CFG, 1, &Data, 1, i2c_timeout);
 80014e2:	2364      	movs	r3, #100	; 0x64
 80014e4:	9302      	str	r3, [sp, #8]
 80014e6:	2301      	movs	r3, #1
 80014e8:	9301      	str	r3, [sp, #4]
 80014ea:	f107 030e 	add.w	r3, r7, #14
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	2301      	movs	r3, #1
 80014f2:	221a      	movs	r2, #26
 80014f4:	21d0      	movs	r1, #208	; 0xd0
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f001 f99a 	bl	8002830 <HAL_I2C_Mem_Write>
        return 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	e000      	b.n	8001502 <MPU6050_Init+0xc4>
    }
    return 1;
 8001500:	2301      	movs	r3, #1
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	0000      	movs	r0, r0
 800150c:	0000      	movs	r0, r0
	...

08001510 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8001510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001514:	b094      	sub	sp, #80	; 0x50
 8001516:	af04      	add	r7, sp, #16
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800151c:	2364      	movs	r3, #100	; 0x64
 800151e:	9302      	str	r3, [sp, #8]
 8001520:	230e      	movs	r3, #14
 8001522:	9301      	str	r3, [sp, #4]
 8001524:	f107 0308 	add.w	r3, r7, #8
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	2301      	movs	r3, #1
 800152c:	223b      	movs	r2, #59	; 0x3b
 800152e:	21d0      	movs	r1, #208	; 0xd0
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f001 fa77 	bl	8002a24 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001536:	7a3b      	ldrb	r3, [r7, #8]
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	b21a      	sxth	r2, r3
 800153c:	7a7b      	ldrb	r3, [r7, #9]
 800153e:	b21b      	sxth	r3, r3
 8001540:	4313      	orrs	r3, r2
 8001542:	b21a      	sxth	r2, r3
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001548:	7abb      	ldrb	r3, [r7, #10]
 800154a:	021b      	lsls	r3, r3, #8
 800154c:	b21a      	sxth	r2, r3
 800154e:	7afb      	ldrb	r3, [r7, #11]
 8001550:	b21b      	sxth	r3, r3
 8001552:	4313      	orrs	r3, r2
 8001554:	b21a      	sxth	r2, r3
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 800155a:	7b3b      	ldrb	r3, [r7, #12]
 800155c:	021b      	lsls	r3, r3, #8
 800155e:	b21a      	sxth	r2, r3
 8001560:	7b7b      	ldrb	r3, [r7, #13]
 8001562:	b21b      	sxth	r3, r3
 8001564:	4313      	orrs	r3, r2
 8001566:	b21a      	sxth	r2, r3
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 800156c:	7bbb      	ldrb	r3, [r7, #14]
 800156e:	021b      	lsls	r3, r3, #8
 8001570:	b21a      	sxth	r2, r3
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	b21b      	sxth	r3, r3
 8001576:	4313      	orrs	r3, r2
 8001578:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 800157a:	7c3b      	ldrb	r3, [r7, #16]
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	b21a      	sxth	r2, r3
 8001580:	7c7b      	ldrb	r3, [r7, #17]
 8001582:	b21b      	sxth	r3, r3
 8001584:	4313      	orrs	r3, r2
 8001586:	b21a      	sxth	r2, r3
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 800158c:	7cbb      	ldrb	r3, [r7, #18]
 800158e:	021b      	lsls	r3, r3, #8
 8001590:	b21a      	sxth	r2, r3
 8001592:	7cfb      	ldrb	r3, [r7, #19]
 8001594:	b21b      	sxth	r3, r3
 8001596:	4313      	orrs	r3, r2
 8001598:	b21a      	sxth	r2, r3
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 800159e:	7d3b      	ldrb	r3, [r7, #20]
 80015a0:	021b      	lsls	r3, r3, #8
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	7d7b      	ldrb	r3, [r7, #21]
 80015a6:	b21b      	sxth	r3, r3
 80015a8:	4313      	orrs	r3, r2
 80015aa:	b21a      	sxth	r2, r3
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct-> Accel_X_RAW / (16384.0 / 8);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ffd4 	bl	8000564 <__aeabi_i2d>
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	4bbd      	ldr	r3, [pc, #756]	; (80018b8 <MPU6050_Read_All+0x3a8>)
 80015c2:	f7ff f963 	bl	800088c <__aeabi_ddiv>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	6839      	ldr	r1, [r7, #0]
 80015cc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct-> Accel_Y_RAW / (16384.0 / 8);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe ffc4 	bl	8000564 <__aeabi_i2d>
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	4bb5      	ldr	r3, [pc, #724]	; (80018b8 <MPU6050_Read_All+0x3a8>)
 80015e2:	f7ff f953 	bl	800088c <__aeabi_ddiv>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	6839      	ldr	r1, [r7, #0]
 80015ec:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct-> Accel_Z_RAW / Accel_Z_corrector;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ffb4 	bl	8000564 <__aeabi_i2d>
 80015fc:	a3a8      	add	r3, pc, #672	; (adr r3, 80018a0 <MPU6050_Read_All+0x390>)
 80015fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001602:	f7ff f943 	bl	800088c <__aeabi_ddiv>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	6839      	ldr	r1, [r7, #0]
 800160c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8001610:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001614:	ee07 3a90 	vmov	s15, r3
 8001618:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800161c:	eddf 6aa7 	vldr	s13, [pc, #668]	; 80018bc <MPU6050_Read_All+0x3ac>
 8001620:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001624:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80018c0 <MPU6050_Read_All+0x3b0>
 8001628:	ee77 7a87 	vadd.f32	s15, s15, s14
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct-> Gyro_X_RAW / 131.0;
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ff93 	bl	8000564 <__aeabi_i2d>
 800163e:	a39a      	add	r3, pc, #616	; (adr r3, 80018a8 <MPU6050_Read_All+0x398>)
 8001640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001644:	f7ff f922 	bl	800088c <__aeabi_ddiv>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	6839      	ldr	r1, [r7, #0]
 800164e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct-> Gyro_Y_RAW / 131.0;
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001658:	4618      	mov	r0, r3
 800165a:	f7fe ff83 	bl	8000564 <__aeabi_i2d>
 800165e:	a392      	add	r3, pc, #584	; (adr r3, 80018a8 <MPU6050_Read_All+0x398>)
 8001660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001664:	f7ff f912 	bl	800088c <__aeabi_ddiv>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	6839      	ldr	r1, [r7, #0]
 800166e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct-> Gyro_Z_RAW / 131.0;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ff73 	bl	8000564 <__aeabi_i2d>
 800167e:	a38a      	add	r3, pc, #552	; (adr r3, 80018a8 <MPU6050_Read_All+0x398>)
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	f7ff f902 	bl	800088c <__aeabi_ddiv>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	6839      	ldr	r1, [r7, #0]
 800168e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    // roll x軸旋轉 pitch y軸旋轉 yaw Z軸旋轉
    // atan2函數 X軸到點(x,y)弧度
    // atan求該值的反正切值
    // sqrt求該值的平方根
    // fabs求該數的浮點絕對值
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8001692:	f000 fcab 	bl	8001fec <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	4b8a      	ldr	r3, [pc, #552]	; (80018c4 <MPU6050_Read_All+0x3b4>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe ff50 	bl	8000544 <__aeabi_ui2d>
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	4b87      	ldr	r3, [pc, #540]	; (80018c8 <MPU6050_Read_All+0x3b8>)
 80016aa:	f7ff f8ef 	bl	800088c <__aeabi_ddiv>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 80016b6:	f000 fc99 	bl	8001fec <HAL_GetTick>
 80016ba:	4603      	mov	r3, r0
 80016bc:	4a81      	ldr	r2, [pc, #516]	; (80018c4 <MPU6050_Read_All+0x3b4>)
 80016be:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c6:	461a      	mov	r2, r3
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ce:	fb03 f202 	mul.w	r2, r3, r2
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016d8:	4619      	mov	r1, r3
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016e0:	fb01 f303 	mul.w	r3, r1, r3
 80016e4:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe ff3c 	bl	8000564 <__aeabi_i2d>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	ec43 2b10 	vmov	d0, r2, r3
 80016f4:	f006 f81f 	bl	8007736 <sqrt>
 80016f8:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	f04f 0300 	mov.w	r3, #0
 8001704:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001708:	f7ff f9fe 	bl	8000b08 <__aeabi_dcmpeq>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d11f      	bne.n	8001752 <MPU6050_Read_All+0x242>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001718:	4618      	mov	r0, r3
 800171a:	f7fe ff23 	bl	8000564 <__aeabi_i2d>
 800171e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001722:	f7ff f8b3 	bl	800088c <__aeabi_ddiv>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	ec43 2b17 	vmov	d7, r2, r3
 800172e:	eeb0 0a47 	vmov.f32	s0, s14
 8001732:	eef0 0a67 	vmov.f32	s1, s15
 8001736:	f005 fe53 	bl	80073e0 <atan>
 800173a:	ec51 0b10 	vmov	r0, r1, d0
 800173e:	a35c      	add	r3, pc, #368	; (adr r3, 80018b0 <MPU6050_Read_All+0x3a0>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	f7fe ff78 	bl	8000638 <__aeabi_dmul>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001750:	e005      	b.n	800175e <MPU6050_Read_All+0x24e>
    } else {
        roll = 0.0;
 8001752:	f04f 0200 	mov.w	r2, #0
 8001756:	f04f 0300 	mov.w	r3, #0
 800175a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001764:	425b      	negs	r3, r3
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe fefc 	bl	8000564 <__aeabi_i2d>
 800176c:	4682      	mov	sl, r0
 800176e:	468b      	mov	fp, r1
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fef4 	bl	8000564 <__aeabi_i2d>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	ec43 2b11 	vmov	d1, r2, r3
 8001784:	ec4b ab10 	vmov	d0, sl, fp
 8001788:	f005 ffd3 	bl	8007732 <atan2>
 800178c:	ec51 0b10 	vmov	r0, r1, d0
 8001790:	a347      	add	r3, pc, #284	; (adr r3, 80018b0 <MPU6050_Read_All+0x3a0>)
 8001792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001796:	f7fe ff4f 	bl	8000638 <__aeabi_dmul>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	4b49      	ldr	r3, [pc, #292]	; (80018cc <MPU6050_Read_All+0x3bc>)
 80017a8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017ac:	f7ff f9b6 	bl	8000b1c <__aeabi_dcmplt>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00a      	beq.n	80017cc <MPU6050_Read_All+0x2bc>
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	4b43      	ldr	r3, [pc, #268]	; (80018d0 <MPU6050_Read_All+0x3c0>)
 80017c2:	f7ff f9c9 	bl	8000b58 <__aeabi_dcmpgt>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d114      	bne.n	80017f6 <MPU6050_Read_All+0x2e6>
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	4b3f      	ldr	r3, [pc, #252]	; (80018d0 <MPU6050_Read_All+0x3c0>)
 80017d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017d6:	f7ff f9bf 	bl	8000b58 <__aeabi_dcmpgt>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d015      	beq.n	800180c <MPU6050_Read_All+0x2fc>
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	4b38      	ldr	r3, [pc, #224]	; (80018cc <MPU6050_Read_All+0x3bc>)
 80017ec:	f7ff f996 	bl	8000b1c <__aeabi_dcmplt>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00a      	beq.n	800180c <MPU6050_Read_All+0x2fc>
        KalmanY.angle = pitch;
 80017f6:	4937      	ldr	r1, [pc, #220]	; (80018d4 <MPU6050_Read_All+0x3c4>)
 80017f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017fc:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001800:	6839      	ldr	r1, [r7, #0]
 8001802:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001806:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800180a:	e014      	b.n	8001836 <MPU6050_Read_All+0x326>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001812:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001816:	eeb0 1a47 	vmov.f32	s2, s14
 800181a:	eef0 1a67 	vmov.f32	s3, s15
 800181e:	ed97 0b06 	vldr	d0, [r7, #24]
 8001822:	482c      	ldr	r0, [pc, #176]	; (80018d4 <MPU6050_Read_All+0x3c4>)
 8001824:	f000 f85a 	bl	80018dc <Kalman_getAngle>
 8001828:	eeb0 7a40 	vmov.f32	s14, s0
 800182c:	eef0 7a60 	vmov.f32	s15, s1
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800183c:	4690      	mov	r8, r2
 800183e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <MPU6050_Read_All+0x3c0>)
 8001848:	4640      	mov	r0, r8
 800184a:	4649      	mov	r1, r9
 800184c:	f7ff f984 	bl	8000b58 <__aeabi_dcmpgt>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d008      	beq.n	8001868 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800185c:	4614      	mov	r4, r2
 800185e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800186e:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001872:	eeb0 1a47 	vmov.f32	s2, s14
 8001876:	eef0 1a67 	vmov.f32	s3, s15
 800187a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800187e:	4816      	ldr	r0, [pc, #88]	; (80018d8 <MPU6050_Read_All+0x3c8>)
 8001880:	f000 f82c 	bl	80018dc <Kalman_getAngle>
 8001884:	eeb0 7a40 	vmov.f32	s14, s0
 8001888:	eef0 7a60 	vmov.f32	s15, s1
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 8001892:	bf00      	nop
 8001894:	3740      	adds	r7, #64	; 0x40
 8001896:	46bd      	mov	sp, r7
 8001898:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800189c:	f3af 8000 	nop.w
 80018a0:	00000000 	.word	0x00000000
 80018a4:	409c2900 	.word	0x409c2900
 80018a8:	00000000 	.word	0x00000000
 80018ac:	40606000 	.word	0x40606000
 80018b0:	1a63c1f8 	.word	0x1a63c1f8
 80018b4:	404ca5dc 	.word	0x404ca5dc
 80018b8:	40a00000 	.word	0x40a00000
 80018bc:	43aa0000 	.word	0x43aa0000
 80018c0:	42121eb8 	.word	0x42121eb8
 80018c4:	20000364 	.word	0x20000364
 80018c8:	408f4000 	.word	0x408f4000
 80018cc:	c0568000 	.word	0xc0568000
 80018d0:	40568000 	.word	0x40568000
 80018d4:	20000060 	.word	0x20000060
 80018d8:	20000018 	.word	0x20000018

080018dc <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 80018dc:	b5b0      	push	{r4, r5, r7, lr}
 80018de:	b096      	sub	sp, #88	; 0x58
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	61f8      	str	r0, [r7, #28]
 80018e4:	ed87 0b04 	vstr	d0, [r7, #16]
 80018e8:	ed87 1b02 	vstr	d1, [r7, #8]
 80018ec:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80018f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018fa:	f7fe fce5 	bl	80002c8 <__aeabi_dsub>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800190c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001910:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001914:	f7fe fe90 	bl	8000638 <__aeabi_dmul>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4620      	mov	r0, r4
 800191e:	4629      	mov	r1, r5
 8001920:	f7fe fcd4 	bl	80002cc <__adddf3>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	69f9      	ldr	r1, [r7, #28]
 800192a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800193a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800193e:	f7fe fe7b 	bl	8000638 <__aeabi_dmul>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4610      	mov	r0, r2
 8001948:	4619      	mov	r1, r3
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001950:	f7fe fcba 	bl	80002c8 <__aeabi_dsub>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4610      	mov	r0, r2
 800195a:	4619      	mov	r1, r3
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001962:	f7fe fcb1 	bl	80002c8 <__aeabi_dsub>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4610      	mov	r0, r2
 800196c:	4619      	mov	r1, r3
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001974:	f7fe fcaa 	bl	80002cc <__adddf3>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4610      	mov	r0, r2
 800197e:	4619      	mov	r1, r3
 8001980:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001984:	f7fe fe58 	bl	8000638 <__aeabi_dmul>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4620      	mov	r0, r4
 800198e:	4629      	mov	r1, r5
 8001990:	f7fe fc9c 	bl	80002cc <__adddf3>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	69f9      	ldr	r1, [r7, #28]
 800199a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80019aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019ae:	f7fe fe43 	bl	8000638 <__aeabi_dmul>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4620      	mov	r0, r4
 80019b8:	4629      	mov	r1, r5
 80019ba:	f7fe fc85 	bl	80002c8 <__aeabi_dsub>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	69f9      	ldr	r1, [r7, #28]
 80019c4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80019d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019d8:	f7fe fe2e 	bl	8000638 <__aeabi_dmul>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4620      	mov	r0, r4
 80019e2:	4629      	mov	r1, r5
 80019e4:	f7fe fc70 	bl	80002c8 <__aeabi_dsub>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	69f9      	ldr	r1, [r7, #28]
 80019ee:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80019fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a02:	f7fe fe19 	bl	8000638 <__aeabi_dmul>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	4629      	mov	r1, r5
 8001a0e:	f7fe fc5d 	bl	80002cc <__adddf3>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	69f9      	ldr	r1, [r7, #28]
 8001a18:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001a28:	f7fe fc50 	bl	80002cc <__adddf3>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001a3a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001a3e:	f7fe ff25 	bl	800088c <__aeabi_ddiv>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001a50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001a54:	f7fe ff1a 	bl	800088c <__aeabi_ddiv>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001a66:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a6a:	f7fe fc2d 	bl	80002c8 <__aeabi_dsub>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a7c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a80:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001a84:	f7fe fdd8 	bl	8000638 <__aeabi_dmul>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	4629      	mov	r1, r5
 8001a90:	f7fe fc1c 	bl	80002cc <__adddf3>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	69f9      	ldr	r1, [r7, #28]
 8001a9a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001aa4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001aa8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001aac:	f7fe fdc4 	bl	8000638 <__aeabi_dmul>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	4629      	mov	r1, r5
 8001ab8:	f7fe fc08 	bl	80002cc <__adddf3>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	69f9      	ldr	r1, [r7, #28]
 8001ac2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001acc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001ad6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001ae0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ae4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001ae8:	f7fe fda6 	bl	8000638 <__aeabi_dmul>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4620      	mov	r0, r4
 8001af2:	4629      	mov	r1, r5
 8001af4:	f7fe fbe8 	bl	80002c8 <__aeabi_dsub>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	69f9      	ldr	r1, [r7, #28]
 8001afe:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001b08:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b0c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001b10:	f7fe fd92 	bl	8000638 <__aeabi_dmul>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4620      	mov	r0, r4
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	f7fe fbd4 	bl	80002c8 <__aeabi_dsub>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	69f9      	ldr	r1, [r7, #28]
 8001b26:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001b30:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001b38:	f7fe fd7e 	bl	8000638 <__aeabi_dmul>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4620      	mov	r0, r4
 8001b42:	4629      	mov	r1, r5
 8001b44:	f7fe fbc0 	bl	80002c8 <__aeabi_dsub>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	69f9      	ldr	r1, [r7, #28]
 8001b4e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001b58:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b5c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001b60:	f7fe fd6a 	bl	8000638 <__aeabi_dmul>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4620      	mov	r0, r4
 8001b6a:	4629      	mov	r1, r5
 8001b6c:	f7fe fbac 	bl	80002c8 <__aeabi_dsub>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	69f9      	ldr	r1, [r7, #28]
 8001b76:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001b80:	ec43 2b17 	vmov	d7, r2, r3
};
 8001b84:	eeb0 0a47 	vmov.f32	s0, s14
 8001b88:	eef0 0a67 	vmov.f32	s1, s15
 8001b8c:	3758      	adds	r7, #88	; 0x58
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	607b      	str	r3, [r7, #4]
 8001b9e:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <HAL_MspInit+0x4c>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	4a0f      	ldr	r2, [pc, #60]	; (8001be0 <HAL_MspInit+0x4c>)
 8001ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8001baa:	4b0d      	ldr	r3, [pc, #52]	; (8001be0 <HAL_MspInit+0x4c>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	603b      	str	r3, [r7, #0]
 8001bba:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <HAL_MspInit+0x4c>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	4a08      	ldr	r2, [pc, #32]	; (8001be0 <HAL_MspInit+0x4c>)
 8001bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_MspInit+0x4c>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bce:	603b      	str	r3, [r7, #0]
 8001bd0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bd2:	2007      	movs	r0, #7
 8001bd4:	f000 faec 	bl	80021b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd8:	bf00      	nop
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40023800 	.word	0x40023800

08001be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <NMI_Handler+0x4>

08001bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bee:	e7fe      	b.n	8001bee <HardFault_Handler+0x4>

08001bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf4:	e7fe      	b.n	8001bf4 <MemManage_Handler+0x4>

08001bf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bfa:	e7fe      	b.n	8001bfa <BusFault_Handler+0x4>

08001bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c00:	e7fe      	b.n	8001c00 <UsageFault_Handler+0x4>

08001c02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c30:	f000 f9c8 	bl	8001fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
	return 1;
 8001c3c:	2301      	movs	r3, #1
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <_kill>:

int _kill(int pid, int sig)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c52:	f002 fe63 	bl	800491c <__errno>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2216      	movs	r2, #22
 8001c5a:	601a      	str	r2, [r3, #0]
	return -1;
 8001c5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <_exit>:

void _exit (int status)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c70:	f04f 31ff 	mov.w	r1, #4294967295
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff ffe7 	bl	8001c48 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c7a:	e7fe      	b.n	8001c7a <_exit+0x12>

08001c7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	e00a      	b.n	8001ca4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c8e:	f3af 8000 	nop.w
 8001c92:	4601      	mov	r1, r0
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	60ba      	str	r2, [r7, #8]
 8001c9a:	b2ca      	uxtb	r2, r1
 8001c9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	dbf0      	blt.n	8001c8e <_read+0x12>
	}

return len;
 8001cac:	687b      	ldr	r3, [r7, #4]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b086      	sub	sp, #24
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	60f8      	str	r0, [r7, #12]
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	e009      	b.n	8001cdc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	60ba      	str	r2, [r7, #8]
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff fa53 	bl	800117c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	dbf1      	blt.n	8001cc8 <_write+0x12>
	}
	return len;
 8001ce4:	687b      	ldr	r3, [r7, #4]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <_close>:

int _close(int file)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
	return -1;
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d16:	605a      	str	r2, [r3, #4]
	return 0;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <_isatty>:

int _isatty(int file)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
	return 1;
 8001d2e:	2301      	movs	r3, #1
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
	return 0;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
	...

08001d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d60:	4a14      	ldr	r2, [pc, #80]	; (8001db4 <_sbrk+0x5c>)
 8001d62:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <_sbrk+0x60>)
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d6c:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <_sbrk+0x64>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d102      	bne.n	8001d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d74:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <_sbrk+0x64>)
 8001d76:	4a12      	ldr	r2, [pc, #72]	; (8001dc0 <_sbrk+0x68>)
 8001d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d7a:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <_sbrk+0x64>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d207      	bcs.n	8001d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d88:	f002 fdc8 	bl	800491c <__errno>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	220c      	movs	r2, #12
 8001d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d92:	f04f 33ff 	mov.w	r3, #4294967295
 8001d96:	e009      	b.n	8001dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <_sbrk+0x64>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d9e:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <_sbrk+0x64>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	4a05      	ldr	r2, [pc, #20]	; (8001dbc <_sbrk+0x64>)
 8001da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001daa:	68fb      	ldr	r3, [r7, #12]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20020000 	.word	0x20020000
 8001db8:	00000400 	.word	0x00000400
 8001dbc:	20000368 	.word	0x20000368
 8001dc0:	200003c8 	.word	0x200003c8

08001dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <SystemInit+0x20>)
 8001dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dce:	4a05      	ldr	r2, [pc, #20]	; (8001de4 <SystemInit+0x20>)
 8001dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001dec:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001dee:	4a12      	ldr	r2, [pc, #72]	; (8001e38 <MX_USART2_UART_Init+0x50>)
 8001df0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 256000;
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001df4:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 8001df8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e00:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e06:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e0c:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001e0e:	220c      	movs	r2, #12
 8001e10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e12:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e1e:	4805      	ldr	r0, [pc, #20]	; (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001e20:	f002 f9ba 	bl	8004198 <HAL_UART_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e2a:	f7ff fb03 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	2000036c 	.word	0x2000036c
 8001e38:	40004400 	.word	0x40004400

08001e3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08a      	sub	sp, #40	; 0x28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a19      	ldr	r2, [pc, #100]	; (8001ec0 <HAL_UART_MspInit+0x84>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d12b      	bne.n	8001eb6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
 8001e62:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_UART_MspInit+0x88>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <HAL_UART_MspInit+0x88>)
 8001e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <HAL_UART_MspInit+0x88>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <HAL_UART_MspInit+0x88>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a10      	ldr	r2, [pc, #64]	; (8001ec4 <HAL_UART_MspInit+0x88>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <HAL_UART_MspInit+0x88>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e96:	230c      	movs	r3, #12
 8001e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ea6:	2307      	movs	r3, #7
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eaa:	f107 0314 	add.w	r3, r7, #20
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4805      	ldr	r0, [pc, #20]	; (8001ec8 <HAL_UART_MspInit+0x8c>)
 8001eb2:	f000 f9b1 	bl	8002218 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	3728      	adds	r7, #40	; 0x28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40004400 	.word	0x40004400
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40020000 	.word	0x40020000

08001ecc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ecc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ed0:	480d      	ldr	r0, [pc, #52]	; (8001f08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ed2:	490e      	ldr	r1, [pc, #56]	; (8001f0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ed4:	4a0e      	ldr	r2, [pc, #56]	; (8001f10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed8:	e002      	b.n	8001ee0 <LoopCopyDataInit>

08001eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ede:	3304      	adds	r3, #4

08001ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee4:	d3f9      	bcc.n	8001eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee6:	4a0b      	ldr	r2, [pc, #44]	; (8001f14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ee8:	4c0b      	ldr	r4, [pc, #44]	; (8001f18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eec:	e001      	b.n	8001ef2 <LoopFillZerobss>

08001eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef0:	3204      	adds	r2, #4

08001ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef4:	d3fb      	bcc.n	8001eee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ef6:	f7ff ff65 	bl	8001dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001efa:	f002 fd15 	bl	8004928 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001efe:	f7ff f94f 	bl	80011a0 <main>
  bx  lr    
 8001f02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f0c:	20000284 	.word	0x20000284
  ldr r2, =_sidata
 8001f10:	08007f28 	.word	0x08007f28
  ldr r2, =_sbss
 8001f14:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 8001f18:	200003c4 	.word	0x200003c4

08001f1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f1c:	e7fe      	b.n	8001f1c <ADC_IRQHandler>
	...

08001f20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f24:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <HAL_Init+0x40>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0d      	ldr	r2, [pc, #52]	; (8001f60 <HAL_Init+0x40>)
 8001f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f30:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <HAL_Init+0x40>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <HAL_Init+0x40>)
 8001f36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f3c:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <HAL_Init+0x40>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a07      	ldr	r2, [pc, #28]	; (8001f60 <HAL_Init+0x40>)
 8001f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f48:	2003      	movs	r0, #3
 8001f4a:	f000 f931 	bl	80021b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f000 f808 	bl	8001f64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f54:	f7ff fe1e 	bl	8001b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40023c00 	.word	0x40023c00

08001f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <HAL_InitTick+0x54>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_InitTick+0x58>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	4619      	mov	r1, r3
 8001f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 f93b 	bl	80021fe <HAL_SYSTICK_Config>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e00e      	b.n	8001fb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b0f      	cmp	r3, #15
 8001f96:	d80a      	bhi.n	8001fae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa0:	f000 f911 	bl	80021c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fa4:	4a06      	ldr	r2, [pc, #24]	; (8001fc0 <HAL_InitTick+0x5c>)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	e000      	b.n	8001fb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	200000a8 	.word	0x200000a8
 8001fbc:	200000b0 	.word	0x200000b0
 8001fc0:	200000ac 	.word	0x200000ac

08001fc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc8:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_IncTick+0x20>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_IncTick+0x24>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	4a04      	ldr	r2, [pc, #16]	; (8001fe8 <HAL_IncTick+0x24>)
 8001fd6:	6013      	str	r3, [r2, #0]
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	200000b0 	.word	0x200000b0
 8001fe8:	200003b0 	.word	0x200003b0

08001fec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff0:	4b03      	ldr	r3, [pc, #12]	; (8002000 <HAL_GetTick+0x14>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	200003b0 	.word	0x200003b0

08002004 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800200c:	f7ff ffee 	bl	8001fec <HAL_GetTick>
 8002010:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800201c:	d005      	beq.n	800202a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800201e:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <HAL_Delay+0x44>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	461a      	mov	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4413      	add	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800202a:	bf00      	nop
 800202c:	f7ff ffde 	bl	8001fec <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	429a      	cmp	r2, r3
 800203a:	d8f7      	bhi.n	800202c <HAL_Delay+0x28>
  {
  }
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	200000b0 	.word	0x200000b0

0800204c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800205c:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <__NVIC_SetPriorityGrouping+0x44>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002068:	4013      	ands	r3, r2
 800206a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002074:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800207c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800207e:	4a04      	ldr	r2, [pc, #16]	; (8002090 <__NVIC_SetPriorityGrouping+0x44>)
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	60d3      	str	r3, [r2, #12]
}
 8002084:	bf00      	nop
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002098:	4b04      	ldr	r3, [pc, #16]	; (80020ac <__NVIC_GetPriorityGrouping+0x18>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	0a1b      	lsrs	r3, r3, #8
 800209e:	f003 0307 	and.w	r3, r3, #7
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	6039      	str	r1, [r7, #0]
 80020ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	db0a      	blt.n	80020da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	490c      	ldr	r1, [pc, #48]	; (80020fc <__NVIC_SetPriority+0x4c>)
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	0112      	lsls	r2, r2, #4
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	440b      	add	r3, r1
 80020d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d8:	e00a      	b.n	80020f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	4908      	ldr	r1, [pc, #32]	; (8002100 <__NVIC_SetPriority+0x50>)
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	3b04      	subs	r3, #4
 80020e8:	0112      	lsls	r2, r2, #4
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	440b      	add	r3, r1
 80020ee:	761a      	strb	r2, [r3, #24]
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	e000e100 	.word	0xe000e100
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002104:	b480      	push	{r7}
 8002106:	b089      	sub	sp, #36	; 0x24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f1c3 0307 	rsb	r3, r3, #7
 800211e:	2b04      	cmp	r3, #4
 8002120:	bf28      	it	cs
 8002122:	2304      	movcs	r3, #4
 8002124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3304      	adds	r3, #4
 800212a:	2b06      	cmp	r3, #6
 800212c:	d902      	bls.n	8002134 <NVIC_EncodePriority+0x30>
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3b03      	subs	r3, #3
 8002132:	e000      	b.n	8002136 <NVIC_EncodePriority+0x32>
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002138:	f04f 32ff 	mov.w	r2, #4294967295
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43da      	mvns	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	401a      	ands	r2, r3
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800214c:	f04f 31ff 	mov.w	r1, #4294967295
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	fa01 f303 	lsl.w	r3, r1, r3
 8002156:	43d9      	mvns	r1, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800215c:	4313      	orrs	r3, r2
         );
}
 800215e:	4618      	mov	r0, r3
 8002160:	3724      	adds	r7, #36	; 0x24
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
	...

0800216c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3b01      	subs	r3, #1
 8002178:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800217c:	d301      	bcc.n	8002182 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800217e:	2301      	movs	r3, #1
 8002180:	e00f      	b.n	80021a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002182:	4a0a      	ldr	r2, [pc, #40]	; (80021ac <SysTick_Config+0x40>)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3b01      	subs	r3, #1
 8002188:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800218a:	210f      	movs	r1, #15
 800218c:	f04f 30ff 	mov.w	r0, #4294967295
 8002190:	f7ff ff8e 	bl	80020b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002194:	4b05      	ldr	r3, [pc, #20]	; (80021ac <SysTick_Config+0x40>)
 8002196:	2200      	movs	r2, #0
 8002198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800219a:	4b04      	ldr	r3, [pc, #16]	; (80021ac <SysTick_Config+0x40>)
 800219c:	2207      	movs	r2, #7
 800219e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	e000e010 	.word	0xe000e010

080021b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7ff ff47 	bl	800204c <__NVIC_SetPriorityGrouping>
}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b086      	sub	sp, #24
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	4603      	mov	r3, r0
 80021ce:	60b9      	str	r1, [r7, #8]
 80021d0:	607a      	str	r2, [r7, #4]
 80021d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021d8:	f7ff ff5c 	bl	8002094 <__NVIC_GetPriorityGrouping>
 80021dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	68b9      	ldr	r1, [r7, #8]
 80021e2:	6978      	ldr	r0, [r7, #20]
 80021e4:	f7ff ff8e 	bl	8002104 <NVIC_EncodePriority>
 80021e8:	4602      	mov	r2, r0
 80021ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ee:	4611      	mov	r1, r2
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff ff5d 	bl	80020b0 <__NVIC_SetPriority>
}
 80021f6:	bf00      	nop
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b082      	sub	sp, #8
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff ffb0 	bl	800216c <SysTick_Config>
 800220c:	4603      	mov	r3, r0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002218:	b480      	push	{r7}
 800221a:	b089      	sub	sp, #36	; 0x24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002226:	2300      	movs	r3, #0
 8002228:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800222a:	2300      	movs	r3, #0
 800222c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
 8002232:	e165      	b.n	8002500 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002234:	2201      	movs	r2, #1
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	4013      	ands	r3, r2
 8002246:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	429a      	cmp	r2, r3
 800224e:	f040 8154 	bne.w	80024fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	2b01      	cmp	r3, #1
 800225c:	d005      	beq.n	800226a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002266:	2b02      	cmp	r3, #2
 8002268:	d130      	bne.n	80022cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	2203      	movs	r2, #3
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68da      	ldr	r2, [r3, #12]
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022a0:	2201      	movs	r2, #1
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	091b      	lsrs	r3, r3, #4
 80022b6:	f003 0201 	and.w	r2, r3, #1
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	d017      	beq.n	8002308 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	2203      	movs	r2, #3
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d123      	bne.n	800235c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	08da      	lsrs	r2, r3, #3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3208      	adds	r2, #8
 800231c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002320:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	220f      	movs	r2, #15
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	691a      	ldr	r2, [r3, #16]
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	08da      	lsrs	r2, r3, #3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3208      	adds	r2, #8
 8002356:	69b9      	ldr	r1, [r7, #24]
 8002358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	2203      	movs	r2, #3
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 0203 	and.w	r2, r3, #3
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4313      	orrs	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 80ae 	beq.w	80024fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	4b5d      	ldr	r3, [pc, #372]	; (8002518 <HAL_GPIO_Init+0x300>)
 80023a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a6:	4a5c      	ldr	r2, [pc, #368]	; (8002518 <HAL_GPIO_Init+0x300>)
 80023a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ac:	6453      	str	r3, [r2, #68]	; 0x44
 80023ae:	4b5a      	ldr	r3, [pc, #360]	; (8002518 <HAL_GPIO_Init+0x300>)
 80023b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023ba:	4a58      	ldr	r2, [pc, #352]	; (800251c <HAL_GPIO_Init+0x304>)
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	089b      	lsrs	r3, r3, #2
 80023c0:	3302      	adds	r3, #2
 80023c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	220f      	movs	r2, #15
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43db      	mvns	r3, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4013      	ands	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a4f      	ldr	r2, [pc, #316]	; (8002520 <HAL_GPIO_Init+0x308>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d025      	beq.n	8002432 <HAL_GPIO_Init+0x21a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a4e      	ldr	r2, [pc, #312]	; (8002524 <HAL_GPIO_Init+0x30c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d01f      	beq.n	800242e <HAL_GPIO_Init+0x216>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a4d      	ldr	r2, [pc, #308]	; (8002528 <HAL_GPIO_Init+0x310>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d019      	beq.n	800242a <HAL_GPIO_Init+0x212>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a4c      	ldr	r2, [pc, #304]	; (800252c <HAL_GPIO_Init+0x314>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d013      	beq.n	8002426 <HAL_GPIO_Init+0x20e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a4b      	ldr	r2, [pc, #300]	; (8002530 <HAL_GPIO_Init+0x318>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d00d      	beq.n	8002422 <HAL_GPIO_Init+0x20a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a4a      	ldr	r2, [pc, #296]	; (8002534 <HAL_GPIO_Init+0x31c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d007      	beq.n	800241e <HAL_GPIO_Init+0x206>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a49      	ldr	r2, [pc, #292]	; (8002538 <HAL_GPIO_Init+0x320>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d101      	bne.n	800241a <HAL_GPIO_Init+0x202>
 8002416:	2306      	movs	r3, #6
 8002418:	e00c      	b.n	8002434 <HAL_GPIO_Init+0x21c>
 800241a:	2307      	movs	r3, #7
 800241c:	e00a      	b.n	8002434 <HAL_GPIO_Init+0x21c>
 800241e:	2305      	movs	r3, #5
 8002420:	e008      	b.n	8002434 <HAL_GPIO_Init+0x21c>
 8002422:	2304      	movs	r3, #4
 8002424:	e006      	b.n	8002434 <HAL_GPIO_Init+0x21c>
 8002426:	2303      	movs	r3, #3
 8002428:	e004      	b.n	8002434 <HAL_GPIO_Init+0x21c>
 800242a:	2302      	movs	r3, #2
 800242c:	e002      	b.n	8002434 <HAL_GPIO_Init+0x21c>
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <HAL_GPIO_Init+0x21c>
 8002432:	2300      	movs	r3, #0
 8002434:	69fa      	ldr	r2, [r7, #28]
 8002436:	f002 0203 	and.w	r2, r2, #3
 800243a:	0092      	lsls	r2, r2, #2
 800243c:	4093      	lsls	r3, r2
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4313      	orrs	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002444:	4935      	ldr	r1, [pc, #212]	; (800251c <HAL_GPIO_Init+0x304>)
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	089b      	lsrs	r3, r3, #2
 800244a:	3302      	adds	r3, #2
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002452:	4b3a      	ldr	r3, [pc, #232]	; (800253c <HAL_GPIO_Init+0x324>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002476:	4a31      	ldr	r2, [pc, #196]	; (800253c <HAL_GPIO_Init+0x324>)
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800247c:	4b2f      	ldr	r3, [pc, #188]	; (800253c <HAL_GPIO_Init+0x324>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	43db      	mvns	r3, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024a0:	4a26      	ldr	r2, [pc, #152]	; (800253c <HAL_GPIO_Init+0x324>)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024a6:	4b25      	ldr	r3, [pc, #148]	; (800253c <HAL_GPIO_Init+0x324>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	43db      	mvns	r3, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4013      	ands	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024ca:	4a1c      	ldr	r2, [pc, #112]	; (800253c <HAL_GPIO_Init+0x324>)
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024d0:	4b1a      	ldr	r3, [pc, #104]	; (800253c <HAL_GPIO_Init+0x324>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024f4:	4a11      	ldr	r2, [pc, #68]	; (800253c <HAL_GPIO_Init+0x324>)
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	3301      	adds	r3, #1
 80024fe:	61fb      	str	r3, [r7, #28]
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	2b0f      	cmp	r3, #15
 8002504:	f67f ae96 	bls.w	8002234 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002508:	bf00      	nop
 800250a:	bf00      	nop
 800250c:	3724      	adds	r7, #36	; 0x24
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	40023800 	.word	0x40023800
 800251c:	40013800 	.word	0x40013800
 8002520:	40020000 	.word	0x40020000
 8002524:	40020400 	.word	0x40020400
 8002528:	40020800 	.word	0x40020800
 800252c:	40020c00 	.word	0x40020c00
 8002530:	40021000 	.word	0x40021000
 8002534:	40021400 	.word	0x40021400
 8002538:	40021800 	.word	0x40021800
 800253c:	40013c00 	.word	0x40013c00

08002540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	807b      	strh	r3, [r7, #2]
 800254c:	4613      	mov	r3, r2
 800254e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002550:	787b      	ldrb	r3, [r7, #1]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002556:	887a      	ldrh	r2, [r7, #2]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800255c:	e003      	b.n	8002566 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800255e:	887b      	ldrh	r3, [r7, #2]
 8002560:	041a      	lsls	r2, r3, #16
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	619a      	str	r2, [r3, #24]
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002572:	b480      	push	{r7}
 8002574:	b085      	sub	sp, #20
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	460b      	mov	r3, r1
 800257c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002584:	887a      	ldrh	r2, [r7, #2]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	4013      	ands	r3, r2
 800258a:	041a      	lsls	r2, r3, #16
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	43d9      	mvns	r1, r3
 8002590:	887b      	ldrh	r3, [r7, #2]
 8002592:	400b      	ands	r3, r1
 8002594:	431a      	orrs	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	619a      	str	r2, [r3, #24]
}
 800259a:	bf00      	nop
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
	...

080025a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e12b      	b.n	8002812 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d106      	bne.n	80025d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7fe fd8c 	bl	80010ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2224      	movs	r2, #36	; 0x24
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0201 	bic.w	r2, r2, #1
 80025ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800260a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800260c:	f001 f8ce 	bl	80037ac <HAL_RCC_GetPCLK1Freq>
 8002610:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	4a81      	ldr	r2, [pc, #516]	; (800281c <HAL_I2C_Init+0x274>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d807      	bhi.n	800262c <HAL_I2C_Init+0x84>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4a80      	ldr	r2, [pc, #512]	; (8002820 <HAL_I2C_Init+0x278>)
 8002620:	4293      	cmp	r3, r2
 8002622:	bf94      	ite	ls
 8002624:	2301      	movls	r3, #1
 8002626:	2300      	movhi	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	e006      	b.n	800263a <HAL_I2C_Init+0x92>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4a7d      	ldr	r2, [pc, #500]	; (8002824 <HAL_I2C_Init+0x27c>)
 8002630:	4293      	cmp	r3, r2
 8002632:	bf94      	ite	ls
 8002634:	2301      	movls	r3, #1
 8002636:	2300      	movhi	r3, #0
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e0e7      	b.n	8002812 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4a78      	ldr	r2, [pc, #480]	; (8002828 <HAL_I2C_Init+0x280>)
 8002646:	fba2 2303 	umull	r2, r3, r2, r3
 800264a:	0c9b      	lsrs	r3, r3, #18
 800264c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	430a      	orrs	r2, r1
 8002660:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	4a6a      	ldr	r2, [pc, #424]	; (800281c <HAL_I2C_Init+0x274>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d802      	bhi.n	800267c <HAL_I2C_Init+0xd4>
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	3301      	adds	r3, #1
 800267a:	e009      	b.n	8002690 <HAL_I2C_Init+0xe8>
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002682:	fb02 f303 	mul.w	r3, r2, r3
 8002686:	4a69      	ldr	r2, [pc, #420]	; (800282c <HAL_I2C_Init+0x284>)
 8002688:	fba2 2303 	umull	r2, r3, r2, r3
 800268c:	099b      	lsrs	r3, r3, #6
 800268e:	3301      	adds	r3, #1
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6812      	ldr	r2, [r2, #0]
 8002694:	430b      	orrs	r3, r1
 8002696:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	495c      	ldr	r1, [pc, #368]	; (800281c <HAL_I2C_Init+0x274>)
 80026ac:	428b      	cmp	r3, r1
 80026ae:	d819      	bhi.n	80026e4 <HAL_I2C_Init+0x13c>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	1e59      	subs	r1, r3, #1
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80026be:	1c59      	adds	r1, r3, #1
 80026c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026c4:	400b      	ands	r3, r1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00a      	beq.n	80026e0 <HAL_I2C_Init+0x138>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	1e59      	subs	r1, r3, #1
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80026d8:	3301      	adds	r3, #1
 80026da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026de:	e051      	b.n	8002784 <HAL_I2C_Init+0x1dc>
 80026e0:	2304      	movs	r3, #4
 80026e2:	e04f      	b.n	8002784 <HAL_I2C_Init+0x1dc>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d111      	bne.n	8002710 <HAL_I2C_Init+0x168>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	1e58      	subs	r0, r3, #1
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6859      	ldr	r1, [r3, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	440b      	add	r3, r1
 80026fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80026fe:	3301      	adds	r3, #1
 8002700:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002704:	2b00      	cmp	r3, #0
 8002706:	bf0c      	ite	eq
 8002708:	2301      	moveq	r3, #1
 800270a:	2300      	movne	r3, #0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	e012      	b.n	8002736 <HAL_I2C_Init+0x18e>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	1e58      	subs	r0, r3, #1
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6859      	ldr	r1, [r3, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	0099      	lsls	r1, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	fbb0 f3f3 	udiv	r3, r0, r3
 8002726:	3301      	adds	r3, #1
 8002728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800272c:	2b00      	cmp	r3, #0
 800272e:	bf0c      	ite	eq
 8002730:	2301      	moveq	r3, #1
 8002732:	2300      	movne	r3, #0
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_I2C_Init+0x196>
 800273a:	2301      	movs	r3, #1
 800273c:	e022      	b.n	8002784 <HAL_I2C_Init+0x1dc>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10e      	bne.n	8002764 <HAL_I2C_Init+0x1bc>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	1e58      	subs	r0, r3, #1
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6859      	ldr	r1, [r3, #4]
 800274e:	460b      	mov	r3, r1
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	440b      	add	r3, r1
 8002754:	fbb0 f3f3 	udiv	r3, r0, r3
 8002758:	3301      	adds	r3, #1
 800275a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800275e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002762:	e00f      	b.n	8002784 <HAL_I2C_Init+0x1dc>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	1e58      	subs	r0, r3, #1
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6859      	ldr	r1, [r3, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	0099      	lsls	r1, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	fbb0 f3f3 	udiv	r3, r0, r3
 800277a:	3301      	adds	r3, #1
 800277c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002780:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	6809      	ldr	r1, [r1, #0]
 8002788:	4313      	orrs	r3, r2
 800278a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69da      	ldr	r2, [r3, #28]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6911      	ldr	r1, [r2, #16]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68d2      	ldr	r2, [r2, #12]
 80027be:	4311      	orrs	r1, r2
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	430b      	orrs	r3, r1
 80027c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	695a      	ldr	r2, [r3, #20]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	430a      	orrs	r2, r1
 80027e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0201 	orr.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2220      	movs	r2, #32
 80027fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	000186a0 	.word	0x000186a0
 8002820:	001e847f 	.word	0x001e847f
 8002824:	003d08ff 	.word	0x003d08ff
 8002828:	431bde83 	.word	0x431bde83
 800282c:	10624dd3 	.word	0x10624dd3

08002830 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b088      	sub	sp, #32
 8002834:	af02      	add	r7, sp, #8
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	4608      	mov	r0, r1
 800283a:	4611      	mov	r1, r2
 800283c:	461a      	mov	r2, r3
 800283e:	4603      	mov	r3, r0
 8002840:	817b      	strh	r3, [r7, #10]
 8002842:	460b      	mov	r3, r1
 8002844:	813b      	strh	r3, [r7, #8]
 8002846:	4613      	mov	r3, r2
 8002848:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800284a:	f7ff fbcf 	bl	8001fec <HAL_GetTick>
 800284e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b20      	cmp	r3, #32
 800285a:	f040 80d9 	bne.w	8002a10 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	2319      	movs	r3, #25
 8002864:	2201      	movs	r2, #1
 8002866:	496d      	ldr	r1, [pc, #436]	; (8002a1c <HAL_I2C_Mem_Write+0x1ec>)
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 fc7f 	bl	800316c <I2C_WaitOnFlagUntilTimeout>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002874:	2302      	movs	r3, #2
 8002876:	e0cc      	b.n	8002a12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800287e:	2b01      	cmp	r3, #1
 8002880:	d101      	bne.n	8002886 <HAL_I2C_Mem_Write+0x56>
 8002882:	2302      	movs	r3, #2
 8002884:	e0c5      	b.n	8002a12 <HAL_I2C_Mem_Write+0x1e2>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b01      	cmp	r3, #1
 800289a:	d007      	beq.n	80028ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0201 	orr.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2221      	movs	r2, #33	; 0x21
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2240      	movs	r2, #64	; 0x40
 80028c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6a3a      	ldr	r2, [r7, #32]
 80028d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4a4d      	ldr	r2, [pc, #308]	; (8002a20 <HAL_I2C_Mem_Write+0x1f0>)
 80028ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028ee:	88f8      	ldrh	r0, [r7, #6]
 80028f0:	893a      	ldrh	r2, [r7, #8]
 80028f2:	8979      	ldrh	r1, [r7, #10]
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	9301      	str	r3, [sp, #4]
 80028f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	4603      	mov	r3, r0
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 fab6 	bl	8002e70 <I2C_RequestMemoryWrite>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d052      	beq.n	80029b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e081      	b.n	8002a12 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 fd00 	bl	8003318 <I2C_WaitOnTXEFlagUntilTimeout>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00d      	beq.n	800293a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	2b04      	cmp	r3, #4
 8002924:	d107      	bne.n	8002936 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002934:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e06b      	b.n	8002a12 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	781a      	ldrb	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	1c5a      	adds	r2, r3, #1
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002960:	b29b      	uxth	r3, r3
 8002962:	3b01      	subs	r3, #1
 8002964:	b29a      	uxth	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b04      	cmp	r3, #4
 8002976:	d11b      	bne.n	80029b0 <HAL_I2C_Mem_Write+0x180>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297c:	2b00      	cmp	r3, #0
 800297e:	d017      	beq.n	80029b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002984:	781a      	ldrb	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	3b01      	subs	r3, #1
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1aa      	bne.n	800290e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 fcec 	bl	800339a <I2C_WaitOnBTFFlagUntilTimeout>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00d      	beq.n	80029e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d107      	bne.n	80029e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e016      	b.n	8002a12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2220      	movs	r2, #32
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	e000      	b.n	8002a12 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002a10:	2302      	movs	r3, #2
  }
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3718      	adds	r7, #24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	00100002 	.word	0x00100002
 8002a20:	ffff0000 	.word	0xffff0000

08002a24 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08c      	sub	sp, #48	; 0x30
 8002a28:	af02      	add	r7, sp, #8
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	4608      	mov	r0, r1
 8002a2e:	4611      	mov	r1, r2
 8002a30:	461a      	mov	r2, r3
 8002a32:	4603      	mov	r3, r0
 8002a34:	817b      	strh	r3, [r7, #10]
 8002a36:	460b      	mov	r3, r1
 8002a38:	813b      	strh	r3, [r7, #8]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a3e:	f7ff fad5 	bl	8001fec <HAL_GetTick>
 8002a42:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b20      	cmp	r3, #32
 8002a4e:	f040 8208 	bne.w	8002e62 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	2319      	movs	r3, #25
 8002a58:	2201      	movs	r2, #1
 8002a5a:	497b      	ldr	r1, [pc, #492]	; (8002c48 <HAL_I2C_Mem_Read+0x224>)
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 fb85 	bl	800316c <I2C_WaitOnFlagUntilTimeout>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e1fb      	b.n	8002e64 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d101      	bne.n	8002a7a <HAL_I2C_Mem_Read+0x56>
 8002a76:	2302      	movs	r3, #2
 8002a78:	e1f4      	b.n	8002e64 <HAL_I2C_Mem_Read+0x440>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d007      	beq.n	8002aa0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0201 	orr.w	r2, r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2222      	movs	r2, #34	; 0x22
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2240      	movs	r2, #64	; 0x40
 8002abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002ad0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4a5b      	ldr	r2, [pc, #364]	; (8002c4c <HAL_I2C_Mem_Read+0x228>)
 8002ae0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ae2:	88f8      	ldrh	r0, [r7, #6]
 8002ae4:	893a      	ldrh	r2, [r7, #8]
 8002ae6:	8979      	ldrh	r1, [r7, #10]
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	9301      	str	r3, [sp, #4]
 8002aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	4603      	mov	r3, r0
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 fa52 	bl	8002f9c <I2C_RequestMemoryRead>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e1b0      	b.n	8002e64 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d113      	bne.n	8002b32 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	623b      	str	r3, [r7, #32]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	623b      	str	r3, [r7, #32]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	623b      	str	r3, [r7, #32]
 8002b1e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	e184      	b.n	8002e3c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d11b      	bne.n	8002b72 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61fb      	str	r3, [r7, #28]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	61fb      	str	r3, [r7, #28]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	61fb      	str	r3, [r7, #28]
 8002b5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	e164      	b.n	8002e3c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d11b      	bne.n	8002bb2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b88:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	61bb      	str	r3, [r7, #24]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	61bb      	str	r3, [r7, #24]
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	e144      	b.n	8002e3c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002bc8:	e138      	b.n	8002e3c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	f200 80f1 	bhi.w	8002db6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d123      	bne.n	8002c24 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 fc1b 	bl	800341c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e139      	b.n	8002e64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691a      	ldr	r2, [r3, #16]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	1c5a      	adds	r2, r3, #1
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c22:	e10b      	b.n	8002e3c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d14e      	bne.n	8002cca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c32:	2200      	movs	r2, #0
 8002c34:	4906      	ldr	r1, [pc, #24]	; (8002c50 <HAL_I2C_Mem_Read+0x22c>)
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 fa98 	bl	800316c <I2C_WaitOnFlagUntilTimeout>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d008      	beq.n	8002c54 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e10e      	b.n	8002e64 <HAL_I2C_Mem_Read+0x440>
 8002c46:	bf00      	nop
 8002c48:	00100002 	.word	0x00100002
 8002c4c:	ffff0000 	.word	0xffff0000
 8002c50:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691a      	ldr	r2, [r3, #16]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c80:	3b01      	subs	r3, #1
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	691a      	ldr	r2, [r3, #16]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	1c5a      	adds	r2, r3, #1
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cc8:	e0b8      	b.n	8002e3c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	4966      	ldr	r1, [pc, #408]	; (8002e6c <HAL_I2C_Mem_Read+0x448>)
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 fa49 	bl	800316c <I2C_WaitOnFlagUntilTimeout>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0bf      	b.n	8002e64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691a      	ldr	r2, [r3, #16]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	494f      	ldr	r1, [pc, #316]	; (8002e6c <HAL_I2C_Mem_Read+0x448>)
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 fa1b 	bl	800316c <I2C_WaitOnFlagUntilTimeout>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e091      	b.n	8002e64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691a      	ldr	r2, [r3, #16]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	1c5a      	adds	r2, r3, #1
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002db4:	e042      	b.n	8002e3c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 fb2e 	bl	800341c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e04c      	b.n	8002e64 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	691a      	ldr	r2, [r3, #16]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d118      	bne.n	8002e3c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	b2d2      	uxtb	r2, r2
 8002e16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e26:	3b01      	subs	r3, #1
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f47f aec2 	bne.w	8002bca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	e000      	b.n	8002e64 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002e62:	2302      	movs	r3, #2
  }
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3728      	adds	r7, #40	; 0x28
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	00010004 	.word	0x00010004

08002e70 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b088      	sub	sp, #32
 8002e74:	af02      	add	r7, sp, #8
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	4608      	mov	r0, r1
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4603      	mov	r3, r0
 8002e80:	817b      	strh	r3, [r7, #10]
 8002e82:	460b      	mov	r3, r1
 8002e84:	813b      	strh	r3, [r7, #8]
 8002e86:	4613      	mov	r3, r2
 8002e88:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 f960 	bl	800316c <I2C_WaitOnFlagUntilTimeout>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00d      	beq.n	8002ece <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ebc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ec0:	d103      	bne.n	8002eca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ec8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e05f      	b.n	8002f8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ece:	897b      	ldrh	r3, [r7, #10]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002edc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	6a3a      	ldr	r2, [r7, #32]
 8002ee2:	492d      	ldr	r1, [pc, #180]	; (8002f98 <I2C_RequestMemoryWrite+0x128>)
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 f998 	bl	800321a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e04c      	b.n	8002f8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0c:	6a39      	ldr	r1, [r7, #32]
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 fa02 	bl	8003318 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00d      	beq.n	8002f36 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d107      	bne.n	8002f32 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e02b      	b.n	8002f8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f36:	88fb      	ldrh	r3, [r7, #6]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d105      	bne.n	8002f48 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f3c:	893b      	ldrh	r3, [r7, #8]
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	611a      	str	r2, [r3, #16]
 8002f46:	e021      	b.n	8002f8c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f48:	893b      	ldrh	r3, [r7, #8]
 8002f4a:	0a1b      	lsrs	r3, r3, #8
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f58:	6a39      	ldr	r1, [r7, #32]
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 f9dc 	bl	8003318 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00d      	beq.n	8002f82 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d107      	bne.n	8002f7e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e005      	b.n	8002f8e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f82:	893b      	ldrh	r3, [r7, #8]
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	00010002 	.word	0x00010002

08002f9c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b088      	sub	sp, #32
 8002fa0:	af02      	add	r7, sp, #8
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	4608      	mov	r0, r1
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	461a      	mov	r2, r3
 8002faa:	4603      	mov	r3, r0
 8002fac:	817b      	strh	r3, [r7, #10]
 8002fae:	460b      	mov	r3, r1
 8002fb0:	813b      	strh	r3, [r7, #8]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fc4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fd4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 f8c2 	bl	800316c <I2C_WaitOnFlagUntilTimeout>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00d      	beq.n	800300a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ffc:	d103      	bne.n	8003006 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003004:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e0aa      	b.n	8003160 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800300a:	897b      	ldrh	r3, [r7, #10]
 800300c:	b2db      	uxtb	r3, r3
 800300e:	461a      	mov	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003018:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	6a3a      	ldr	r2, [r7, #32]
 800301e:	4952      	ldr	r1, [pc, #328]	; (8003168 <I2C_RequestMemoryRead+0x1cc>)
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 f8fa 	bl	800321a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e097      	b.n	8003160 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003048:	6a39      	ldr	r1, [r7, #32]
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 f964 	bl	8003318 <I2C_WaitOnTXEFlagUntilTimeout>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00d      	beq.n	8003072 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	2b04      	cmp	r3, #4
 800305c:	d107      	bne.n	800306e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800306c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e076      	b.n	8003160 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003072:	88fb      	ldrh	r3, [r7, #6]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d105      	bne.n	8003084 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003078:	893b      	ldrh	r3, [r7, #8]
 800307a:	b2da      	uxtb	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	611a      	str	r2, [r3, #16]
 8003082:	e021      	b.n	80030c8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003084:	893b      	ldrh	r3, [r7, #8]
 8003086:	0a1b      	lsrs	r3, r3, #8
 8003088:	b29b      	uxth	r3, r3
 800308a:	b2da      	uxtb	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003094:	6a39      	ldr	r1, [r7, #32]
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f000 f93e 	bl	8003318 <I2C_WaitOnTXEFlagUntilTimeout>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00d      	beq.n	80030be <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d107      	bne.n	80030ba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e050      	b.n	8003160 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030be:	893b      	ldrh	r3, [r7, #8]
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ca:	6a39      	ldr	r1, [r7, #32]
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f000 f923 	bl	8003318 <I2C_WaitOnTXEFlagUntilTimeout>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00d      	beq.n	80030f4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d107      	bne.n	80030f0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e035      	b.n	8003160 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003102:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	2200      	movs	r2, #0
 800310c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f000 f82b 	bl	800316c <I2C_WaitOnFlagUntilTimeout>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00d      	beq.n	8003138 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800312a:	d103      	bne.n	8003134 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003132:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e013      	b.n	8003160 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003138:	897b      	ldrh	r3, [r7, #10]
 800313a:	b2db      	uxtb	r3, r3
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	b2da      	uxtb	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	6a3a      	ldr	r2, [r7, #32]
 800314c:	4906      	ldr	r1, [pc, #24]	; (8003168 <I2C_RequestMemoryRead+0x1cc>)
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 f863 	bl	800321a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e000      	b.n	8003160 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	00010002 	.word	0x00010002

0800316c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	603b      	str	r3, [r7, #0]
 8003178:	4613      	mov	r3, r2
 800317a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800317c:	e025      	b.n	80031ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003184:	d021      	beq.n	80031ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003186:	f7fe ff31 	bl	8001fec <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	429a      	cmp	r2, r3
 8003194:	d302      	bcc.n	800319c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d116      	bne.n	80031ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2220      	movs	r2, #32
 80031a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	f043 0220 	orr.w	r2, r3, #32
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e023      	b.n	8003212 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	0c1b      	lsrs	r3, r3, #16
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d10d      	bne.n	80031f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	43da      	mvns	r2, r3
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	4013      	ands	r3, r2
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	bf0c      	ite	eq
 80031e6:	2301      	moveq	r3, #1
 80031e8:	2300      	movne	r3, #0
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	461a      	mov	r2, r3
 80031ee:	e00c      	b.n	800320a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	43da      	mvns	r2, r3
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	4013      	ands	r3, r2
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	bf0c      	ite	eq
 8003202:	2301      	moveq	r3, #1
 8003204:	2300      	movne	r3, #0
 8003206:	b2db      	uxtb	r3, r3
 8003208:	461a      	mov	r2, r3
 800320a:	79fb      	ldrb	r3, [r7, #7]
 800320c:	429a      	cmp	r2, r3
 800320e:	d0b6      	beq.n	800317e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b084      	sub	sp, #16
 800321e:	af00      	add	r7, sp, #0
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	60b9      	str	r1, [r7, #8]
 8003224:	607a      	str	r2, [r7, #4]
 8003226:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003228:	e051      	b.n	80032ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003238:	d123      	bne.n	8003282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003248:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003252:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2220      	movs	r2, #32
 800325e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	f043 0204 	orr.w	r2, r3, #4
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e046      	b.n	8003310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003288:	d021      	beq.n	80032ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800328a:	f7fe feaf 	bl	8001fec <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	429a      	cmp	r2, r3
 8003298:	d302      	bcc.n	80032a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d116      	bne.n	80032ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f043 0220 	orr.w	r2, r3, #32
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e020      	b.n	8003310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	0c1b      	lsrs	r3, r3, #16
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d10c      	bne.n	80032f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	43da      	mvns	r2, r3
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	4013      	ands	r3, r2
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	bf14      	ite	ne
 80032ea:	2301      	movne	r3, #1
 80032ec:	2300      	moveq	r3, #0
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	e00b      	b.n	800330a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	43da      	mvns	r2, r3
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	4013      	ands	r3, r2
 80032fe:	b29b      	uxth	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	bf14      	ite	ne
 8003304:	2301      	movne	r3, #1
 8003306:	2300      	moveq	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d18d      	bne.n	800322a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003324:	e02d      	b.n	8003382 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 f8ce 	bl	80034c8 <I2C_IsAcknowledgeFailed>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e02d      	b.n	8003392 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333c:	d021      	beq.n	8003382 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333e:	f7fe fe55 	bl	8001fec <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	429a      	cmp	r2, r3
 800334c:	d302      	bcc.n	8003354 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d116      	bne.n	8003382 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2220      	movs	r2, #32
 800335e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	f043 0220 	orr.w	r2, r3, #32
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e007      	b.n	8003392 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338c:	2b80      	cmp	r3, #128	; 0x80
 800338e:	d1ca      	bne.n	8003326 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
 80033a0:	60f8      	str	r0, [r7, #12]
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033a6:	e02d      	b.n	8003404 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 f88d 	bl	80034c8 <I2C_IsAcknowledgeFailed>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e02d      	b.n	8003414 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033be:	d021      	beq.n	8003404 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033c0:	f7fe fe14 	bl	8001fec <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d302      	bcc.n	80033d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d116      	bne.n	8003404 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	f043 0220 	orr.w	r2, r3, #32
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e007      	b.n	8003414 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	f003 0304 	and.w	r3, r3, #4
 800340e:	2b04      	cmp	r3, #4
 8003410:	d1ca      	bne.n	80033a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003428:	e042      	b.n	80034b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	f003 0310 	and.w	r3, r3, #16
 8003434:	2b10      	cmp	r3, #16
 8003436:	d119      	bne.n	800346c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f06f 0210 	mvn.w	r2, #16
 8003440:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e029      	b.n	80034c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800346c:	f7fe fdbe 	bl	8001fec <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	429a      	cmp	r2, r3
 800347a:	d302      	bcc.n	8003482 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d116      	bne.n	80034b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2220      	movs	r2, #32
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	f043 0220 	orr.w	r2, r3, #32
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e007      	b.n	80034c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ba:	2b40      	cmp	r3, #64	; 0x40
 80034bc:	d1b5      	bne.n	800342a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034de:	d11b      	bne.n	8003518 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2220      	movs	r2, #32
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	f043 0204 	orr.w	r2, r3, #4
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e000      	b.n	800351a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
	...

08003528 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800352e:	2300      	movs	r3, #0
 8003530:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	603b      	str	r3, [r7, #0]
 8003536:	4b20      	ldr	r3, [pc, #128]	; (80035b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	4a1f      	ldr	r2, [pc, #124]	; (80035b8 <HAL_PWREx_EnableOverDrive+0x90>)
 800353c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003540:	6413      	str	r3, [r2, #64]	; 0x40
 8003542:	4b1d      	ldr	r3, [pc, #116]	; (80035b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354a:	603b      	str	r3, [r7, #0]
 800354c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800354e:	4b1b      	ldr	r3, [pc, #108]	; (80035bc <HAL_PWREx_EnableOverDrive+0x94>)
 8003550:	2201      	movs	r2, #1
 8003552:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003554:	f7fe fd4a 	bl	8001fec <HAL_GetTick>
 8003558:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800355a:	e009      	b.n	8003570 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800355c:	f7fe fd46 	bl	8001fec <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800356a:	d901      	bls.n	8003570 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e01f      	b.n	80035b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003570:	4b13      	ldr	r3, [pc, #76]	; (80035c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800357c:	d1ee      	bne.n	800355c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800357e:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003580:	2201      	movs	r2, #1
 8003582:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003584:	f7fe fd32 	bl	8001fec <HAL_GetTick>
 8003588:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800358a:	e009      	b.n	80035a0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800358c:	f7fe fd2e 	bl	8001fec <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800359a:	d901      	bls.n	80035a0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e007      	b.n	80035b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035a0:	4b07      	ldr	r3, [pc, #28]	; (80035c0 <HAL_PWREx_EnableOverDrive+0x98>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035ac:	d1ee      	bne.n	800358c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40023800 	.word	0x40023800
 80035bc:	420e0040 	.word	0x420e0040
 80035c0:	40007000 	.word	0x40007000
 80035c4:	420e0044 	.word	0x420e0044

080035c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e0cc      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035dc:	4b68      	ldr	r3, [pc, #416]	; (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 030f 	and.w	r3, r3, #15
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d90c      	bls.n	8003604 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ea:	4b65      	ldr	r3, [pc, #404]	; (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f2:	4b63      	ldr	r3, [pc, #396]	; (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d001      	beq.n	8003604 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e0b8      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d020      	beq.n	8003652 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	d005      	beq.n	8003628 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800361c:	4b59      	ldr	r3, [pc, #356]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	4a58      	ldr	r2, [pc, #352]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003626:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0308 	and.w	r3, r3, #8
 8003630:	2b00      	cmp	r3, #0
 8003632:	d005      	beq.n	8003640 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003634:	4b53      	ldr	r3, [pc, #332]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	4a52      	ldr	r2, [pc, #328]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800363e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003640:	4b50      	ldr	r3, [pc, #320]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	494d      	ldr	r1, [pc, #308]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	4313      	orrs	r3, r2
 8003650:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d044      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d107      	bne.n	8003676 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003666:	4b47      	ldr	r3, [pc, #284]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d119      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e07f      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b02      	cmp	r3, #2
 800367c:	d003      	beq.n	8003686 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003682:	2b03      	cmp	r3, #3
 8003684:	d107      	bne.n	8003696 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003686:	4b3f      	ldr	r3, [pc, #252]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d109      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e06f      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003696:	4b3b      	ldr	r3, [pc, #236]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e067      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036a6:	4b37      	ldr	r3, [pc, #220]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f023 0203 	bic.w	r2, r3, #3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	4934      	ldr	r1, [pc, #208]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036b8:	f7fe fc98 	bl	8001fec <HAL_GetTick>
 80036bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036be:	e00a      	b.n	80036d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c0:	f7fe fc94 	bl	8001fec <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e04f      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d6:	4b2b      	ldr	r3, [pc, #172]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 020c 	and.w	r2, r3, #12
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d1eb      	bne.n	80036c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036e8:	4b25      	ldr	r3, [pc, #148]	; (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 030f 	and.w	r3, r3, #15
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d20c      	bcs.n	8003710 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f6:	4b22      	ldr	r3, [pc, #136]	; (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fe:	4b20      	ldr	r3, [pc, #128]	; (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	429a      	cmp	r2, r3
 800370a:	d001      	beq.n	8003710 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e032      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	d008      	beq.n	800372e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800371c:	4b19      	ldr	r3, [pc, #100]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	4916      	ldr	r1, [pc, #88]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	4313      	orrs	r3, r2
 800372c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b00      	cmp	r3, #0
 8003738:	d009      	beq.n	800374e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800373a:	4b12      	ldr	r3, [pc, #72]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	490e      	ldr	r1, [pc, #56]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	4313      	orrs	r3, r2
 800374c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800374e:	f000 f855 	bl	80037fc <HAL_RCC_GetSysClockFreq>
 8003752:	4602      	mov	r2, r0
 8003754:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	091b      	lsrs	r3, r3, #4
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	490a      	ldr	r1, [pc, #40]	; (8003788 <HAL_RCC_ClockConfig+0x1c0>)
 8003760:	5ccb      	ldrb	r3, [r1, r3]
 8003762:	fa22 f303 	lsr.w	r3, r2, r3
 8003766:	4a09      	ldr	r2, [pc, #36]	; (800378c <HAL_RCC_ClockConfig+0x1c4>)
 8003768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800376a:	4b09      	ldr	r3, [pc, #36]	; (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f7fe fbf8 	bl	8001f64 <HAL_InitTick>

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40023c00 	.word	0x40023c00
 8003784:	40023800 	.word	0x40023800
 8003788:	08007ab0 	.word	0x08007ab0
 800378c:	200000a8 	.word	0x200000a8
 8003790:	200000ac 	.word	0x200000ac

08003794 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003798:	4b03      	ldr	r3, [pc, #12]	; (80037a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800379a:	681b      	ldr	r3, [r3, #0]
}
 800379c:	4618      	mov	r0, r3
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	200000a8 	.word	0x200000a8

080037ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037b0:	f7ff fff0 	bl	8003794 <HAL_RCC_GetHCLKFreq>
 80037b4:	4602      	mov	r2, r0
 80037b6:	4b05      	ldr	r3, [pc, #20]	; (80037cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	0a9b      	lsrs	r3, r3, #10
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	4903      	ldr	r1, [pc, #12]	; (80037d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037c2:	5ccb      	ldrb	r3, [r1, r3]
 80037c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40023800 	.word	0x40023800
 80037d0:	08007ac0 	.word	0x08007ac0

080037d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037d8:	f7ff ffdc 	bl	8003794 <HAL_RCC_GetHCLKFreq>
 80037dc:	4602      	mov	r2, r0
 80037de:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	0b5b      	lsrs	r3, r3, #13
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	4903      	ldr	r1, [pc, #12]	; (80037f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037ea:	5ccb      	ldrb	r3, [r1, r3]
 80037ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40023800 	.word	0x40023800
 80037f8:	08007ac0 	.word	0x08007ac0

080037fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003800:	b0ae      	sub	sp, #184	; 0xb8
 8003802:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003810:	2300      	movs	r3, #0
 8003812:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003816:	2300      	movs	r3, #0
 8003818:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800381c:	2300      	movs	r3, #0
 800381e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003822:	4bcb      	ldr	r3, [pc, #812]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x354>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 030c 	and.w	r3, r3, #12
 800382a:	2b0c      	cmp	r3, #12
 800382c:	f200 8206 	bhi.w	8003c3c <HAL_RCC_GetSysClockFreq+0x440>
 8003830:	a201      	add	r2, pc, #4	; (adr r2, 8003838 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003836:	bf00      	nop
 8003838:	0800386d 	.word	0x0800386d
 800383c:	08003c3d 	.word	0x08003c3d
 8003840:	08003c3d 	.word	0x08003c3d
 8003844:	08003c3d 	.word	0x08003c3d
 8003848:	08003875 	.word	0x08003875
 800384c:	08003c3d 	.word	0x08003c3d
 8003850:	08003c3d 	.word	0x08003c3d
 8003854:	08003c3d 	.word	0x08003c3d
 8003858:	0800387d 	.word	0x0800387d
 800385c:	08003c3d 	.word	0x08003c3d
 8003860:	08003c3d 	.word	0x08003c3d
 8003864:	08003c3d 	.word	0x08003c3d
 8003868:	08003a6d 	.word	0x08003a6d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800386c:	4bb9      	ldr	r3, [pc, #740]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x358>)
 800386e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003872:	e1e7      	b.n	8003c44 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003874:	4bb8      	ldr	r3, [pc, #736]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003876:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800387a:	e1e3      	b.n	8003c44 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800387c:	4bb4      	ldr	r3, [pc, #720]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x354>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003884:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003888:	4bb1      	ldr	r3, [pc, #708]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x354>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d071      	beq.n	8003978 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003894:	4bae      	ldr	r3, [pc, #696]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x354>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	099b      	lsrs	r3, r3, #6
 800389a:	2200      	movs	r2, #0
 800389c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80038a0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80038a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80038a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80038b0:	2300      	movs	r3, #0
 80038b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80038b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80038ba:	4622      	mov	r2, r4
 80038bc:	462b      	mov	r3, r5
 80038be:	f04f 0000 	mov.w	r0, #0
 80038c2:	f04f 0100 	mov.w	r1, #0
 80038c6:	0159      	lsls	r1, r3, #5
 80038c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038cc:	0150      	lsls	r0, r2, #5
 80038ce:	4602      	mov	r2, r0
 80038d0:	460b      	mov	r3, r1
 80038d2:	4621      	mov	r1, r4
 80038d4:	1a51      	subs	r1, r2, r1
 80038d6:	6439      	str	r1, [r7, #64]	; 0x40
 80038d8:	4629      	mov	r1, r5
 80038da:	eb63 0301 	sbc.w	r3, r3, r1
 80038de:	647b      	str	r3, [r7, #68]	; 0x44
 80038e0:	f04f 0200 	mov.w	r2, #0
 80038e4:	f04f 0300 	mov.w	r3, #0
 80038e8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80038ec:	4649      	mov	r1, r9
 80038ee:	018b      	lsls	r3, r1, #6
 80038f0:	4641      	mov	r1, r8
 80038f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038f6:	4641      	mov	r1, r8
 80038f8:	018a      	lsls	r2, r1, #6
 80038fa:	4641      	mov	r1, r8
 80038fc:	1a51      	subs	r1, r2, r1
 80038fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003900:	4649      	mov	r1, r9
 8003902:	eb63 0301 	sbc.w	r3, r3, r1
 8003906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	f04f 0300 	mov.w	r3, #0
 8003910:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003914:	4649      	mov	r1, r9
 8003916:	00cb      	lsls	r3, r1, #3
 8003918:	4641      	mov	r1, r8
 800391a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800391e:	4641      	mov	r1, r8
 8003920:	00ca      	lsls	r2, r1, #3
 8003922:	4610      	mov	r0, r2
 8003924:	4619      	mov	r1, r3
 8003926:	4603      	mov	r3, r0
 8003928:	4622      	mov	r2, r4
 800392a:	189b      	adds	r3, r3, r2
 800392c:	633b      	str	r3, [r7, #48]	; 0x30
 800392e:	462b      	mov	r3, r5
 8003930:	460a      	mov	r2, r1
 8003932:	eb42 0303 	adc.w	r3, r2, r3
 8003936:	637b      	str	r3, [r7, #52]	; 0x34
 8003938:	f04f 0200 	mov.w	r2, #0
 800393c:	f04f 0300 	mov.w	r3, #0
 8003940:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003944:	4629      	mov	r1, r5
 8003946:	024b      	lsls	r3, r1, #9
 8003948:	4621      	mov	r1, r4
 800394a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800394e:	4621      	mov	r1, r4
 8003950:	024a      	lsls	r2, r1, #9
 8003952:	4610      	mov	r0, r2
 8003954:	4619      	mov	r1, r3
 8003956:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800395a:	2200      	movs	r2, #0
 800395c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003960:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003964:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003968:	f7fd f98e 	bl	8000c88 <__aeabi_uldivmod>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4613      	mov	r3, r2
 8003972:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003976:	e067      	b.n	8003a48 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003978:	4b75      	ldr	r3, [pc, #468]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x354>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	099b      	lsrs	r3, r3, #6
 800397e:	2200      	movs	r2, #0
 8003980:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003984:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003988:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800398c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003990:	67bb      	str	r3, [r7, #120]	; 0x78
 8003992:	2300      	movs	r3, #0
 8003994:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003996:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800399a:	4622      	mov	r2, r4
 800399c:	462b      	mov	r3, r5
 800399e:	f04f 0000 	mov.w	r0, #0
 80039a2:	f04f 0100 	mov.w	r1, #0
 80039a6:	0159      	lsls	r1, r3, #5
 80039a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039ac:	0150      	lsls	r0, r2, #5
 80039ae:	4602      	mov	r2, r0
 80039b0:	460b      	mov	r3, r1
 80039b2:	4621      	mov	r1, r4
 80039b4:	1a51      	subs	r1, r2, r1
 80039b6:	62b9      	str	r1, [r7, #40]	; 0x28
 80039b8:	4629      	mov	r1, r5
 80039ba:	eb63 0301 	sbc.w	r3, r3, r1
 80039be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039c0:	f04f 0200 	mov.w	r2, #0
 80039c4:	f04f 0300 	mov.w	r3, #0
 80039c8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80039cc:	4649      	mov	r1, r9
 80039ce:	018b      	lsls	r3, r1, #6
 80039d0:	4641      	mov	r1, r8
 80039d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039d6:	4641      	mov	r1, r8
 80039d8:	018a      	lsls	r2, r1, #6
 80039da:	4641      	mov	r1, r8
 80039dc:	ebb2 0a01 	subs.w	sl, r2, r1
 80039e0:	4649      	mov	r1, r9
 80039e2:	eb63 0b01 	sbc.w	fp, r3, r1
 80039e6:	f04f 0200 	mov.w	r2, #0
 80039ea:	f04f 0300 	mov.w	r3, #0
 80039ee:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039f2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039fa:	4692      	mov	sl, r2
 80039fc:	469b      	mov	fp, r3
 80039fe:	4623      	mov	r3, r4
 8003a00:	eb1a 0303 	adds.w	r3, sl, r3
 8003a04:	623b      	str	r3, [r7, #32]
 8003a06:	462b      	mov	r3, r5
 8003a08:	eb4b 0303 	adc.w	r3, fp, r3
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a0e:	f04f 0200 	mov.w	r2, #0
 8003a12:	f04f 0300 	mov.w	r3, #0
 8003a16:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003a1a:	4629      	mov	r1, r5
 8003a1c:	028b      	lsls	r3, r1, #10
 8003a1e:	4621      	mov	r1, r4
 8003a20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a24:	4621      	mov	r1, r4
 8003a26:	028a      	lsls	r2, r1, #10
 8003a28:	4610      	mov	r0, r2
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a30:	2200      	movs	r2, #0
 8003a32:	673b      	str	r3, [r7, #112]	; 0x70
 8003a34:	677a      	str	r2, [r7, #116]	; 0x74
 8003a36:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003a3a:	f7fd f925 	bl	8000c88 <__aeabi_uldivmod>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	460b      	mov	r3, r1
 8003a42:	4613      	mov	r3, r2
 8003a44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a48:	4b41      	ldr	r3, [pc, #260]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	0c1b      	lsrs	r3, r3, #16
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	3301      	adds	r3, #1
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003a5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003a6a:	e0eb      	b.n	8003c44 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a6c:	4b38      	ldr	r3, [pc, #224]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a78:	4b35      	ldr	r3, [pc, #212]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d06b      	beq.n	8003b5c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a84:	4b32      	ldr	r3, [pc, #200]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	099b      	lsrs	r3, r3, #6
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a96:	663b      	str	r3, [r7, #96]	; 0x60
 8003a98:	2300      	movs	r3, #0
 8003a9a:	667b      	str	r3, [r7, #100]	; 0x64
 8003a9c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003aa0:	4622      	mov	r2, r4
 8003aa2:	462b      	mov	r3, r5
 8003aa4:	f04f 0000 	mov.w	r0, #0
 8003aa8:	f04f 0100 	mov.w	r1, #0
 8003aac:	0159      	lsls	r1, r3, #5
 8003aae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ab2:	0150      	lsls	r0, r2, #5
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4621      	mov	r1, r4
 8003aba:	1a51      	subs	r1, r2, r1
 8003abc:	61b9      	str	r1, [r7, #24]
 8003abe:	4629      	mov	r1, r5
 8003ac0:	eb63 0301 	sbc.w	r3, r3, r1
 8003ac4:	61fb      	str	r3, [r7, #28]
 8003ac6:	f04f 0200 	mov.w	r2, #0
 8003aca:	f04f 0300 	mov.w	r3, #0
 8003ace:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003ad2:	4659      	mov	r1, fp
 8003ad4:	018b      	lsls	r3, r1, #6
 8003ad6:	4651      	mov	r1, sl
 8003ad8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003adc:	4651      	mov	r1, sl
 8003ade:	018a      	lsls	r2, r1, #6
 8003ae0:	4651      	mov	r1, sl
 8003ae2:	ebb2 0801 	subs.w	r8, r2, r1
 8003ae6:	4659      	mov	r1, fp
 8003ae8:	eb63 0901 	sbc.w	r9, r3, r1
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	f04f 0300 	mov.w	r3, #0
 8003af4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003af8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003afc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b00:	4690      	mov	r8, r2
 8003b02:	4699      	mov	r9, r3
 8003b04:	4623      	mov	r3, r4
 8003b06:	eb18 0303 	adds.w	r3, r8, r3
 8003b0a:	613b      	str	r3, [r7, #16]
 8003b0c:	462b      	mov	r3, r5
 8003b0e:	eb49 0303 	adc.w	r3, r9, r3
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	f04f 0300 	mov.w	r3, #0
 8003b1c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003b20:	4629      	mov	r1, r5
 8003b22:	024b      	lsls	r3, r1, #9
 8003b24:	4621      	mov	r1, r4
 8003b26:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b2a:	4621      	mov	r1, r4
 8003b2c:	024a      	lsls	r2, r1, #9
 8003b2e:	4610      	mov	r0, r2
 8003b30:	4619      	mov	r1, r3
 8003b32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b36:	2200      	movs	r2, #0
 8003b38:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b3a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003b3c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b40:	f7fd f8a2 	bl	8000c88 <__aeabi_uldivmod>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4613      	mov	r3, r2
 8003b4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b4e:	e065      	b.n	8003c1c <HAL_RCC_GetSysClockFreq+0x420>
 8003b50:	40023800 	.word	0x40023800
 8003b54:	00f42400 	.word	0x00f42400
 8003b58:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b5c:	4b3d      	ldr	r3, [pc, #244]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x458>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	099b      	lsrs	r3, r3, #6
 8003b62:	2200      	movs	r2, #0
 8003b64:	4618      	mov	r0, r3
 8003b66:	4611      	mov	r1, r2
 8003b68:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b6c:	653b      	str	r3, [r7, #80]	; 0x50
 8003b6e:	2300      	movs	r3, #0
 8003b70:	657b      	str	r3, [r7, #84]	; 0x54
 8003b72:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003b76:	4642      	mov	r2, r8
 8003b78:	464b      	mov	r3, r9
 8003b7a:	f04f 0000 	mov.w	r0, #0
 8003b7e:	f04f 0100 	mov.w	r1, #0
 8003b82:	0159      	lsls	r1, r3, #5
 8003b84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b88:	0150      	lsls	r0, r2, #5
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4641      	mov	r1, r8
 8003b90:	1a51      	subs	r1, r2, r1
 8003b92:	60b9      	str	r1, [r7, #8]
 8003b94:	4649      	mov	r1, r9
 8003b96:	eb63 0301 	sbc.w	r3, r3, r1
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	f04f 0200 	mov.w	r2, #0
 8003ba0:	f04f 0300 	mov.w	r3, #0
 8003ba4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003ba8:	4659      	mov	r1, fp
 8003baa:	018b      	lsls	r3, r1, #6
 8003bac:	4651      	mov	r1, sl
 8003bae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bb2:	4651      	mov	r1, sl
 8003bb4:	018a      	lsls	r2, r1, #6
 8003bb6:	4651      	mov	r1, sl
 8003bb8:	1a54      	subs	r4, r2, r1
 8003bba:	4659      	mov	r1, fp
 8003bbc:	eb63 0501 	sbc.w	r5, r3, r1
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	00eb      	lsls	r3, r5, #3
 8003bca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bce:	00e2      	lsls	r2, r4, #3
 8003bd0:	4614      	mov	r4, r2
 8003bd2:	461d      	mov	r5, r3
 8003bd4:	4643      	mov	r3, r8
 8003bd6:	18e3      	adds	r3, r4, r3
 8003bd8:	603b      	str	r3, [r7, #0]
 8003bda:	464b      	mov	r3, r9
 8003bdc:	eb45 0303 	adc.w	r3, r5, r3
 8003be0:	607b      	str	r3, [r7, #4]
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	f04f 0300 	mov.w	r3, #0
 8003bea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bee:	4629      	mov	r1, r5
 8003bf0:	028b      	lsls	r3, r1, #10
 8003bf2:	4621      	mov	r1, r4
 8003bf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bf8:	4621      	mov	r1, r4
 8003bfa:	028a      	lsls	r2, r1, #10
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	4619      	mov	r1, r3
 8003c00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c04:	2200      	movs	r2, #0
 8003c06:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c08:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003c0a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c0e:	f7fd f83b 	bl	8000c88 <__aeabi_uldivmod>
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	4613      	mov	r3, r2
 8003c18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003c1c:	4b0d      	ldr	r3, [pc, #52]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x458>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	0f1b      	lsrs	r3, r3, #28
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003c2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c3a:	e003      	b.n	8003c44 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c3c:	4b06      	ldr	r3, [pc, #24]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003c3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c42:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	37b8      	adds	r7, #184	; 0xb8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c52:	bf00      	nop
 8003c54:	40023800 	.word	0x40023800
 8003c58:	00f42400 	.word	0x00f42400

08003c5c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e28d      	b.n	800418a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 8083 	beq.w	8003d82 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003c7c:	4b94      	ldr	r3, [pc, #592]	; (8003ed0 <HAL_RCC_OscConfig+0x274>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 030c 	and.w	r3, r3, #12
 8003c84:	2b04      	cmp	r3, #4
 8003c86:	d019      	beq.n	8003cbc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c88:	4b91      	ldr	r3, [pc, #580]	; (8003ed0 <HAL_RCC_OscConfig+0x274>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d106      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c94:	4b8e      	ldr	r3, [pc, #568]	; (8003ed0 <HAL_RCC_OscConfig+0x274>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ca0:	d00c      	beq.n	8003cbc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ca2:	4b8b      	ldr	r3, [pc, #556]	; (8003ed0 <HAL_RCC_OscConfig+0x274>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003caa:	2b0c      	cmp	r3, #12
 8003cac:	d112      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cae:	4b88      	ldr	r3, [pc, #544]	; (8003ed0 <HAL_RCC_OscConfig+0x274>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cba:	d10b      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cbc:	4b84      	ldr	r3, [pc, #528]	; (8003ed0 <HAL_RCC_OscConfig+0x274>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d05b      	beq.n	8003d80 <HAL_RCC_OscConfig+0x124>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d157      	bne.n	8003d80 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e25a      	b.n	800418a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cdc:	d106      	bne.n	8003cec <HAL_RCC_OscConfig+0x90>
 8003cde:	4b7c      	ldr	r3, [pc, #496]	; (8003ed0 <HAL_RCC_OscConfig+0x274>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a7b      	ldr	r2, [pc, #492]	; (8003ed0 <HAL_RCC_OscConfig+0x274>)
 8003ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce8:	6013      	str	r3, [r2, #0]
 8003cea:	e01d      	b.n	8003d28 <HAL_RCC_OscConfig+0xcc>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cf4:	d10c      	bne.n	8003d10 <HAL_RCC_OscConfig+0xb4>
 8003cf6:	4b76      	ldr	r3, [pc, #472]	; (8003ed0 <HAL_RCC_OscConfig+0x274>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a75      	ldr	r2, [pc, #468]	; (8003ed0 <HAL_RCC_OscConfig+0x274>)
 8003cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d00:	6013      	str	r3, [r2, #0]
 8003d02:	4b73      	ldr	r3, [pc, #460]	; (8003ed0 <HAL_RCC_OscConfig+0x274>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a72      	ldr	r2, [pc, #456]	; (8003ed0 <HAL_RCC_OscConfig+0x274>)
 8003d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d0c:	6013      	str	r3, [r2, #0]
 8003d0e:	e00b      	b.n	8003d28 <HAL_RCC_OscConfig+0xcc>
 8003d10:	4b6f      	ldr	r3, [pc, #444]	; (8003ed0 <HAL_RCC_OscConfig+0x274>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a6e      	ldr	r2, [pc, #440]	; (8003ed0 <HAL_RCC_OscConfig+0x274>)
 8003d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d1a:	6013      	str	r3, [r2, #0]
 8003d1c:	4b6c      	ldr	r3, [pc, #432]	; (8003ed0 <HAL_RCC_OscConfig+0x274>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a6b      	ldr	r2, [pc, #428]	; (8003ed0 <HAL_RCC_OscConfig+0x274>)
 8003d22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d013      	beq.n	8003d58 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d30:	f7fe f95c 	bl	8001fec <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d38:	f7fe f958 	bl	8001fec <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b64      	cmp	r3, #100	; 0x64
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e21f      	b.n	800418a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4a:	4b61      	ldr	r3, [pc, #388]	; (8003ed0 <HAL_RCC_OscConfig+0x274>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0f0      	beq.n	8003d38 <HAL_RCC_OscConfig+0xdc>
 8003d56:	e014      	b.n	8003d82 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d58:	f7fe f948 	bl	8001fec <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d60:	f7fe f944 	bl	8001fec <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b64      	cmp	r3, #100	; 0x64
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e20b      	b.n	800418a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d72:	4b57      	ldr	r3, [pc, #348]	; (8003ed0 <HAL_RCC_OscConfig+0x274>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1f0      	bne.n	8003d60 <HAL_RCC_OscConfig+0x104>
 8003d7e:	e000      	b.n	8003d82 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d06f      	beq.n	8003e6e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003d8e:	4b50      	ldr	r3, [pc, #320]	; (8003ed0 <HAL_RCC_OscConfig+0x274>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f003 030c 	and.w	r3, r3, #12
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d017      	beq.n	8003dca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d9a:	4b4d      	ldr	r3, [pc, #308]	; (8003ed0 <HAL_RCC_OscConfig+0x274>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d105      	bne.n	8003db2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003da6:	4b4a      	ldr	r3, [pc, #296]	; (8003ed0 <HAL_RCC_OscConfig+0x274>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00b      	beq.n	8003dca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003db2:	4b47      	ldr	r3, [pc, #284]	; (8003ed0 <HAL_RCC_OscConfig+0x274>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003dba:	2b0c      	cmp	r3, #12
 8003dbc:	d11c      	bne.n	8003df8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dbe:	4b44      	ldr	r3, [pc, #272]	; (8003ed0 <HAL_RCC_OscConfig+0x274>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d116      	bne.n	8003df8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dca:	4b41      	ldr	r3, [pc, #260]	; (8003ed0 <HAL_RCC_OscConfig+0x274>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d005      	beq.n	8003de2 <HAL_RCC_OscConfig+0x186>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d001      	beq.n	8003de2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e1d3      	b.n	800418a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de2:	4b3b      	ldr	r3, [pc, #236]	; (8003ed0 <HAL_RCC_OscConfig+0x274>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	4937      	ldr	r1, [pc, #220]	; (8003ed0 <HAL_RCC_OscConfig+0x274>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003df6:	e03a      	b.n	8003e6e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d020      	beq.n	8003e42 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e00:	4b34      	ldr	r3, [pc, #208]	; (8003ed4 <HAL_RCC_OscConfig+0x278>)
 8003e02:	2201      	movs	r2, #1
 8003e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e06:	f7fe f8f1 	bl	8001fec <HAL_GetTick>
 8003e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e0c:	e008      	b.n	8003e20 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e0e:	f7fe f8ed 	bl	8001fec <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e1b4      	b.n	800418a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e20:	4b2b      	ldr	r3, [pc, #172]	; (8003ed0 <HAL_RCC_OscConfig+0x274>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d0f0      	beq.n	8003e0e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e2c:	4b28      	ldr	r3, [pc, #160]	; (8003ed0 <HAL_RCC_OscConfig+0x274>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	4925      	ldr	r1, [pc, #148]	; (8003ed0 <HAL_RCC_OscConfig+0x274>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	600b      	str	r3, [r1, #0]
 8003e40:	e015      	b.n	8003e6e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e42:	4b24      	ldr	r3, [pc, #144]	; (8003ed4 <HAL_RCC_OscConfig+0x278>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e48:	f7fe f8d0 	bl	8001fec <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e50:	f7fe f8cc 	bl	8001fec <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e193      	b.n	800418a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e62:	4b1b      	ldr	r3, [pc, #108]	; (8003ed0 <HAL_RCC_OscConfig+0x274>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1f0      	bne.n	8003e50 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0308 	and.w	r3, r3, #8
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d036      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d016      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e82:	4b15      	ldr	r3, [pc, #84]	; (8003ed8 <HAL_RCC_OscConfig+0x27c>)
 8003e84:	2201      	movs	r2, #1
 8003e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e88:	f7fe f8b0 	bl	8001fec <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e90:	f7fe f8ac 	bl	8001fec <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e173      	b.n	800418a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ea2:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <HAL_RCC_OscConfig+0x274>)
 8003ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0f0      	beq.n	8003e90 <HAL_RCC_OscConfig+0x234>
 8003eae:	e01b      	b.n	8003ee8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eb0:	4b09      	ldr	r3, [pc, #36]	; (8003ed8 <HAL_RCC_OscConfig+0x27c>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb6:	f7fe f899 	bl	8001fec <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ebc:	e00e      	b.n	8003edc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ebe:	f7fe f895 	bl	8001fec <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d907      	bls.n	8003edc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e15c      	b.n	800418a <HAL_RCC_OscConfig+0x52e>
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	42470000 	.word	0x42470000
 8003ed8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003edc:	4b8a      	ldr	r3, [pc, #552]	; (8004108 <HAL_RCC_OscConfig+0x4ac>)
 8003ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1ea      	bne.n	8003ebe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 8097 	beq.w	8004024 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003efa:	4b83      	ldr	r3, [pc, #524]	; (8004108 <HAL_RCC_OscConfig+0x4ac>)
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10f      	bne.n	8003f26 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f06:	2300      	movs	r3, #0
 8003f08:	60bb      	str	r3, [r7, #8]
 8003f0a:	4b7f      	ldr	r3, [pc, #508]	; (8004108 <HAL_RCC_OscConfig+0x4ac>)
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	4a7e      	ldr	r2, [pc, #504]	; (8004108 <HAL_RCC_OscConfig+0x4ac>)
 8003f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f14:	6413      	str	r3, [r2, #64]	; 0x40
 8003f16:	4b7c      	ldr	r3, [pc, #496]	; (8004108 <HAL_RCC_OscConfig+0x4ac>)
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1e:	60bb      	str	r3, [r7, #8]
 8003f20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f22:	2301      	movs	r3, #1
 8003f24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f26:	4b79      	ldr	r3, [pc, #484]	; (800410c <HAL_RCC_OscConfig+0x4b0>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d118      	bne.n	8003f64 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f32:	4b76      	ldr	r3, [pc, #472]	; (800410c <HAL_RCC_OscConfig+0x4b0>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a75      	ldr	r2, [pc, #468]	; (800410c <HAL_RCC_OscConfig+0x4b0>)
 8003f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f3e:	f7fe f855 	bl	8001fec <HAL_GetTick>
 8003f42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f44:	e008      	b.n	8003f58 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f46:	f7fe f851 	bl	8001fec <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e118      	b.n	800418a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f58:	4b6c      	ldr	r3, [pc, #432]	; (800410c <HAL_RCC_OscConfig+0x4b0>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0f0      	beq.n	8003f46 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d106      	bne.n	8003f7a <HAL_RCC_OscConfig+0x31e>
 8003f6c:	4b66      	ldr	r3, [pc, #408]	; (8004108 <HAL_RCC_OscConfig+0x4ac>)
 8003f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f70:	4a65      	ldr	r2, [pc, #404]	; (8004108 <HAL_RCC_OscConfig+0x4ac>)
 8003f72:	f043 0301 	orr.w	r3, r3, #1
 8003f76:	6713      	str	r3, [r2, #112]	; 0x70
 8003f78:	e01c      	b.n	8003fb4 <HAL_RCC_OscConfig+0x358>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	2b05      	cmp	r3, #5
 8003f80:	d10c      	bne.n	8003f9c <HAL_RCC_OscConfig+0x340>
 8003f82:	4b61      	ldr	r3, [pc, #388]	; (8004108 <HAL_RCC_OscConfig+0x4ac>)
 8003f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f86:	4a60      	ldr	r2, [pc, #384]	; (8004108 <HAL_RCC_OscConfig+0x4ac>)
 8003f88:	f043 0304 	orr.w	r3, r3, #4
 8003f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f8e:	4b5e      	ldr	r3, [pc, #376]	; (8004108 <HAL_RCC_OscConfig+0x4ac>)
 8003f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f92:	4a5d      	ldr	r2, [pc, #372]	; (8004108 <HAL_RCC_OscConfig+0x4ac>)
 8003f94:	f043 0301 	orr.w	r3, r3, #1
 8003f98:	6713      	str	r3, [r2, #112]	; 0x70
 8003f9a:	e00b      	b.n	8003fb4 <HAL_RCC_OscConfig+0x358>
 8003f9c:	4b5a      	ldr	r3, [pc, #360]	; (8004108 <HAL_RCC_OscConfig+0x4ac>)
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa0:	4a59      	ldr	r2, [pc, #356]	; (8004108 <HAL_RCC_OscConfig+0x4ac>)
 8003fa2:	f023 0301 	bic.w	r3, r3, #1
 8003fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa8:	4b57      	ldr	r3, [pc, #348]	; (8004108 <HAL_RCC_OscConfig+0x4ac>)
 8003faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fac:	4a56      	ldr	r2, [pc, #344]	; (8004108 <HAL_RCC_OscConfig+0x4ac>)
 8003fae:	f023 0304 	bic.w	r3, r3, #4
 8003fb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d015      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fbc:	f7fe f816 	bl	8001fec <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc2:	e00a      	b.n	8003fda <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fc4:	f7fe f812 	bl	8001fec <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e0d7      	b.n	800418a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fda:	4b4b      	ldr	r3, [pc, #300]	; (8004108 <HAL_RCC_OscConfig+0x4ac>)
 8003fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0ee      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x368>
 8003fe6:	e014      	b.n	8004012 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe8:	f7fe f800 	bl	8001fec <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fee:	e00a      	b.n	8004006 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ff0:	f7fd fffc 	bl	8001fec <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e0c1      	b.n	800418a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004006:	4b40      	ldr	r3, [pc, #256]	; (8004108 <HAL_RCC_OscConfig+0x4ac>)
 8004008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1ee      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004012:	7dfb      	ldrb	r3, [r7, #23]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d105      	bne.n	8004024 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004018:	4b3b      	ldr	r3, [pc, #236]	; (8004108 <HAL_RCC_OscConfig+0x4ac>)
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	4a3a      	ldr	r2, [pc, #232]	; (8004108 <HAL_RCC_OscConfig+0x4ac>)
 800401e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004022:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 80ad 	beq.w	8004188 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800402e:	4b36      	ldr	r3, [pc, #216]	; (8004108 <HAL_RCC_OscConfig+0x4ac>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f003 030c 	and.w	r3, r3, #12
 8004036:	2b08      	cmp	r3, #8
 8004038:	d060      	beq.n	80040fc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	2b02      	cmp	r3, #2
 8004040:	d145      	bne.n	80040ce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004042:	4b33      	ldr	r3, [pc, #204]	; (8004110 <HAL_RCC_OscConfig+0x4b4>)
 8004044:	2200      	movs	r2, #0
 8004046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004048:	f7fd ffd0 	bl	8001fec <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004050:	f7fd ffcc 	bl	8001fec <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e093      	b.n	800418a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004062:	4b29      	ldr	r3, [pc, #164]	; (8004108 <HAL_RCC_OscConfig+0x4ac>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1f0      	bne.n	8004050 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69da      	ldr	r2, [r3, #28]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	019b      	lsls	r3, r3, #6
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004084:	085b      	lsrs	r3, r3, #1
 8004086:	3b01      	subs	r3, #1
 8004088:	041b      	lsls	r3, r3, #16
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	061b      	lsls	r3, r3, #24
 8004092:	431a      	orrs	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004098:	071b      	lsls	r3, r3, #28
 800409a:	491b      	ldr	r1, [pc, #108]	; (8004108 <HAL_RCC_OscConfig+0x4ac>)
 800409c:	4313      	orrs	r3, r2
 800409e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040a0:	4b1b      	ldr	r3, [pc, #108]	; (8004110 <HAL_RCC_OscConfig+0x4b4>)
 80040a2:	2201      	movs	r2, #1
 80040a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a6:	f7fd ffa1 	bl	8001fec <HAL_GetTick>
 80040aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ac:	e008      	b.n	80040c0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ae:	f7fd ff9d 	bl	8001fec <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e064      	b.n	800418a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c0:	4b11      	ldr	r3, [pc, #68]	; (8004108 <HAL_RCC_OscConfig+0x4ac>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d0f0      	beq.n	80040ae <HAL_RCC_OscConfig+0x452>
 80040cc:	e05c      	b.n	8004188 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ce:	4b10      	ldr	r3, [pc, #64]	; (8004110 <HAL_RCC_OscConfig+0x4b4>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d4:	f7fd ff8a 	bl	8001fec <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040dc:	f7fd ff86 	bl	8001fec <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e04d      	b.n	800418a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ee:	4b06      	ldr	r3, [pc, #24]	; (8004108 <HAL_RCC_OscConfig+0x4ac>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1f0      	bne.n	80040dc <HAL_RCC_OscConfig+0x480>
 80040fa:	e045      	b.n	8004188 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d107      	bne.n	8004114 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e040      	b.n	800418a <HAL_RCC_OscConfig+0x52e>
 8004108:	40023800 	.word	0x40023800
 800410c:	40007000 	.word	0x40007000
 8004110:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004114:	4b1f      	ldr	r3, [pc, #124]	; (8004194 <HAL_RCC_OscConfig+0x538>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d030      	beq.n	8004184 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800412c:	429a      	cmp	r2, r3
 800412e:	d129      	bne.n	8004184 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800413a:	429a      	cmp	r2, r3
 800413c:	d122      	bne.n	8004184 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004144:	4013      	ands	r3, r2
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800414a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800414c:	4293      	cmp	r3, r2
 800414e:	d119      	bne.n	8004184 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415a:	085b      	lsrs	r3, r3, #1
 800415c:	3b01      	subs	r3, #1
 800415e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004160:	429a      	cmp	r2, r3
 8004162:	d10f      	bne.n	8004184 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004170:	429a      	cmp	r2, r3
 8004172:	d107      	bne.n	8004184 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004180:	429a      	cmp	r2, r3
 8004182:	d001      	beq.n	8004188 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e000      	b.n	800418a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	40023800 	.word	0x40023800

08004198 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e03f      	b.n	800422a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d106      	bne.n	80041c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7fd fe3c 	bl	8001e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2224      	movs	r2, #36	; 0x24
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f929 	bl	8004434 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	695a      	ldr	r2, [r3, #20]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004200:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68da      	ldr	r2, [r3, #12]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004210:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2220      	movs	r2, #32
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2220      	movs	r2, #32
 8004224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b08a      	sub	sp, #40	; 0x28
 8004236:	af02      	add	r7, sp, #8
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	60b9      	str	r1, [r7, #8]
 800423c:	603b      	str	r3, [r7, #0]
 800423e:	4613      	mov	r3, r2
 8004240:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004242:	2300      	movs	r3, #0
 8004244:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b20      	cmp	r3, #32
 8004250:	d17c      	bne.n	800434c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <HAL_UART_Transmit+0x2c>
 8004258:	88fb      	ldrh	r3, [r7, #6]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e075      	b.n	800434e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004268:	2b01      	cmp	r3, #1
 800426a:	d101      	bne.n	8004270 <HAL_UART_Transmit+0x3e>
 800426c:	2302      	movs	r3, #2
 800426e:	e06e      	b.n	800434e <HAL_UART_Transmit+0x11c>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2221      	movs	r2, #33	; 0x21
 8004282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004286:	f7fd feb1 	bl	8001fec <HAL_GetTick>
 800428a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	88fa      	ldrh	r2, [r7, #6]
 8004290:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	88fa      	ldrh	r2, [r7, #6]
 8004296:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042a0:	d108      	bne.n	80042b4 <HAL_UART_Transmit+0x82>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d104      	bne.n	80042b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80042aa:	2300      	movs	r3, #0
 80042ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	61bb      	str	r3, [r7, #24]
 80042b2:	e003      	b.n	80042bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042b8:	2300      	movs	r3, #0
 80042ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80042c4:	e02a      	b.n	800431c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2200      	movs	r2, #0
 80042ce:	2180      	movs	r1, #128	; 0x80
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 f840 	bl	8004356 <UART_WaitOnFlagUntilTimeout>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e036      	b.n	800434e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10b      	bne.n	80042fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	881b      	ldrh	r3, [r3, #0]
 80042ea:	461a      	mov	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	3302      	adds	r3, #2
 80042fa:	61bb      	str	r3, [r7, #24]
 80042fc:	e007      	b.n	800430e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	781a      	ldrb	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	3301      	adds	r3, #1
 800430c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004312:	b29b      	uxth	r3, r3
 8004314:	3b01      	subs	r3, #1
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1cf      	bne.n	80042c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2200      	movs	r2, #0
 800432e:	2140      	movs	r1, #64	; 0x40
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 f810 	bl	8004356 <UART_WaitOnFlagUntilTimeout>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e006      	b.n	800434e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2220      	movs	r2, #32
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004348:	2300      	movs	r3, #0
 800434a:	e000      	b.n	800434e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800434c:	2302      	movs	r3, #2
  }
}
 800434e:	4618      	mov	r0, r3
 8004350:	3720      	adds	r7, #32
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b090      	sub	sp, #64	; 0x40
 800435a:	af00      	add	r7, sp, #0
 800435c:	60f8      	str	r0, [r7, #12]
 800435e:	60b9      	str	r1, [r7, #8]
 8004360:	603b      	str	r3, [r7, #0]
 8004362:	4613      	mov	r3, r2
 8004364:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004366:	e050      	b.n	800440a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800436a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436e:	d04c      	beq.n	800440a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004372:	2b00      	cmp	r3, #0
 8004374:	d007      	beq.n	8004386 <UART_WaitOnFlagUntilTimeout+0x30>
 8004376:	f7fd fe39 	bl	8001fec <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004382:	429a      	cmp	r2, r3
 8004384:	d241      	bcs.n	800440a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	330c      	adds	r3, #12
 800438c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004390:	e853 3f00 	ldrex	r3, [r3]
 8004394:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004398:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800439c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	330c      	adds	r3, #12
 80043a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043a6:	637a      	str	r2, [r7, #52]	; 0x34
 80043a8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043ae:	e841 2300 	strex	r3, r2, [r1]
 80043b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1e5      	bne.n	8004386 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	3314      	adds	r3, #20
 80043c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	e853 3f00 	ldrex	r3, [r3]
 80043c8:	613b      	str	r3, [r7, #16]
   return(result);
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	f023 0301 	bic.w	r3, r3, #1
 80043d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	3314      	adds	r3, #20
 80043d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043da:	623a      	str	r2, [r7, #32]
 80043dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043de:	69f9      	ldr	r1, [r7, #28]
 80043e0:	6a3a      	ldr	r2, [r7, #32]
 80043e2:	e841 2300 	strex	r3, r2, [r1]
 80043e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1e5      	bne.n	80043ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2220      	movs	r2, #32
 80043f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e00f      	b.n	800442a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	4013      	ands	r3, r2
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	429a      	cmp	r2, r3
 8004418:	bf0c      	ite	eq
 800441a:	2301      	moveq	r3, #1
 800441c:	2300      	movne	r3, #0
 800441e:	b2db      	uxtb	r3, r3
 8004420:	461a      	mov	r2, r3
 8004422:	79fb      	ldrb	r3, [r7, #7]
 8004424:	429a      	cmp	r2, r3
 8004426:	d09f      	beq.n	8004368 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3740      	adds	r7, #64	; 0x40
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
	...

08004434 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004438:	b0c0      	sub	sp, #256	; 0x100
 800443a:	af00      	add	r7, sp, #0
 800443c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800444c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004450:	68d9      	ldr	r1, [r3, #12]
 8004452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	ea40 0301 	orr.w	r3, r0, r1
 800445c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800445e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	431a      	orrs	r2, r3
 800446c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	431a      	orrs	r2, r3
 8004474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	4313      	orrs	r3, r2
 800447c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800448c:	f021 010c 	bic.w	r1, r1, #12
 8004490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800449a:	430b      	orrs	r3, r1
 800449c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800449e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80044aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ae:	6999      	ldr	r1, [r3, #24]
 80044b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	ea40 0301 	orr.w	r3, r0, r1
 80044ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	4b8f      	ldr	r3, [pc, #572]	; (8004700 <UART_SetConfig+0x2cc>)
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d005      	beq.n	80044d4 <UART_SetConfig+0xa0>
 80044c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	4b8d      	ldr	r3, [pc, #564]	; (8004704 <UART_SetConfig+0x2d0>)
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d104      	bne.n	80044de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044d4:	f7ff f97e 	bl	80037d4 <HAL_RCC_GetPCLK2Freq>
 80044d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80044dc:	e003      	b.n	80044e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044de:	f7ff f965 	bl	80037ac <HAL_RCC_GetPCLK1Freq>
 80044e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ea:	69db      	ldr	r3, [r3, #28]
 80044ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044f0:	f040 810c 	bne.w	800470c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044f8:	2200      	movs	r2, #0
 80044fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004502:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004506:	4622      	mov	r2, r4
 8004508:	462b      	mov	r3, r5
 800450a:	1891      	adds	r1, r2, r2
 800450c:	65b9      	str	r1, [r7, #88]	; 0x58
 800450e:	415b      	adcs	r3, r3
 8004510:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004512:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004516:	4621      	mov	r1, r4
 8004518:	eb12 0801 	adds.w	r8, r2, r1
 800451c:	4629      	mov	r1, r5
 800451e:	eb43 0901 	adc.w	r9, r3, r1
 8004522:	f04f 0200 	mov.w	r2, #0
 8004526:	f04f 0300 	mov.w	r3, #0
 800452a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800452e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004532:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004536:	4690      	mov	r8, r2
 8004538:	4699      	mov	r9, r3
 800453a:	4623      	mov	r3, r4
 800453c:	eb18 0303 	adds.w	r3, r8, r3
 8004540:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004544:	462b      	mov	r3, r5
 8004546:	eb49 0303 	adc.w	r3, r9, r3
 800454a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800454e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800455a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800455e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004562:	460b      	mov	r3, r1
 8004564:	18db      	adds	r3, r3, r3
 8004566:	653b      	str	r3, [r7, #80]	; 0x50
 8004568:	4613      	mov	r3, r2
 800456a:	eb42 0303 	adc.w	r3, r2, r3
 800456e:	657b      	str	r3, [r7, #84]	; 0x54
 8004570:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004574:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004578:	f7fc fb86 	bl	8000c88 <__aeabi_uldivmod>
 800457c:	4602      	mov	r2, r0
 800457e:	460b      	mov	r3, r1
 8004580:	4b61      	ldr	r3, [pc, #388]	; (8004708 <UART_SetConfig+0x2d4>)
 8004582:	fba3 2302 	umull	r2, r3, r3, r2
 8004586:	095b      	lsrs	r3, r3, #5
 8004588:	011c      	lsls	r4, r3, #4
 800458a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800458e:	2200      	movs	r2, #0
 8004590:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004594:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004598:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800459c:	4642      	mov	r2, r8
 800459e:	464b      	mov	r3, r9
 80045a0:	1891      	adds	r1, r2, r2
 80045a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80045a4:	415b      	adcs	r3, r3
 80045a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80045ac:	4641      	mov	r1, r8
 80045ae:	eb12 0a01 	adds.w	sl, r2, r1
 80045b2:	4649      	mov	r1, r9
 80045b4:	eb43 0b01 	adc.w	fp, r3, r1
 80045b8:	f04f 0200 	mov.w	r2, #0
 80045bc:	f04f 0300 	mov.w	r3, #0
 80045c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80045c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80045c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045cc:	4692      	mov	sl, r2
 80045ce:	469b      	mov	fp, r3
 80045d0:	4643      	mov	r3, r8
 80045d2:	eb1a 0303 	adds.w	r3, sl, r3
 80045d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045da:	464b      	mov	r3, r9
 80045dc:	eb4b 0303 	adc.w	r3, fp, r3
 80045e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80045e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80045f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80045f8:	460b      	mov	r3, r1
 80045fa:	18db      	adds	r3, r3, r3
 80045fc:	643b      	str	r3, [r7, #64]	; 0x40
 80045fe:	4613      	mov	r3, r2
 8004600:	eb42 0303 	adc.w	r3, r2, r3
 8004604:	647b      	str	r3, [r7, #68]	; 0x44
 8004606:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800460a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800460e:	f7fc fb3b 	bl	8000c88 <__aeabi_uldivmod>
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
 8004616:	4611      	mov	r1, r2
 8004618:	4b3b      	ldr	r3, [pc, #236]	; (8004708 <UART_SetConfig+0x2d4>)
 800461a:	fba3 2301 	umull	r2, r3, r3, r1
 800461e:	095b      	lsrs	r3, r3, #5
 8004620:	2264      	movs	r2, #100	; 0x64
 8004622:	fb02 f303 	mul.w	r3, r2, r3
 8004626:	1acb      	subs	r3, r1, r3
 8004628:	00db      	lsls	r3, r3, #3
 800462a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800462e:	4b36      	ldr	r3, [pc, #216]	; (8004708 <UART_SetConfig+0x2d4>)
 8004630:	fba3 2302 	umull	r2, r3, r3, r2
 8004634:	095b      	lsrs	r3, r3, #5
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800463c:	441c      	add	r4, r3
 800463e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004642:	2200      	movs	r2, #0
 8004644:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004648:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800464c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004650:	4642      	mov	r2, r8
 8004652:	464b      	mov	r3, r9
 8004654:	1891      	adds	r1, r2, r2
 8004656:	63b9      	str	r1, [r7, #56]	; 0x38
 8004658:	415b      	adcs	r3, r3
 800465a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800465c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004660:	4641      	mov	r1, r8
 8004662:	1851      	adds	r1, r2, r1
 8004664:	6339      	str	r1, [r7, #48]	; 0x30
 8004666:	4649      	mov	r1, r9
 8004668:	414b      	adcs	r3, r1
 800466a:	637b      	str	r3, [r7, #52]	; 0x34
 800466c:	f04f 0200 	mov.w	r2, #0
 8004670:	f04f 0300 	mov.w	r3, #0
 8004674:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004678:	4659      	mov	r1, fp
 800467a:	00cb      	lsls	r3, r1, #3
 800467c:	4651      	mov	r1, sl
 800467e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004682:	4651      	mov	r1, sl
 8004684:	00ca      	lsls	r2, r1, #3
 8004686:	4610      	mov	r0, r2
 8004688:	4619      	mov	r1, r3
 800468a:	4603      	mov	r3, r0
 800468c:	4642      	mov	r2, r8
 800468e:	189b      	adds	r3, r3, r2
 8004690:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004694:	464b      	mov	r3, r9
 8004696:	460a      	mov	r2, r1
 8004698:	eb42 0303 	adc.w	r3, r2, r3
 800469c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80046ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80046b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80046b4:	460b      	mov	r3, r1
 80046b6:	18db      	adds	r3, r3, r3
 80046b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80046ba:	4613      	mov	r3, r2
 80046bc:	eb42 0303 	adc.w	r3, r2, r3
 80046c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80046ca:	f7fc fadd 	bl	8000c88 <__aeabi_uldivmod>
 80046ce:	4602      	mov	r2, r0
 80046d0:	460b      	mov	r3, r1
 80046d2:	4b0d      	ldr	r3, [pc, #52]	; (8004708 <UART_SetConfig+0x2d4>)
 80046d4:	fba3 1302 	umull	r1, r3, r3, r2
 80046d8:	095b      	lsrs	r3, r3, #5
 80046da:	2164      	movs	r1, #100	; 0x64
 80046dc:	fb01 f303 	mul.w	r3, r1, r3
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	3332      	adds	r3, #50	; 0x32
 80046e6:	4a08      	ldr	r2, [pc, #32]	; (8004708 <UART_SetConfig+0x2d4>)
 80046e8:	fba2 2303 	umull	r2, r3, r2, r3
 80046ec:	095b      	lsrs	r3, r3, #5
 80046ee:	f003 0207 	and.w	r2, r3, #7
 80046f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4422      	add	r2, r4
 80046fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046fc:	e105      	b.n	800490a <UART_SetConfig+0x4d6>
 80046fe:	bf00      	nop
 8004700:	40011000 	.word	0x40011000
 8004704:	40011400 	.word	0x40011400
 8004708:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800470c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004710:	2200      	movs	r2, #0
 8004712:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004716:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800471a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800471e:	4642      	mov	r2, r8
 8004720:	464b      	mov	r3, r9
 8004722:	1891      	adds	r1, r2, r2
 8004724:	6239      	str	r1, [r7, #32]
 8004726:	415b      	adcs	r3, r3
 8004728:	627b      	str	r3, [r7, #36]	; 0x24
 800472a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800472e:	4641      	mov	r1, r8
 8004730:	1854      	adds	r4, r2, r1
 8004732:	4649      	mov	r1, r9
 8004734:	eb43 0501 	adc.w	r5, r3, r1
 8004738:	f04f 0200 	mov.w	r2, #0
 800473c:	f04f 0300 	mov.w	r3, #0
 8004740:	00eb      	lsls	r3, r5, #3
 8004742:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004746:	00e2      	lsls	r2, r4, #3
 8004748:	4614      	mov	r4, r2
 800474a:	461d      	mov	r5, r3
 800474c:	4643      	mov	r3, r8
 800474e:	18e3      	adds	r3, r4, r3
 8004750:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004754:	464b      	mov	r3, r9
 8004756:	eb45 0303 	adc.w	r3, r5, r3
 800475a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800475e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800476a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800476e:	f04f 0200 	mov.w	r2, #0
 8004772:	f04f 0300 	mov.w	r3, #0
 8004776:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800477a:	4629      	mov	r1, r5
 800477c:	008b      	lsls	r3, r1, #2
 800477e:	4621      	mov	r1, r4
 8004780:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004784:	4621      	mov	r1, r4
 8004786:	008a      	lsls	r2, r1, #2
 8004788:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800478c:	f7fc fa7c 	bl	8000c88 <__aeabi_uldivmod>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	4b60      	ldr	r3, [pc, #384]	; (8004918 <UART_SetConfig+0x4e4>)
 8004796:	fba3 2302 	umull	r2, r3, r3, r2
 800479a:	095b      	lsrs	r3, r3, #5
 800479c:	011c      	lsls	r4, r3, #4
 800479e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047a2:	2200      	movs	r2, #0
 80047a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80047a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80047ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80047b0:	4642      	mov	r2, r8
 80047b2:	464b      	mov	r3, r9
 80047b4:	1891      	adds	r1, r2, r2
 80047b6:	61b9      	str	r1, [r7, #24]
 80047b8:	415b      	adcs	r3, r3
 80047ba:	61fb      	str	r3, [r7, #28]
 80047bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047c0:	4641      	mov	r1, r8
 80047c2:	1851      	adds	r1, r2, r1
 80047c4:	6139      	str	r1, [r7, #16]
 80047c6:	4649      	mov	r1, r9
 80047c8:	414b      	adcs	r3, r1
 80047ca:	617b      	str	r3, [r7, #20]
 80047cc:	f04f 0200 	mov.w	r2, #0
 80047d0:	f04f 0300 	mov.w	r3, #0
 80047d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047d8:	4659      	mov	r1, fp
 80047da:	00cb      	lsls	r3, r1, #3
 80047dc:	4651      	mov	r1, sl
 80047de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047e2:	4651      	mov	r1, sl
 80047e4:	00ca      	lsls	r2, r1, #3
 80047e6:	4610      	mov	r0, r2
 80047e8:	4619      	mov	r1, r3
 80047ea:	4603      	mov	r3, r0
 80047ec:	4642      	mov	r2, r8
 80047ee:	189b      	adds	r3, r3, r2
 80047f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047f4:	464b      	mov	r3, r9
 80047f6:	460a      	mov	r2, r1
 80047f8:	eb42 0303 	adc.w	r3, r2, r3
 80047fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	67bb      	str	r3, [r7, #120]	; 0x78
 800480a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800480c:	f04f 0200 	mov.w	r2, #0
 8004810:	f04f 0300 	mov.w	r3, #0
 8004814:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004818:	4649      	mov	r1, r9
 800481a:	008b      	lsls	r3, r1, #2
 800481c:	4641      	mov	r1, r8
 800481e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004822:	4641      	mov	r1, r8
 8004824:	008a      	lsls	r2, r1, #2
 8004826:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800482a:	f7fc fa2d 	bl	8000c88 <__aeabi_uldivmod>
 800482e:	4602      	mov	r2, r0
 8004830:	460b      	mov	r3, r1
 8004832:	4b39      	ldr	r3, [pc, #228]	; (8004918 <UART_SetConfig+0x4e4>)
 8004834:	fba3 1302 	umull	r1, r3, r3, r2
 8004838:	095b      	lsrs	r3, r3, #5
 800483a:	2164      	movs	r1, #100	; 0x64
 800483c:	fb01 f303 	mul.w	r3, r1, r3
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	011b      	lsls	r3, r3, #4
 8004844:	3332      	adds	r3, #50	; 0x32
 8004846:	4a34      	ldr	r2, [pc, #208]	; (8004918 <UART_SetConfig+0x4e4>)
 8004848:	fba2 2303 	umull	r2, r3, r2, r3
 800484c:	095b      	lsrs	r3, r3, #5
 800484e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004852:	441c      	add	r4, r3
 8004854:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004858:	2200      	movs	r2, #0
 800485a:	673b      	str	r3, [r7, #112]	; 0x70
 800485c:	677a      	str	r2, [r7, #116]	; 0x74
 800485e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004862:	4642      	mov	r2, r8
 8004864:	464b      	mov	r3, r9
 8004866:	1891      	adds	r1, r2, r2
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	415b      	adcs	r3, r3
 800486c:	60fb      	str	r3, [r7, #12]
 800486e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004872:	4641      	mov	r1, r8
 8004874:	1851      	adds	r1, r2, r1
 8004876:	6039      	str	r1, [r7, #0]
 8004878:	4649      	mov	r1, r9
 800487a:	414b      	adcs	r3, r1
 800487c:	607b      	str	r3, [r7, #4]
 800487e:	f04f 0200 	mov.w	r2, #0
 8004882:	f04f 0300 	mov.w	r3, #0
 8004886:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800488a:	4659      	mov	r1, fp
 800488c:	00cb      	lsls	r3, r1, #3
 800488e:	4651      	mov	r1, sl
 8004890:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004894:	4651      	mov	r1, sl
 8004896:	00ca      	lsls	r2, r1, #3
 8004898:	4610      	mov	r0, r2
 800489a:	4619      	mov	r1, r3
 800489c:	4603      	mov	r3, r0
 800489e:	4642      	mov	r2, r8
 80048a0:	189b      	adds	r3, r3, r2
 80048a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80048a4:	464b      	mov	r3, r9
 80048a6:	460a      	mov	r2, r1
 80048a8:	eb42 0303 	adc.w	r3, r2, r3
 80048ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	663b      	str	r3, [r7, #96]	; 0x60
 80048b8:	667a      	str	r2, [r7, #100]	; 0x64
 80048ba:	f04f 0200 	mov.w	r2, #0
 80048be:	f04f 0300 	mov.w	r3, #0
 80048c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80048c6:	4649      	mov	r1, r9
 80048c8:	008b      	lsls	r3, r1, #2
 80048ca:	4641      	mov	r1, r8
 80048cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048d0:	4641      	mov	r1, r8
 80048d2:	008a      	lsls	r2, r1, #2
 80048d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80048d8:	f7fc f9d6 	bl	8000c88 <__aeabi_uldivmod>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4b0d      	ldr	r3, [pc, #52]	; (8004918 <UART_SetConfig+0x4e4>)
 80048e2:	fba3 1302 	umull	r1, r3, r3, r2
 80048e6:	095b      	lsrs	r3, r3, #5
 80048e8:	2164      	movs	r1, #100	; 0x64
 80048ea:	fb01 f303 	mul.w	r3, r1, r3
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	3332      	adds	r3, #50	; 0x32
 80048f4:	4a08      	ldr	r2, [pc, #32]	; (8004918 <UART_SetConfig+0x4e4>)
 80048f6:	fba2 2303 	umull	r2, r3, r2, r3
 80048fa:	095b      	lsrs	r3, r3, #5
 80048fc:	f003 020f 	and.w	r2, r3, #15
 8004900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4422      	add	r2, r4
 8004908:	609a      	str	r2, [r3, #8]
}
 800490a:	bf00      	nop
 800490c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004910:	46bd      	mov	sp, r7
 8004912:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004916:	bf00      	nop
 8004918:	51eb851f 	.word	0x51eb851f

0800491c <__errno>:
 800491c:	4b01      	ldr	r3, [pc, #4]	; (8004924 <__errno+0x8>)
 800491e:	6818      	ldr	r0, [r3, #0]
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	200000b4 	.word	0x200000b4

08004928 <__libc_init_array>:
 8004928:	b570      	push	{r4, r5, r6, lr}
 800492a:	4d0d      	ldr	r5, [pc, #52]	; (8004960 <__libc_init_array+0x38>)
 800492c:	4c0d      	ldr	r4, [pc, #52]	; (8004964 <__libc_init_array+0x3c>)
 800492e:	1b64      	subs	r4, r4, r5
 8004930:	10a4      	asrs	r4, r4, #2
 8004932:	2600      	movs	r6, #0
 8004934:	42a6      	cmp	r6, r4
 8004936:	d109      	bne.n	800494c <__libc_init_array+0x24>
 8004938:	4d0b      	ldr	r5, [pc, #44]	; (8004968 <__libc_init_array+0x40>)
 800493a:	4c0c      	ldr	r4, [pc, #48]	; (800496c <__libc_init_array+0x44>)
 800493c:	f003 f8a4 	bl	8007a88 <_init>
 8004940:	1b64      	subs	r4, r4, r5
 8004942:	10a4      	asrs	r4, r4, #2
 8004944:	2600      	movs	r6, #0
 8004946:	42a6      	cmp	r6, r4
 8004948:	d105      	bne.n	8004956 <__libc_init_array+0x2e>
 800494a:	bd70      	pop	{r4, r5, r6, pc}
 800494c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004950:	4798      	blx	r3
 8004952:	3601      	adds	r6, #1
 8004954:	e7ee      	b.n	8004934 <__libc_init_array+0xc>
 8004956:	f855 3b04 	ldr.w	r3, [r5], #4
 800495a:	4798      	blx	r3
 800495c:	3601      	adds	r6, #1
 800495e:	e7f2      	b.n	8004946 <__libc_init_array+0x1e>
 8004960:	08007f20 	.word	0x08007f20
 8004964:	08007f20 	.word	0x08007f20
 8004968:	08007f20 	.word	0x08007f20
 800496c:	08007f24 	.word	0x08007f24

08004970 <memset>:
 8004970:	4402      	add	r2, r0
 8004972:	4603      	mov	r3, r0
 8004974:	4293      	cmp	r3, r2
 8004976:	d100      	bne.n	800497a <memset+0xa>
 8004978:	4770      	bx	lr
 800497a:	f803 1b01 	strb.w	r1, [r3], #1
 800497e:	e7f9      	b.n	8004974 <memset+0x4>

08004980 <__cvt>:
 8004980:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004984:	ec55 4b10 	vmov	r4, r5, d0
 8004988:	2d00      	cmp	r5, #0
 800498a:	460e      	mov	r6, r1
 800498c:	4619      	mov	r1, r3
 800498e:	462b      	mov	r3, r5
 8004990:	bfbb      	ittet	lt
 8004992:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004996:	461d      	movlt	r5, r3
 8004998:	2300      	movge	r3, #0
 800499a:	232d      	movlt	r3, #45	; 0x2d
 800499c:	700b      	strb	r3, [r1, #0]
 800499e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80049a4:	4691      	mov	r9, r2
 80049a6:	f023 0820 	bic.w	r8, r3, #32
 80049aa:	bfbc      	itt	lt
 80049ac:	4622      	movlt	r2, r4
 80049ae:	4614      	movlt	r4, r2
 80049b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80049b4:	d005      	beq.n	80049c2 <__cvt+0x42>
 80049b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80049ba:	d100      	bne.n	80049be <__cvt+0x3e>
 80049bc:	3601      	adds	r6, #1
 80049be:	2102      	movs	r1, #2
 80049c0:	e000      	b.n	80049c4 <__cvt+0x44>
 80049c2:	2103      	movs	r1, #3
 80049c4:	ab03      	add	r3, sp, #12
 80049c6:	9301      	str	r3, [sp, #4]
 80049c8:	ab02      	add	r3, sp, #8
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	ec45 4b10 	vmov	d0, r4, r5
 80049d0:	4653      	mov	r3, sl
 80049d2:	4632      	mov	r2, r6
 80049d4:	f000 fce4 	bl	80053a0 <_dtoa_r>
 80049d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80049dc:	4607      	mov	r7, r0
 80049de:	d102      	bne.n	80049e6 <__cvt+0x66>
 80049e0:	f019 0f01 	tst.w	r9, #1
 80049e4:	d022      	beq.n	8004a2c <__cvt+0xac>
 80049e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80049ea:	eb07 0906 	add.w	r9, r7, r6
 80049ee:	d110      	bne.n	8004a12 <__cvt+0x92>
 80049f0:	783b      	ldrb	r3, [r7, #0]
 80049f2:	2b30      	cmp	r3, #48	; 0x30
 80049f4:	d10a      	bne.n	8004a0c <__cvt+0x8c>
 80049f6:	2200      	movs	r2, #0
 80049f8:	2300      	movs	r3, #0
 80049fa:	4620      	mov	r0, r4
 80049fc:	4629      	mov	r1, r5
 80049fe:	f7fc f883 	bl	8000b08 <__aeabi_dcmpeq>
 8004a02:	b918      	cbnz	r0, 8004a0c <__cvt+0x8c>
 8004a04:	f1c6 0601 	rsb	r6, r6, #1
 8004a08:	f8ca 6000 	str.w	r6, [sl]
 8004a0c:	f8da 3000 	ldr.w	r3, [sl]
 8004a10:	4499      	add	r9, r3
 8004a12:	2200      	movs	r2, #0
 8004a14:	2300      	movs	r3, #0
 8004a16:	4620      	mov	r0, r4
 8004a18:	4629      	mov	r1, r5
 8004a1a:	f7fc f875 	bl	8000b08 <__aeabi_dcmpeq>
 8004a1e:	b108      	cbz	r0, 8004a24 <__cvt+0xa4>
 8004a20:	f8cd 900c 	str.w	r9, [sp, #12]
 8004a24:	2230      	movs	r2, #48	; 0x30
 8004a26:	9b03      	ldr	r3, [sp, #12]
 8004a28:	454b      	cmp	r3, r9
 8004a2a:	d307      	bcc.n	8004a3c <__cvt+0xbc>
 8004a2c:	9b03      	ldr	r3, [sp, #12]
 8004a2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a30:	1bdb      	subs	r3, r3, r7
 8004a32:	4638      	mov	r0, r7
 8004a34:	6013      	str	r3, [r2, #0]
 8004a36:	b004      	add	sp, #16
 8004a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a3c:	1c59      	adds	r1, r3, #1
 8004a3e:	9103      	str	r1, [sp, #12]
 8004a40:	701a      	strb	r2, [r3, #0]
 8004a42:	e7f0      	b.n	8004a26 <__cvt+0xa6>

08004a44 <__exponent>:
 8004a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a46:	4603      	mov	r3, r0
 8004a48:	2900      	cmp	r1, #0
 8004a4a:	bfb8      	it	lt
 8004a4c:	4249      	neglt	r1, r1
 8004a4e:	f803 2b02 	strb.w	r2, [r3], #2
 8004a52:	bfb4      	ite	lt
 8004a54:	222d      	movlt	r2, #45	; 0x2d
 8004a56:	222b      	movge	r2, #43	; 0x2b
 8004a58:	2909      	cmp	r1, #9
 8004a5a:	7042      	strb	r2, [r0, #1]
 8004a5c:	dd2a      	ble.n	8004ab4 <__exponent+0x70>
 8004a5e:	f10d 0407 	add.w	r4, sp, #7
 8004a62:	46a4      	mov	ip, r4
 8004a64:	270a      	movs	r7, #10
 8004a66:	46a6      	mov	lr, r4
 8004a68:	460a      	mov	r2, r1
 8004a6a:	fb91 f6f7 	sdiv	r6, r1, r7
 8004a6e:	fb07 1516 	mls	r5, r7, r6, r1
 8004a72:	3530      	adds	r5, #48	; 0x30
 8004a74:	2a63      	cmp	r2, #99	; 0x63
 8004a76:	f104 34ff 	add.w	r4, r4, #4294967295
 8004a7a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004a7e:	4631      	mov	r1, r6
 8004a80:	dcf1      	bgt.n	8004a66 <__exponent+0x22>
 8004a82:	3130      	adds	r1, #48	; 0x30
 8004a84:	f1ae 0502 	sub.w	r5, lr, #2
 8004a88:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004a8c:	1c44      	adds	r4, r0, #1
 8004a8e:	4629      	mov	r1, r5
 8004a90:	4561      	cmp	r1, ip
 8004a92:	d30a      	bcc.n	8004aaa <__exponent+0x66>
 8004a94:	f10d 0209 	add.w	r2, sp, #9
 8004a98:	eba2 020e 	sub.w	r2, r2, lr
 8004a9c:	4565      	cmp	r5, ip
 8004a9e:	bf88      	it	hi
 8004aa0:	2200      	movhi	r2, #0
 8004aa2:	4413      	add	r3, r2
 8004aa4:	1a18      	subs	r0, r3, r0
 8004aa6:	b003      	add	sp, #12
 8004aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004aaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004aae:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004ab2:	e7ed      	b.n	8004a90 <__exponent+0x4c>
 8004ab4:	2330      	movs	r3, #48	; 0x30
 8004ab6:	3130      	adds	r1, #48	; 0x30
 8004ab8:	7083      	strb	r3, [r0, #2]
 8004aba:	70c1      	strb	r1, [r0, #3]
 8004abc:	1d03      	adds	r3, r0, #4
 8004abe:	e7f1      	b.n	8004aa4 <__exponent+0x60>

08004ac0 <_printf_float>:
 8004ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ac4:	ed2d 8b02 	vpush	{d8}
 8004ac8:	b08d      	sub	sp, #52	; 0x34
 8004aca:	460c      	mov	r4, r1
 8004acc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004ad0:	4616      	mov	r6, r2
 8004ad2:	461f      	mov	r7, r3
 8004ad4:	4605      	mov	r5, r0
 8004ad6:	f001 fb47 	bl	8006168 <_localeconv_r>
 8004ada:	f8d0 a000 	ldr.w	sl, [r0]
 8004ade:	4650      	mov	r0, sl
 8004ae0:	f7fb fb96 	bl	8000210 <strlen>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	930a      	str	r3, [sp, #40]	; 0x28
 8004ae8:	6823      	ldr	r3, [r4, #0]
 8004aea:	9305      	str	r3, [sp, #20]
 8004aec:	f8d8 3000 	ldr.w	r3, [r8]
 8004af0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004af4:	3307      	adds	r3, #7
 8004af6:	f023 0307 	bic.w	r3, r3, #7
 8004afa:	f103 0208 	add.w	r2, r3, #8
 8004afe:	f8c8 2000 	str.w	r2, [r8]
 8004b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b06:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004b0a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004b0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004b12:	9307      	str	r3, [sp, #28]
 8004b14:	f8cd 8018 	str.w	r8, [sp, #24]
 8004b18:	ee08 0a10 	vmov	s16, r0
 8004b1c:	4b9f      	ldr	r3, [pc, #636]	; (8004d9c <_printf_float+0x2dc>)
 8004b1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b22:	f04f 32ff 	mov.w	r2, #4294967295
 8004b26:	f7fc f821 	bl	8000b6c <__aeabi_dcmpun>
 8004b2a:	bb88      	cbnz	r0, 8004b90 <_printf_float+0xd0>
 8004b2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b30:	4b9a      	ldr	r3, [pc, #616]	; (8004d9c <_printf_float+0x2dc>)
 8004b32:	f04f 32ff 	mov.w	r2, #4294967295
 8004b36:	f7fb fffb 	bl	8000b30 <__aeabi_dcmple>
 8004b3a:	bb48      	cbnz	r0, 8004b90 <_printf_float+0xd0>
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	2300      	movs	r3, #0
 8004b40:	4640      	mov	r0, r8
 8004b42:	4649      	mov	r1, r9
 8004b44:	f7fb ffea 	bl	8000b1c <__aeabi_dcmplt>
 8004b48:	b110      	cbz	r0, 8004b50 <_printf_float+0x90>
 8004b4a:	232d      	movs	r3, #45	; 0x2d
 8004b4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b50:	4b93      	ldr	r3, [pc, #588]	; (8004da0 <_printf_float+0x2e0>)
 8004b52:	4894      	ldr	r0, [pc, #592]	; (8004da4 <_printf_float+0x2e4>)
 8004b54:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004b58:	bf94      	ite	ls
 8004b5a:	4698      	movls	r8, r3
 8004b5c:	4680      	movhi	r8, r0
 8004b5e:	2303      	movs	r3, #3
 8004b60:	6123      	str	r3, [r4, #16]
 8004b62:	9b05      	ldr	r3, [sp, #20]
 8004b64:	f023 0204 	bic.w	r2, r3, #4
 8004b68:	6022      	str	r2, [r4, #0]
 8004b6a:	f04f 0900 	mov.w	r9, #0
 8004b6e:	9700      	str	r7, [sp, #0]
 8004b70:	4633      	mov	r3, r6
 8004b72:	aa0b      	add	r2, sp, #44	; 0x2c
 8004b74:	4621      	mov	r1, r4
 8004b76:	4628      	mov	r0, r5
 8004b78:	f000 f9d8 	bl	8004f2c <_printf_common>
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	f040 8090 	bne.w	8004ca2 <_printf_float+0x1e2>
 8004b82:	f04f 30ff 	mov.w	r0, #4294967295
 8004b86:	b00d      	add	sp, #52	; 0x34
 8004b88:	ecbd 8b02 	vpop	{d8}
 8004b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b90:	4642      	mov	r2, r8
 8004b92:	464b      	mov	r3, r9
 8004b94:	4640      	mov	r0, r8
 8004b96:	4649      	mov	r1, r9
 8004b98:	f7fb ffe8 	bl	8000b6c <__aeabi_dcmpun>
 8004b9c:	b140      	cbz	r0, 8004bb0 <_printf_float+0xf0>
 8004b9e:	464b      	mov	r3, r9
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	bfbc      	itt	lt
 8004ba4:	232d      	movlt	r3, #45	; 0x2d
 8004ba6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004baa:	487f      	ldr	r0, [pc, #508]	; (8004da8 <_printf_float+0x2e8>)
 8004bac:	4b7f      	ldr	r3, [pc, #508]	; (8004dac <_printf_float+0x2ec>)
 8004bae:	e7d1      	b.n	8004b54 <_printf_float+0x94>
 8004bb0:	6863      	ldr	r3, [r4, #4]
 8004bb2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004bb6:	9206      	str	r2, [sp, #24]
 8004bb8:	1c5a      	adds	r2, r3, #1
 8004bba:	d13f      	bne.n	8004c3c <_printf_float+0x17c>
 8004bbc:	2306      	movs	r3, #6
 8004bbe:	6063      	str	r3, [r4, #4]
 8004bc0:	9b05      	ldr	r3, [sp, #20]
 8004bc2:	6861      	ldr	r1, [r4, #4]
 8004bc4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004bc8:	2300      	movs	r3, #0
 8004bca:	9303      	str	r3, [sp, #12]
 8004bcc:	ab0a      	add	r3, sp, #40	; 0x28
 8004bce:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004bd2:	ab09      	add	r3, sp, #36	; 0x24
 8004bd4:	ec49 8b10 	vmov	d0, r8, r9
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	6022      	str	r2, [r4, #0]
 8004bdc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004be0:	4628      	mov	r0, r5
 8004be2:	f7ff fecd 	bl	8004980 <__cvt>
 8004be6:	9b06      	ldr	r3, [sp, #24]
 8004be8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004bea:	2b47      	cmp	r3, #71	; 0x47
 8004bec:	4680      	mov	r8, r0
 8004bee:	d108      	bne.n	8004c02 <_printf_float+0x142>
 8004bf0:	1cc8      	adds	r0, r1, #3
 8004bf2:	db02      	blt.n	8004bfa <_printf_float+0x13a>
 8004bf4:	6863      	ldr	r3, [r4, #4]
 8004bf6:	4299      	cmp	r1, r3
 8004bf8:	dd41      	ble.n	8004c7e <_printf_float+0x1be>
 8004bfa:	f1ab 0b02 	sub.w	fp, fp, #2
 8004bfe:	fa5f fb8b 	uxtb.w	fp, fp
 8004c02:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004c06:	d820      	bhi.n	8004c4a <_printf_float+0x18a>
 8004c08:	3901      	subs	r1, #1
 8004c0a:	465a      	mov	r2, fp
 8004c0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004c10:	9109      	str	r1, [sp, #36]	; 0x24
 8004c12:	f7ff ff17 	bl	8004a44 <__exponent>
 8004c16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c18:	1813      	adds	r3, r2, r0
 8004c1a:	2a01      	cmp	r2, #1
 8004c1c:	4681      	mov	r9, r0
 8004c1e:	6123      	str	r3, [r4, #16]
 8004c20:	dc02      	bgt.n	8004c28 <_printf_float+0x168>
 8004c22:	6822      	ldr	r2, [r4, #0]
 8004c24:	07d2      	lsls	r2, r2, #31
 8004c26:	d501      	bpl.n	8004c2c <_printf_float+0x16c>
 8004c28:	3301      	adds	r3, #1
 8004c2a:	6123      	str	r3, [r4, #16]
 8004c2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d09c      	beq.n	8004b6e <_printf_float+0xae>
 8004c34:	232d      	movs	r3, #45	; 0x2d
 8004c36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c3a:	e798      	b.n	8004b6e <_printf_float+0xae>
 8004c3c:	9a06      	ldr	r2, [sp, #24]
 8004c3e:	2a47      	cmp	r2, #71	; 0x47
 8004c40:	d1be      	bne.n	8004bc0 <_printf_float+0x100>
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1bc      	bne.n	8004bc0 <_printf_float+0x100>
 8004c46:	2301      	movs	r3, #1
 8004c48:	e7b9      	b.n	8004bbe <_printf_float+0xfe>
 8004c4a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004c4e:	d118      	bne.n	8004c82 <_printf_float+0x1c2>
 8004c50:	2900      	cmp	r1, #0
 8004c52:	6863      	ldr	r3, [r4, #4]
 8004c54:	dd0b      	ble.n	8004c6e <_printf_float+0x1ae>
 8004c56:	6121      	str	r1, [r4, #16]
 8004c58:	b913      	cbnz	r3, 8004c60 <_printf_float+0x1a0>
 8004c5a:	6822      	ldr	r2, [r4, #0]
 8004c5c:	07d0      	lsls	r0, r2, #31
 8004c5e:	d502      	bpl.n	8004c66 <_printf_float+0x1a6>
 8004c60:	3301      	adds	r3, #1
 8004c62:	440b      	add	r3, r1
 8004c64:	6123      	str	r3, [r4, #16]
 8004c66:	65a1      	str	r1, [r4, #88]	; 0x58
 8004c68:	f04f 0900 	mov.w	r9, #0
 8004c6c:	e7de      	b.n	8004c2c <_printf_float+0x16c>
 8004c6e:	b913      	cbnz	r3, 8004c76 <_printf_float+0x1b6>
 8004c70:	6822      	ldr	r2, [r4, #0]
 8004c72:	07d2      	lsls	r2, r2, #31
 8004c74:	d501      	bpl.n	8004c7a <_printf_float+0x1ba>
 8004c76:	3302      	adds	r3, #2
 8004c78:	e7f4      	b.n	8004c64 <_printf_float+0x1a4>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e7f2      	b.n	8004c64 <_printf_float+0x1a4>
 8004c7e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004c82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c84:	4299      	cmp	r1, r3
 8004c86:	db05      	blt.n	8004c94 <_printf_float+0x1d4>
 8004c88:	6823      	ldr	r3, [r4, #0]
 8004c8a:	6121      	str	r1, [r4, #16]
 8004c8c:	07d8      	lsls	r0, r3, #31
 8004c8e:	d5ea      	bpl.n	8004c66 <_printf_float+0x1a6>
 8004c90:	1c4b      	adds	r3, r1, #1
 8004c92:	e7e7      	b.n	8004c64 <_printf_float+0x1a4>
 8004c94:	2900      	cmp	r1, #0
 8004c96:	bfd4      	ite	le
 8004c98:	f1c1 0202 	rsble	r2, r1, #2
 8004c9c:	2201      	movgt	r2, #1
 8004c9e:	4413      	add	r3, r2
 8004ca0:	e7e0      	b.n	8004c64 <_printf_float+0x1a4>
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	055a      	lsls	r2, r3, #21
 8004ca6:	d407      	bmi.n	8004cb8 <_printf_float+0x1f8>
 8004ca8:	6923      	ldr	r3, [r4, #16]
 8004caa:	4642      	mov	r2, r8
 8004cac:	4631      	mov	r1, r6
 8004cae:	4628      	mov	r0, r5
 8004cb0:	47b8      	blx	r7
 8004cb2:	3001      	adds	r0, #1
 8004cb4:	d12c      	bne.n	8004d10 <_printf_float+0x250>
 8004cb6:	e764      	b.n	8004b82 <_printf_float+0xc2>
 8004cb8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004cbc:	f240 80e0 	bls.w	8004e80 <_printf_float+0x3c0>
 8004cc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	f7fb ff1e 	bl	8000b08 <__aeabi_dcmpeq>
 8004ccc:	2800      	cmp	r0, #0
 8004cce:	d034      	beq.n	8004d3a <_printf_float+0x27a>
 8004cd0:	4a37      	ldr	r2, [pc, #220]	; (8004db0 <_printf_float+0x2f0>)
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	4631      	mov	r1, r6
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	47b8      	blx	r7
 8004cda:	3001      	adds	r0, #1
 8004cdc:	f43f af51 	beq.w	8004b82 <_printf_float+0xc2>
 8004ce0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	db02      	blt.n	8004cee <_printf_float+0x22e>
 8004ce8:	6823      	ldr	r3, [r4, #0]
 8004cea:	07d8      	lsls	r0, r3, #31
 8004cec:	d510      	bpl.n	8004d10 <_printf_float+0x250>
 8004cee:	ee18 3a10 	vmov	r3, s16
 8004cf2:	4652      	mov	r2, sl
 8004cf4:	4631      	mov	r1, r6
 8004cf6:	4628      	mov	r0, r5
 8004cf8:	47b8      	blx	r7
 8004cfa:	3001      	adds	r0, #1
 8004cfc:	f43f af41 	beq.w	8004b82 <_printf_float+0xc2>
 8004d00:	f04f 0800 	mov.w	r8, #0
 8004d04:	f104 091a 	add.w	r9, r4, #26
 8004d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	4543      	cmp	r3, r8
 8004d0e:	dc09      	bgt.n	8004d24 <_printf_float+0x264>
 8004d10:	6823      	ldr	r3, [r4, #0]
 8004d12:	079b      	lsls	r3, r3, #30
 8004d14:	f100 8105 	bmi.w	8004f22 <_printf_float+0x462>
 8004d18:	68e0      	ldr	r0, [r4, #12]
 8004d1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d1c:	4298      	cmp	r0, r3
 8004d1e:	bfb8      	it	lt
 8004d20:	4618      	movlt	r0, r3
 8004d22:	e730      	b.n	8004b86 <_printf_float+0xc6>
 8004d24:	2301      	movs	r3, #1
 8004d26:	464a      	mov	r2, r9
 8004d28:	4631      	mov	r1, r6
 8004d2a:	4628      	mov	r0, r5
 8004d2c:	47b8      	blx	r7
 8004d2e:	3001      	adds	r0, #1
 8004d30:	f43f af27 	beq.w	8004b82 <_printf_float+0xc2>
 8004d34:	f108 0801 	add.w	r8, r8, #1
 8004d38:	e7e6      	b.n	8004d08 <_printf_float+0x248>
 8004d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	dc39      	bgt.n	8004db4 <_printf_float+0x2f4>
 8004d40:	4a1b      	ldr	r2, [pc, #108]	; (8004db0 <_printf_float+0x2f0>)
 8004d42:	2301      	movs	r3, #1
 8004d44:	4631      	mov	r1, r6
 8004d46:	4628      	mov	r0, r5
 8004d48:	47b8      	blx	r7
 8004d4a:	3001      	adds	r0, #1
 8004d4c:	f43f af19 	beq.w	8004b82 <_printf_float+0xc2>
 8004d50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d54:	4313      	orrs	r3, r2
 8004d56:	d102      	bne.n	8004d5e <_printf_float+0x29e>
 8004d58:	6823      	ldr	r3, [r4, #0]
 8004d5a:	07d9      	lsls	r1, r3, #31
 8004d5c:	d5d8      	bpl.n	8004d10 <_printf_float+0x250>
 8004d5e:	ee18 3a10 	vmov	r3, s16
 8004d62:	4652      	mov	r2, sl
 8004d64:	4631      	mov	r1, r6
 8004d66:	4628      	mov	r0, r5
 8004d68:	47b8      	blx	r7
 8004d6a:	3001      	adds	r0, #1
 8004d6c:	f43f af09 	beq.w	8004b82 <_printf_float+0xc2>
 8004d70:	f04f 0900 	mov.w	r9, #0
 8004d74:	f104 0a1a 	add.w	sl, r4, #26
 8004d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d7a:	425b      	negs	r3, r3
 8004d7c:	454b      	cmp	r3, r9
 8004d7e:	dc01      	bgt.n	8004d84 <_printf_float+0x2c4>
 8004d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d82:	e792      	b.n	8004caa <_printf_float+0x1ea>
 8004d84:	2301      	movs	r3, #1
 8004d86:	4652      	mov	r2, sl
 8004d88:	4631      	mov	r1, r6
 8004d8a:	4628      	mov	r0, r5
 8004d8c:	47b8      	blx	r7
 8004d8e:	3001      	adds	r0, #1
 8004d90:	f43f aef7 	beq.w	8004b82 <_printf_float+0xc2>
 8004d94:	f109 0901 	add.w	r9, r9, #1
 8004d98:	e7ee      	b.n	8004d78 <_printf_float+0x2b8>
 8004d9a:	bf00      	nop
 8004d9c:	7fefffff 	.word	0x7fefffff
 8004da0:	08007acc 	.word	0x08007acc
 8004da4:	08007ad0 	.word	0x08007ad0
 8004da8:	08007ad8 	.word	0x08007ad8
 8004dac:	08007ad4 	.word	0x08007ad4
 8004db0:	08007adc 	.word	0x08007adc
 8004db4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004db6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004db8:	429a      	cmp	r2, r3
 8004dba:	bfa8      	it	ge
 8004dbc:	461a      	movge	r2, r3
 8004dbe:	2a00      	cmp	r2, #0
 8004dc0:	4691      	mov	r9, r2
 8004dc2:	dc37      	bgt.n	8004e34 <_printf_float+0x374>
 8004dc4:	f04f 0b00 	mov.w	fp, #0
 8004dc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004dcc:	f104 021a 	add.w	r2, r4, #26
 8004dd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004dd2:	9305      	str	r3, [sp, #20]
 8004dd4:	eba3 0309 	sub.w	r3, r3, r9
 8004dd8:	455b      	cmp	r3, fp
 8004dda:	dc33      	bgt.n	8004e44 <_printf_float+0x384>
 8004ddc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004de0:	429a      	cmp	r2, r3
 8004de2:	db3b      	blt.n	8004e5c <_printf_float+0x39c>
 8004de4:	6823      	ldr	r3, [r4, #0]
 8004de6:	07da      	lsls	r2, r3, #31
 8004de8:	d438      	bmi.n	8004e5c <_printf_float+0x39c>
 8004dea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dec:	9a05      	ldr	r2, [sp, #20]
 8004dee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004df0:	1a9a      	subs	r2, r3, r2
 8004df2:	eba3 0901 	sub.w	r9, r3, r1
 8004df6:	4591      	cmp	r9, r2
 8004df8:	bfa8      	it	ge
 8004dfa:	4691      	movge	r9, r2
 8004dfc:	f1b9 0f00 	cmp.w	r9, #0
 8004e00:	dc35      	bgt.n	8004e6e <_printf_float+0x3ae>
 8004e02:	f04f 0800 	mov.w	r8, #0
 8004e06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e0a:	f104 0a1a 	add.w	sl, r4, #26
 8004e0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e12:	1a9b      	subs	r3, r3, r2
 8004e14:	eba3 0309 	sub.w	r3, r3, r9
 8004e18:	4543      	cmp	r3, r8
 8004e1a:	f77f af79 	ble.w	8004d10 <_printf_float+0x250>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	4652      	mov	r2, sl
 8004e22:	4631      	mov	r1, r6
 8004e24:	4628      	mov	r0, r5
 8004e26:	47b8      	blx	r7
 8004e28:	3001      	adds	r0, #1
 8004e2a:	f43f aeaa 	beq.w	8004b82 <_printf_float+0xc2>
 8004e2e:	f108 0801 	add.w	r8, r8, #1
 8004e32:	e7ec      	b.n	8004e0e <_printf_float+0x34e>
 8004e34:	4613      	mov	r3, r2
 8004e36:	4631      	mov	r1, r6
 8004e38:	4642      	mov	r2, r8
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	47b8      	blx	r7
 8004e3e:	3001      	adds	r0, #1
 8004e40:	d1c0      	bne.n	8004dc4 <_printf_float+0x304>
 8004e42:	e69e      	b.n	8004b82 <_printf_float+0xc2>
 8004e44:	2301      	movs	r3, #1
 8004e46:	4631      	mov	r1, r6
 8004e48:	4628      	mov	r0, r5
 8004e4a:	9205      	str	r2, [sp, #20]
 8004e4c:	47b8      	blx	r7
 8004e4e:	3001      	adds	r0, #1
 8004e50:	f43f ae97 	beq.w	8004b82 <_printf_float+0xc2>
 8004e54:	9a05      	ldr	r2, [sp, #20]
 8004e56:	f10b 0b01 	add.w	fp, fp, #1
 8004e5a:	e7b9      	b.n	8004dd0 <_printf_float+0x310>
 8004e5c:	ee18 3a10 	vmov	r3, s16
 8004e60:	4652      	mov	r2, sl
 8004e62:	4631      	mov	r1, r6
 8004e64:	4628      	mov	r0, r5
 8004e66:	47b8      	blx	r7
 8004e68:	3001      	adds	r0, #1
 8004e6a:	d1be      	bne.n	8004dea <_printf_float+0x32a>
 8004e6c:	e689      	b.n	8004b82 <_printf_float+0xc2>
 8004e6e:	9a05      	ldr	r2, [sp, #20]
 8004e70:	464b      	mov	r3, r9
 8004e72:	4442      	add	r2, r8
 8004e74:	4631      	mov	r1, r6
 8004e76:	4628      	mov	r0, r5
 8004e78:	47b8      	blx	r7
 8004e7a:	3001      	adds	r0, #1
 8004e7c:	d1c1      	bne.n	8004e02 <_printf_float+0x342>
 8004e7e:	e680      	b.n	8004b82 <_printf_float+0xc2>
 8004e80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e82:	2a01      	cmp	r2, #1
 8004e84:	dc01      	bgt.n	8004e8a <_printf_float+0x3ca>
 8004e86:	07db      	lsls	r3, r3, #31
 8004e88:	d538      	bpl.n	8004efc <_printf_float+0x43c>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	4642      	mov	r2, r8
 8004e8e:	4631      	mov	r1, r6
 8004e90:	4628      	mov	r0, r5
 8004e92:	47b8      	blx	r7
 8004e94:	3001      	adds	r0, #1
 8004e96:	f43f ae74 	beq.w	8004b82 <_printf_float+0xc2>
 8004e9a:	ee18 3a10 	vmov	r3, s16
 8004e9e:	4652      	mov	r2, sl
 8004ea0:	4631      	mov	r1, r6
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	47b8      	blx	r7
 8004ea6:	3001      	adds	r0, #1
 8004ea8:	f43f ae6b 	beq.w	8004b82 <_printf_float+0xc2>
 8004eac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	f7fb fe28 	bl	8000b08 <__aeabi_dcmpeq>
 8004eb8:	b9d8      	cbnz	r0, 8004ef2 <_printf_float+0x432>
 8004eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ebc:	f108 0201 	add.w	r2, r8, #1
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	4631      	mov	r1, r6
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	47b8      	blx	r7
 8004ec8:	3001      	adds	r0, #1
 8004eca:	d10e      	bne.n	8004eea <_printf_float+0x42a>
 8004ecc:	e659      	b.n	8004b82 <_printf_float+0xc2>
 8004ece:	2301      	movs	r3, #1
 8004ed0:	4652      	mov	r2, sl
 8004ed2:	4631      	mov	r1, r6
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	47b8      	blx	r7
 8004ed8:	3001      	adds	r0, #1
 8004eda:	f43f ae52 	beq.w	8004b82 <_printf_float+0xc2>
 8004ede:	f108 0801 	add.w	r8, r8, #1
 8004ee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	4543      	cmp	r3, r8
 8004ee8:	dcf1      	bgt.n	8004ece <_printf_float+0x40e>
 8004eea:	464b      	mov	r3, r9
 8004eec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004ef0:	e6dc      	b.n	8004cac <_printf_float+0x1ec>
 8004ef2:	f04f 0800 	mov.w	r8, #0
 8004ef6:	f104 0a1a 	add.w	sl, r4, #26
 8004efa:	e7f2      	b.n	8004ee2 <_printf_float+0x422>
 8004efc:	2301      	movs	r3, #1
 8004efe:	4642      	mov	r2, r8
 8004f00:	e7df      	b.n	8004ec2 <_printf_float+0x402>
 8004f02:	2301      	movs	r3, #1
 8004f04:	464a      	mov	r2, r9
 8004f06:	4631      	mov	r1, r6
 8004f08:	4628      	mov	r0, r5
 8004f0a:	47b8      	blx	r7
 8004f0c:	3001      	adds	r0, #1
 8004f0e:	f43f ae38 	beq.w	8004b82 <_printf_float+0xc2>
 8004f12:	f108 0801 	add.w	r8, r8, #1
 8004f16:	68e3      	ldr	r3, [r4, #12]
 8004f18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f1a:	1a5b      	subs	r3, r3, r1
 8004f1c:	4543      	cmp	r3, r8
 8004f1e:	dcf0      	bgt.n	8004f02 <_printf_float+0x442>
 8004f20:	e6fa      	b.n	8004d18 <_printf_float+0x258>
 8004f22:	f04f 0800 	mov.w	r8, #0
 8004f26:	f104 0919 	add.w	r9, r4, #25
 8004f2a:	e7f4      	b.n	8004f16 <_printf_float+0x456>

08004f2c <_printf_common>:
 8004f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f30:	4616      	mov	r6, r2
 8004f32:	4699      	mov	r9, r3
 8004f34:	688a      	ldr	r2, [r1, #8]
 8004f36:	690b      	ldr	r3, [r1, #16]
 8004f38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	bfb8      	it	lt
 8004f40:	4613      	movlt	r3, r2
 8004f42:	6033      	str	r3, [r6, #0]
 8004f44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f48:	4607      	mov	r7, r0
 8004f4a:	460c      	mov	r4, r1
 8004f4c:	b10a      	cbz	r2, 8004f52 <_printf_common+0x26>
 8004f4e:	3301      	adds	r3, #1
 8004f50:	6033      	str	r3, [r6, #0]
 8004f52:	6823      	ldr	r3, [r4, #0]
 8004f54:	0699      	lsls	r1, r3, #26
 8004f56:	bf42      	ittt	mi
 8004f58:	6833      	ldrmi	r3, [r6, #0]
 8004f5a:	3302      	addmi	r3, #2
 8004f5c:	6033      	strmi	r3, [r6, #0]
 8004f5e:	6825      	ldr	r5, [r4, #0]
 8004f60:	f015 0506 	ands.w	r5, r5, #6
 8004f64:	d106      	bne.n	8004f74 <_printf_common+0x48>
 8004f66:	f104 0a19 	add.w	sl, r4, #25
 8004f6a:	68e3      	ldr	r3, [r4, #12]
 8004f6c:	6832      	ldr	r2, [r6, #0]
 8004f6e:	1a9b      	subs	r3, r3, r2
 8004f70:	42ab      	cmp	r3, r5
 8004f72:	dc26      	bgt.n	8004fc2 <_printf_common+0x96>
 8004f74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f78:	1e13      	subs	r3, r2, #0
 8004f7a:	6822      	ldr	r2, [r4, #0]
 8004f7c:	bf18      	it	ne
 8004f7e:	2301      	movne	r3, #1
 8004f80:	0692      	lsls	r2, r2, #26
 8004f82:	d42b      	bmi.n	8004fdc <_printf_common+0xb0>
 8004f84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f88:	4649      	mov	r1, r9
 8004f8a:	4638      	mov	r0, r7
 8004f8c:	47c0      	blx	r8
 8004f8e:	3001      	adds	r0, #1
 8004f90:	d01e      	beq.n	8004fd0 <_printf_common+0xa4>
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	68e5      	ldr	r5, [r4, #12]
 8004f96:	6832      	ldr	r2, [r6, #0]
 8004f98:	f003 0306 	and.w	r3, r3, #6
 8004f9c:	2b04      	cmp	r3, #4
 8004f9e:	bf08      	it	eq
 8004fa0:	1aad      	subeq	r5, r5, r2
 8004fa2:	68a3      	ldr	r3, [r4, #8]
 8004fa4:	6922      	ldr	r2, [r4, #16]
 8004fa6:	bf0c      	ite	eq
 8004fa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fac:	2500      	movne	r5, #0
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	bfc4      	itt	gt
 8004fb2:	1a9b      	subgt	r3, r3, r2
 8004fb4:	18ed      	addgt	r5, r5, r3
 8004fb6:	2600      	movs	r6, #0
 8004fb8:	341a      	adds	r4, #26
 8004fba:	42b5      	cmp	r5, r6
 8004fbc:	d11a      	bne.n	8004ff4 <_printf_common+0xc8>
 8004fbe:	2000      	movs	r0, #0
 8004fc0:	e008      	b.n	8004fd4 <_printf_common+0xa8>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	4652      	mov	r2, sl
 8004fc6:	4649      	mov	r1, r9
 8004fc8:	4638      	mov	r0, r7
 8004fca:	47c0      	blx	r8
 8004fcc:	3001      	adds	r0, #1
 8004fce:	d103      	bne.n	8004fd8 <_printf_common+0xac>
 8004fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fd8:	3501      	adds	r5, #1
 8004fda:	e7c6      	b.n	8004f6a <_printf_common+0x3e>
 8004fdc:	18e1      	adds	r1, r4, r3
 8004fde:	1c5a      	adds	r2, r3, #1
 8004fe0:	2030      	movs	r0, #48	; 0x30
 8004fe2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fe6:	4422      	add	r2, r4
 8004fe8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ff0:	3302      	adds	r3, #2
 8004ff2:	e7c7      	b.n	8004f84 <_printf_common+0x58>
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	4622      	mov	r2, r4
 8004ff8:	4649      	mov	r1, r9
 8004ffa:	4638      	mov	r0, r7
 8004ffc:	47c0      	blx	r8
 8004ffe:	3001      	adds	r0, #1
 8005000:	d0e6      	beq.n	8004fd0 <_printf_common+0xa4>
 8005002:	3601      	adds	r6, #1
 8005004:	e7d9      	b.n	8004fba <_printf_common+0x8e>
	...

08005008 <_printf_i>:
 8005008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800500c:	7e0f      	ldrb	r7, [r1, #24]
 800500e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005010:	2f78      	cmp	r7, #120	; 0x78
 8005012:	4691      	mov	r9, r2
 8005014:	4680      	mov	r8, r0
 8005016:	460c      	mov	r4, r1
 8005018:	469a      	mov	sl, r3
 800501a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800501e:	d807      	bhi.n	8005030 <_printf_i+0x28>
 8005020:	2f62      	cmp	r7, #98	; 0x62
 8005022:	d80a      	bhi.n	800503a <_printf_i+0x32>
 8005024:	2f00      	cmp	r7, #0
 8005026:	f000 80d8 	beq.w	80051da <_printf_i+0x1d2>
 800502a:	2f58      	cmp	r7, #88	; 0x58
 800502c:	f000 80a3 	beq.w	8005176 <_printf_i+0x16e>
 8005030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005034:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005038:	e03a      	b.n	80050b0 <_printf_i+0xa8>
 800503a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800503e:	2b15      	cmp	r3, #21
 8005040:	d8f6      	bhi.n	8005030 <_printf_i+0x28>
 8005042:	a101      	add	r1, pc, #4	; (adr r1, 8005048 <_printf_i+0x40>)
 8005044:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005048:	080050a1 	.word	0x080050a1
 800504c:	080050b5 	.word	0x080050b5
 8005050:	08005031 	.word	0x08005031
 8005054:	08005031 	.word	0x08005031
 8005058:	08005031 	.word	0x08005031
 800505c:	08005031 	.word	0x08005031
 8005060:	080050b5 	.word	0x080050b5
 8005064:	08005031 	.word	0x08005031
 8005068:	08005031 	.word	0x08005031
 800506c:	08005031 	.word	0x08005031
 8005070:	08005031 	.word	0x08005031
 8005074:	080051c1 	.word	0x080051c1
 8005078:	080050e5 	.word	0x080050e5
 800507c:	080051a3 	.word	0x080051a3
 8005080:	08005031 	.word	0x08005031
 8005084:	08005031 	.word	0x08005031
 8005088:	080051e3 	.word	0x080051e3
 800508c:	08005031 	.word	0x08005031
 8005090:	080050e5 	.word	0x080050e5
 8005094:	08005031 	.word	0x08005031
 8005098:	08005031 	.word	0x08005031
 800509c:	080051ab 	.word	0x080051ab
 80050a0:	682b      	ldr	r3, [r5, #0]
 80050a2:	1d1a      	adds	r2, r3, #4
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	602a      	str	r2, [r5, #0]
 80050a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050b0:	2301      	movs	r3, #1
 80050b2:	e0a3      	b.n	80051fc <_printf_i+0x1f4>
 80050b4:	6820      	ldr	r0, [r4, #0]
 80050b6:	6829      	ldr	r1, [r5, #0]
 80050b8:	0606      	lsls	r6, r0, #24
 80050ba:	f101 0304 	add.w	r3, r1, #4
 80050be:	d50a      	bpl.n	80050d6 <_printf_i+0xce>
 80050c0:	680e      	ldr	r6, [r1, #0]
 80050c2:	602b      	str	r3, [r5, #0]
 80050c4:	2e00      	cmp	r6, #0
 80050c6:	da03      	bge.n	80050d0 <_printf_i+0xc8>
 80050c8:	232d      	movs	r3, #45	; 0x2d
 80050ca:	4276      	negs	r6, r6
 80050cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050d0:	485e      	ldr	r0, [pc, #376]	; (800524c <_printf_i+0x244>)
 80050d2:	230a      	movs	r3, #10
 80050d4:	e019      	b.n	800510a <_printf_i+0x102>
 80050d6:	680e      	ldr	r6, [r1, #0]
 80050d8:	602b      	str	r3, [r5, #0]
 80050da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050de:	bf18      	it	ne
 80050e0:	b236      	sxthne	r6, r6
 80050e2:	e7ef      	b.n	80050c4 <_printf_i+0xbc>
 80050e4:	682b      	ldr	r3, [r5, #0]
 80050e6:	6820      	ldr	r0, [r4, #0]
 80050e8:	1d19      	adds	r1, r3, #4
 80050ea:	6029      	str	r1, [r5, #0]
 80050ec:	0601      	lsls	r1, r0, #24
 80050ee:	d501      	bpl.n	80050f4 <_printf_i+0xec>
 80050f0:	681e      	ldr	r6, [r3, #0]
 80050f2:	e002      	b.n	80050fa <_printf_i+0xf2>
 80050f4:	0646      	lsls	r6, r0, #25
 80050f6:	d5fb      	bpl.n	80050f0 <_printf_i+0xe8>
 80050f8:	881e      	ldrh	r6, [r3, #0]
 80050fa:	4854      	ldr	r0, [pc, #336]	; (800524c <_printf_i+0x244>)
 80050fc:	2f6f      	cmp	r7, #111	; 0x6f
 80050fe:	bf0c      	ite	eq
 8005100:	2308      	moveq	r3, #8
 8005102:	230a      	movne	r3, #10
 8005104:	2100      	movs	r1, #0
 8005106:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800510a:	6865      	ldr	r5, [r4, #4]
 800510c:	60a5      	str	r5, [r4, #8]
 800510e:	2d00      	cmp	r5, #0
 8005110:	bfa2      	ittt	ge
 8005112:	6821      	ldrge	r1, [r4, #0]
 8005114:	f021 0104 	bicge.w	r1, r1, #4
 8005118:	6021      	strge	r1, [r4, #0]
 800511a:	b90e      	cbnz	r6, 8005120 <_printf_i+0x118>
 800511c:	2d00      	cmp	r5, #0
 800511e:	d04d      	beq.n	80051bc <_printf_i+0x1b4>
 8005120:	4615      	mov	r5, r2
 8005122:	fbb6 f1f3 	udiv	r1, r6, r3
 8005126:	fb03 6711 	mls	r7, r3, r1, r6
 800512a:	5dc7      	ldrb	r7, [r0, r7]
 800512c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005130:	4637      	mov	r7, r6
 8005132:	42bb      	cmp	r3, r7
 8005134:	460e      	mov	r6, r1
 8005136:	d9f4      	bls.n	8005122 <_printf_i+0x11a>
 8005138:	2b08      	cmp	r3, #8
 800513a:	d10b      	bne.n	8005154 <_printf_i+0x14c>
 800513c:	6823      	ldr	r3, [r4, #0]
 800513e:	07de      	lsls	r6, r3, #31
 8005140:	d508      	bpl.n	8005154 <_printf_i+0x14c>
 8005142:	6923      	ldr	r3, [r4, #16]
 8005144:	6861      	ldr	r1, [r4, #4]
 8005146:	4299      	cmp	r1, r3
 8005148:	bfde      	ittt	le
 800514a:	2330      	movle	r3, #48	; 0x30
 800514c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005150:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005154:	1b52      	subs	r2, r2, r5
 8005156:	6122      	str	r2, [r4, #16]
 8005158:	f8cd a000 	str.w	sl, [sp]
 800515c:	464b      	mov	r3, r9
 800515e:	aa03      	add	r2, sp, #12
 8005160:	4621      	mov	r1, r4
 8005162:	4640      	mov	r0, r8
 8005164:	f7ff fee2 	bl	8004f2c <_printf_common>
 8005168:	3001      	adds	r0, #1
 800516a:	d14c      	bne.n	8005206 <_printf_i+0x1fe>
 800516c:	f04f 30ff 	mov.w	r0, #4294967295
 8005170:	b004      	add	sp, #16
 8005172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005176:	4835      	ldr	r0, [pc, #212]	; (800524c <_printf_i+0x244>)
 8005178:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800517c:	6829      	ldr	r1, [r5, #0]
 800517e:	6823      	ldr	r3, [r4, #0]
 8005180:	f851 6b04 	ldr.w	r6, [r1], #4
 8005184:	6029      	str	r1, [r5, #0]
 8005186:	061d      	lsls	r5, r3, #24
 8005188:	d514      	bpl.n	80051b4 <_printf_i+0x1ac>
 800518a:	07df      	lsls	r7, r3, #31
 800518c:	bf44      	itt	mi
 800518e:	f043 0320 	orrmi.w	r3, r3, #32
 8005192:	6023      	strmi	r3, [r4, #0]
 8005194:	b91e      	cbnz	r6, 800519e <_printf_i+0x196>
 8005196:	6823      	ldr	r3, [r4, #0]
 8005198:	f023 0320 	bic.w	r3, r3, #32
 800519c:	6023      	str	r3, [r4, #0]
 800519e:	2310      	movs	r3, #16
 80051a0:	e7b0      	b.n	8005104 <_printf_i+0xfc>
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	f043 0320 	orr.w	r3, r3, #32
 80051a8:	6023      	str	r3, [r4, #0]
 80051aa:	2378      	movs	r3, #120	; 0x78
 80051ac:	4828      	ldr	r0, [pc, #160]	; (8005250 <_printf_i+0x248>)
 80051ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80051b2:	e7e3      	b.n	800517c <_printf_i+0x174>
 80051b4:	0659      	lsls	r1, r3, #25
 80051b6:	bf48      	it	mi
 80051b8:	b2b6      	uxthmi	r6, r6
 80051ba:	e7e6      	b.n	800518a <_printf_i+0x182>
 80051bc:	4615      	mov	r5, r2
 80051be:	e7bb      	b.n	8005138 <_printf_i+0x130>
 80051c0:	682b      	ldr	r3, [r5, #0]
 80051c2:	6826      	ldr	r6, [r4, #0]
 80051c4:	6961      	ldr	r1, [r4, #20]
 80051c6:	1d18      	adds	r0, r3, #4
 80051c8:	6028      	str	r0, [r5, #0]
 80051ca:	0635      	lsls	r5, r6, #24
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	d501      	bpl.n	80051d4 <_printf_i+0x1cc>
 80051d0:	6019      	str	r1, [r3, #0]
 80051d2:	e002      	b.n	80051da <_printf_i+0x1d2>
 80051d4:	0670      	lsls	r0, r6, #25
 80051d6:	d5fb      	bpl.n	80051d0 <_printf_i+0x1c8>
 80051d8:	8019      	strh	r1, [r3, #0]
 80051da:	2300      	movs	r3, #0
 80051dc:	6123      	str	r3, [r4, #16]
 80051de:	4615      	mov	r5, r2
 80051e0:	e7ba      	b.n	8005158 <_printf_i+0x150>
 80051e2:	682b      	ldr	r3, [r5, #0]
 80051e4:	1d1a      	adds	r2, r3, #4
 80051e6:	602a      	str	r2, [r5, #0]
 80051e8:	681d      	ldr	r5, [r3, #0]
 80051ea:	6862      	ldr	r2, [r4, #4]
 80051ec:	2100      	movs	r1, #0
 80051ee:	4628      	mov	r0, r5
 80051f0:	f7fb f816 	bl	8000220 <memchr>
 80051f4:	b108      	cbz	r0, 80051fa <_printf_i+0x1f2>
 80051f6:	1b40      	subs	r0, r0, r5
 80051f8:	6060      	str	r0, [r4, #4]
 80051fa:	6863      	ldr	r3, [r4, #4]
 80051fc:	6123      	str	r3, [r4, #16]
 80051fe:	2300      	movs	r3, #0
 8005200:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005204:	e7a8      	b.n	8005158 <_printf_i+0x150>
 8005206:	6923      	ldr	r3, [r4, #16]
 8005208:	462a      	mov	r2, r5
 800520a:	4649      	mov	r1, r9
 800520c:	4640      	mov	r0, r8
 800520e:	47d0      	blx	sl
 8005210:	3001      	adds	r0, #1
 8005212:	d0ab      	beq.n	800516c <_printf_i+0x164>
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	079b      	lsls	r3, r3, #30
 8005218:	d413      	bmi.n	8005242 <_printf_i+0x23a>
 800521a:	68e0      	ldr	r0, [r4, #12]
 800521c:	9b03      	ldr	r3, [sp, #12]
 800521e:	4298      	cmp	r0, r3
 8005220:	bfb8      	it	lt
 8005222:	4618      	movlt	r0, r3
 8005224:	e7a4      	b.n	8005170 <_printf_i+0x168>
 8005226:	2301      	movs	r3, #1
 8005228:	4632      	mov	r2, r6
 800522a:	4649      	mov	r1, r9
 800522c:	4640      	mov	r0, r8
 800522e:	47d0      	blx	sl
 8005230:	3001      	adds	r0, #1
 8005232:	d09b      	beq.n	800516c <_printf_i+0x164>
 8005234:	3501      	adds	r5, #1
 8005236:	68e3      	ldr	r3, [r4, #12]
 8005238:	9903      	ldr	r1, [sp, #12]
 800523a:	1a5b      	subs	r3, r3, r1
 800523c:	42ab      	cmp	r3, r5
 800523e:	dcf2      	bgt.n	8005226 <_printf_i+0x21e>
 8005240:	e7eb      	b.n	800521a <_printf_i+0x212>
 8005242:	2500      	movs	r5, #0
 8005244:	f104 0619 	add.w	r6, r4, #25
 8005248:	e7f5      	b.n	8005236 <_printf_i+0x22e>
 800524a:	bf00      	nop
 800524c:	08007ade 	.word	0x08007ade
 8005250:	08007aef 	.word	0x08007aef

08005254 <iprintf>:
 8005254:	b40f      	push	{r0, r1, r2, r3}
 8005256:	4b0a      	ldr	r3, [pc, #40]	; (8005280 <iprintf+0x2c>)
 8005258:	b513      	push	{r0, r1, r4, lr}
 800525a:	681c      	ldr	r4, [r3, #0]
 800525c:	b124      	cbz	r4, 8005268 <iprintf+0x14>
 800525e:	69a3      	ldr	r3, [r4, #24]
 8005260:	b913      	cbnz	r3, 8005268 <iprintf+0x14>
 8005262:	4620      	mov	r0, r4
 8005264:	f000 fee2 	bl	800602c <__sinit>
 8005268:	ab05      	add	r3, sp, #20
 800526a:	9a04      	ldr	r2, [sp, #16]
 800526c:	68a1      	ldr	r1, [r4, #8]
 800526e:	9301      	str	r3, [sp, #4]
 8005270:	4620      	mov	r0, r4
 8005272:	f001 fc3b 	bl	8006aec <_vfiprintf_r>
 8005276:	b002      	add	sp, #8
 8005278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800527c:	b004      	add	sp, #16
 800527e:	4770      	bx	lr
 8005280:	200000b4 	.word	0x200000b4

08005284 <quorem>:
 8005284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005288:	6903      	ldr	r3, [r0, #16]
 800528a:	690c      	ldr	r4, [r1, #16]
 800528c:	42a3      	cmp	r3, r4
 800528e:	4607      	mov	r7, r0
 8005290:	f2c0 8081 	blt.w	8005396 <quorem+0x112>
 8005294:	3c01      	subs	r4, #1
 8005296:	f101 0814 	add.w	r8, r1, #20
 800529a:	f100 0514 	add.w	r5, r0, #20
 800529e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052a2:	9301      	str	r3, [sp, #4]
 80052a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80052a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052ac:	3301      	adds	r3, #1
 80052ae:	429a      	cmp	r2, r3
 80052b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80052b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80052b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80052bc:	d331      	bcc.n	8005322 <quorem+0x9e>
 80052be:	f04f 0e00 	mov.w	lr, #0
 80052c2:	4640      	mov	r0, r8
 80052c4:	46ac      	mov	ip, r5
 80052c6:	46f2      	mov	sl, lr
 80052c8:	f850 2b04 	ldr.w	r2, [r0], #4
 80052cc:	b293      	uxth	r3, r2
 80052ce:	fb06 e303 	mla	r3, r6, r3, lr
 80052d2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	ebaa 0303 	sub.w	r3, sl, r3
 80052dc:	f8dc a000 	ldr.w	sl, [ip]
 80052e0:	0c12      	lsrs	r2, r2, #16
 80052e2:	fa13 f38a 	uxtah	r3, r3, sl
 80052e6:	fb06 e202 	mla	r2, r6, r2, lr
 80052ea:	9300      	str	r3, [sp, #0]
 80052ec:	9b00      	ldr	r3, [sp, #0]
 80052ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80052f2:	b292      	uxth	r2, r2
 80052f4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80052f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052fc:	f8bd 3000 	ldrh.w	r3, [sp]
 8005300:	4581      	cmp	r9, r0
 8005302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005306:	f84c 3b04 	str.w	r3, [ip], #4
 800530a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800530e:	d2db      	bcs.n	80052c8 <quorem+0x44>
 8005310:	f855 300b 	ldr.w	r3, [r5, fp]
 8005314:	b92b      	cbnz	r3, 8005322 <quorem+0x9e>
 8005316:	9b01      	ldr	r3, [sp, #4]
 8005318:	3b04      	subs	r3, #4
 800531a:	429d      	cmp	r5, r3
 800531c:	461a      	mov	r2, r3
 800531e:	d32e      	bcc.n	800537e <quorem+0xfa>
 8005320:	613c      	str	r4, [r7, #16]
 8005322:	4638      	mov	r0, r7
 8005324:	f001 f9c0 	bl	80066a8 <__mcmp>
 8005328:	2800      	cmp	r0, #0
 800532a:	db24      	blt.n	8005376 <quorem+0xf2>
 800532c:	3601      	adds	r6, #1
 800532e:	4628      	mov	r0, r5
 8005330:	f04f 0c00 	mov.w	ip, #0
 8005334:	f858 2b04 	ldr.w	r2, [r8], #4
 8005338:	f8d0 e000 	ldr.w	lr, [r0]
 800533c:	b293      	uxth	r3, r2
 800533e:	ebac 0303 	sub.w	r3, ip, r3
 8005342:	0c12      	lsrs	r2, r2, #16
 8005344:	fa13 f38e 	uxtah	r3, r3, lr
 8005348:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800534c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005350:	b29b      	uxth	r3, r3
 8005352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005356:	45c1      	cmp	r9, r8
 8005358:	f840 3b04 	str.w	r3, [r0], #4
 800535c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005360:	d2e8      	bcs.n	8005334 <quorem+0xb0>
 8005362:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005366:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800536a:	b922      	cbnz	r2, 8005376 <quorem+0xf2>
 800536c:	3b04      	subs	r3, #4
 800536e:	429d      	cmp	r5, r3
 8005370:	461a      	mov	r2, r3
 8005372:	d30a      	bcc.n	800538a <quorem+0x106>
 8005374:	613c      	str	r4, [r7, #16]
 8005376:	4630      	mov	r0, r6
 8005378:	b003      	add	sp, #12
 800537a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800537e:	6812      	ldr	r2, [r2, #0]
 8005380:	3b04      	subs	r3, #4
 8005382:	2a00      	cmp	r2, #0
 8005384:	d1cc      	bne.n	8005320 <quorem+0x9c>
 8005386:	3c01      	subs	r4, #1
 8005388:	e7c7      	b.n	800531a <quorem+0x96>
 800538a:	6812      	ldr	r2, [r2, #0]
 800538c:	3b04      	subs	r3, #4
 800538e:	2a00      	cmp	r2, #0
 8005390:	d1f0      	bne.n	8005374 <quorem+0xf0>
 8005392:	3c01      	subs	r4, #1
 8005394:	e7eb      	b.n	800536e <quorem+0xea>
 8005396:	2000      	movs	r0, #0
 8005398:	e7ee      	b.n	8005378 <quorem+0xf4>
 800539a:	0000      	movs	r0, r0
 800539c:	0000      	movs	r0, r0
	...

080053a0 <_dtoa_r>:
 80053a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a4:	ed2d 8b04 	vpush	{d8-d9}
 80053a8:	ec57 6b10 	vmov	r6, r7, d0
 80053ac:	b093      	sub	sp, #76	; 0x4c
 80053ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80053b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80053b4:	9106      	str	r1, [sp, #24]
 80053b6:	ee10 aa10 	vmov	sl, s0
 80053ba:	4604      	mov	r4, r0
 80053bc:	9209      	str	r2, [sp, #36]	; 0x24
 80053be:	930c      	str	r3, [sp, #48]	; 0x30
 80053c0:	46bb      	mov	fp, r7
 80053c2:	b975      	cbnz	r5, 80053e2 <_dtoa_r+0x42>
 80053c4:	2010      	movs	r0, #16
 80053c6:	f000 fed7 	bl	8006178 <malloc>
 80053ca:	4602      	mov	r2, r0
 80053cc:	6260      	str	r0, [r4, #36]	; 0x24
 80053ce:	b920      	cbnz	r0, 80053da <_dtoa_r+0x3a>
 80053d0:	4ba7      	ldr	r3, [pc, #668]	; (8005670 <_dtoa_r+0x2d0>)
 80053d2:	21ea      	movs	r1, #234	; 0xea
 80053d4:	48a7      	ldr	r0, [pc, #668]	; (8005674 <_dtoa_r+0x2d4>)
 80053d6:	f001 fddf 	bl	8006f98 <__assert_func>
 80053da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80053de:	6005      	str	r5, [r0, #0]
 80053e0:	60c5      	str	r5, [r0, #12]
 80053e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053e4:	6819      	ldr	r1, [r3, #0]
 80053e6:	b151      	cbz	r1, 80053fe <_dtoa_r+0x5e>
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	604a      	str	r2, [r1, #4]
 80053ec:	2301      	movs	r3, #1
 80053ee:	4093      	lsls	r3, r2
 80053f0:	608b      	str	r3, [r1, #8]
 80053f2:	4620      	mov	r0, r4
 80053f4:	f000 ff16 	bl	8006224 <_Bfree>
 80053f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053fa:	2200      	movs	r2, #0
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	1e3b      	subs	r3, r7, #0
 8005400:	bfaa      	itet	ge
 8005402:	2300      	movge	r3, #0
 8005404:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005408:	f8c8 3000 	strge.w	r3, [r8]
 800540c:	4b9a      	ldr	r3, [pc, #616]	; (8005678 <_dtoa_r+0x2d8>)
 800540e:	bfbc      	itt	lt
 8005410:	2201      	movlt	r2, #1
 8005412:	f8c8 2000 	strlt.w	r2, [r8]
 8005416:	ea33 030b 	bics.w	r3, r3, fp
 800541a:	d11b      	bne.n	8005454 <_dtoa_r+0xb4>
 800541c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800541e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005422:	6013      	str	r3, [r2, #0]
 8005424:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005428:	4333      	orrs	r3, r6
 800542a:	f000 8592 	beq.w	8005f52 <_dtoa_r+0xbb2>
 800542e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005430:	b963      	cbnz	r3, 800544c <_dtoa_r+0xac>
 8005432:	4b92      	ldr	r3, [pc, #584]	; (800567c <_dtoa_r+0x2dc>)
 8005434:	e022      	b.n	800547c <_dtoa_r+0xdc>
 8005436:	4b92      	ldr	r3, [pc, #584]	; (8005680 <_dtoa_r+0x2e0>)
 8005438:	9301      	str	r3, [sp, #4]
 800543a:	3308      	adds	r3, #8
 800543c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800543e:	6013      	str	r3, [r2, #0]
 8005440:	9801      	ldr	r0, [sp, #4]
 8005442:	b013      	add	sp, #76	; 0x4c
 8005444:	ecbd 8b04 	vpop	{d8-d9}
 8005448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800544c:	4b8b      	ldr	r3, [pc, #556]	; (800567c <_dtoa_r+0x2dc>)
 800544e:	9301      	str	r3, [sp, #4]
 8005450:	3303      	adds	r3, #3
 8005452:	e7f3      	b.n	800543c <_dtoa_r+0x9c>
 8005454:	2200      	movs	r2, #0
 8005456:	2300      	movs	r3, #0
 8005458:	4650      	mov	r0, sl
 800545a:	4659      	mov	r1, fp
 800545c:	f7fb fb54 	bl	8000b08 <__aeabi_dcmpeq>
 8005460:	ec4b ab19 	vmov	d9, sl, fp
 8005464:	4680      	mov	r8, r0
 8005466:	b158      	cbz	r0, 8005480 <_dtoa_r+0xe0>
 8005468:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800546a:	2301      	movs	r3, #1
 800546c:	6013      	str	r3, [r2, #0]
 800546e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 856b 	beq.w	8005f4c <_dtoa_r+0xbac>
 8005476:	4883      	ldr	r0, [pc, #524]	; (8005684 <_dtoa_r+0x2e4>)
 8005478:	6018      	str	r0, [r3, #0]
 800547a:	1e43      	subs	r3, r0, #1
 800547c:	9301      	str	r3, [sp, #4]
 800547e:	e7df      	b.n	8005440 <_dtoa_r+0xa0>
 8005480:	ec4b ab10 	vmov	d0, sl, fp
 8005484:	aa10      	add	r2, sp, #64	; 0x40
 8005486:	a911      	add	r1, sp, #68	; 0x44
 8005488:	4620      	mov	r0, r4
 800548a:	f001 f9b3 	bl	80067f4 <__d2b>
 800548e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005492:	ee08 0a10 	vmov	s16, r0
 8005496:	2d00      	cmp	r5, #0
 8005498:	f000 8084 	beq.w	80055a4 <_dtoa_r+0x204>
 800549c:	ee19 3a90 	vmov	r3, s19
 80054a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80054a8:	4656      	mov	r6, sl
 80054aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80054ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80054b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80054b6:	4b74      	ldr	r3, [pc, #464]	; (8005688 <_dtoa_r+0x2e8>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	4630      	mov	r0, r6
 80054bc:	4639      	mov	r1, r7
 80054be:	f7fa ff03 	bl	80002c8 <__aeabi_dsub>
 80054c2:	a365      	add	r3, pc, #404	; (adr r3, 8005658 <_dtoa_r+0x2b8>)
 80054c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c8:	f7fb f8b6 	bl	8000638 <__aeabi_dmul>
 80054cc:	a364      	add	r3, pc, #400	; (adr r3, 8005660 <_dtoa_r+0x2c0>)
 80054ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d2:	f7fa fefb 	bl	80002cc <__adddf3>
 80054d6:	4606      	mov	r6, r0
 80054d8:	4628      	mov	r0, r5
 80054da:	460f      	mov	r7, r1
 80054dc:	f7fb f842 	bl	8000564 <__aeabi_i2d>
 80054e0:	a361      	add	r3, pc, #388	; (adr r3, 8005668 <_dtoa_r+0x2c8>)
 80054e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e6:	f7fb f8a7 	bl	8000638 <__aeabi_dmul>
 80054ea:	4602      	mov	r2, r0
 80054ec:	460b      	mov	r3, r1
 80054ee:	4630      	mov	r0, r6
 80054f0:	4639      	mov	r1, r7
 80054f2:	f7fa feeb 	bl	80002cc <__adddf3>
 80054f6:	4606      	mov	r6, r0
 80054f8:	460f      	mov	r7, r1
 80054fa:	f7fb fb4d 	bl	8000b98 <__aeabi_d2iz>
 80054fe:	2200      	movs	r2, #0
 8005500:	9000      	str	r0, [sp, #0]
 8005502:	2300      	movs	r3, #0
 8005504:	4630      	mov	r0, r6
 8005506:	4639      	mov	r1, r7
 8005508:	f7fb fb08 	bl	8000b1c <__aeabi_dcmplt>
 800550c:	b150      	cbz	r0, 8005524 <_dtoa_r+0x184>
 800550e:	9800      	ldr	r0, [sp, #0]
 8005510:	f7fb f828 	bl	8000564 <__aeabi_i2d>
 8005514:	4632      	mov	r2, r6
 8005516:	463b      	mov	r3, r7
 8005518:	f7fb faf6 	bl	8000b08 <__aeabi_dcmpeq>
 800551c:	b910      	cbnz	r0, 8005524 <_dtoa_r+0x184>
 800551e:	9b00      	ldr	r3, [sp, #0]
 8005520:	3b01      	subs	r3, #1
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	9b00      	ldr	r3, [sp, #0]
 8005526:	2b16      	cmp	r3, #22
 8005528:	d85a      	bhi.n	80055e0 <_dtoa_r+0x240>
 800552a:	9a00      	ldr	r2, [sp, #0]
 800552c:	4b57      	ldr	r3, [pc, #348]	; (800568c <_dtoa_r+0x2ec>)
 800552e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005536:	ec51 0b19 	vmov	r0, r1, d9
 800553a:	f7fb faef 	bl	8000b1c <__aeabi_dcmplt>
 800553e:	2800      	cmp	r0, #0
 8005540:	d050      	beq.n	80055e4 <_dtoa_r+0x244>
 8005542:	9b00      	ldr	r3, [sp, #0]
 8005544:	3b01      	subs	r3, #1
 8005546:	9300      	str	r3, [sp, #0]
 8005548:	2300      	movs	r3, #0
 800554a:	930b      	str	r3, [sp, #44]	; 0x2c
 800554c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800554e:	1b5d      	subs	r5, r3, r5
 8005550:	1e6b      	subs	r3, r5, #1
 8005552:	9305      	str	r3, [sp, #20]
 8005554:	bf45      	ittet	mi
 8005556:	f1c5 0301 	rsbmi	r3, r5, #1
 800555a:	9304      	strmi	r3, [sp, #16]
 800555c:	2300      	movpl	r3, #0
 800555e:	2300      	movmi	r3, #0
 8005560:	bf4c      	ite	mi
 8005562:	9305      	strmi	r3, [sp, #20]
 8005564:	9304      	strpl	r3, [sp, #16]
 8005566:	9b00      	ldr	r3, [sp, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	db3d      	blt.n	80055e8 <_dtoa_r+0x248>
 800556c:	9b05      	ldr	r3, [sp, #20]
 800556e:	9a00      	ldr	r2, [sp, #0]
 8005570:	920a      	str	r2, [sp, #40]	; 0x28
 8005572:	4413      	add	r3, r2
 8005574:	9305      	str	r3, [sp, #20]
 8005576:	2300      	movs	r3, #0
 8005578:	9307      	str	r3, [sp, #28]
 800557a:	9b06      	ldr	r3, [sp, #24]
 800557c:	2b09      	cmp	r3, #9
 800557e:	f200 8089 	bhi.w	8005694 <_dtoa_r+0x2f4>
 8005582:	2b05      	cmp	r3, #5
 8005584:	bfc4      	itt	gt
 8005586:	3b04      	subgt	r3, #4
 8005588:	9306      	strgt	r3, [sp, #24]
 800558a:	9b06      	ldr	r3, [sp, #24]
 800558c:	f1a3 0302 	sub.w	r3, r3, #2
 8005590:	bfcc      	ite	gt
 8005592:	2500      	movgt	r5, #0
 8005594:	2501      	movle	r5, #1
 8005596:	2b03      	cmp	r3, #3
 8005598:	f200 8087 	bhi.w	80056aa <_dtoa_r+0x30a>
 800559c:	e8df f003 	tbb	[pc, r3]
 80055a0:	59383a2d 	.word	0x59383a2d
 80055a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80055a8:	441d      	add	r5, r3
 80055aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80055ae:	2b20      	cmp	r3, #32
 80055b0:	bfc1      	itttt	gt
 80055b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80055b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80055ba:	fa0b f303 	lslgt.w	r3, fp, r3
 80055be:	fa26 f000 	lsrgt.w	r0, r6, r0
 80055c2:	bfda      	itte	le
 80055c4:	f1c3 0320 	rsble	r3, r3, #32
 80055c8:	fa06 f003 	lslle.w	r0, r6, r3
 80055cc:	4318      	orrgt	r0, r3
 80055ce:	f7fa ffb9 	bl	8000544 <__aeabi_ui2d>
 80055d2:	2301      	movs	r3, #1
 80055d4:	4606      	mov	r6, r0
 80055d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80055da:	3d01      	subs	r5, #1
 80055dc:	930e      	str	r3, [sp, #56]	; 0x38
 80055de:	e76a      	b.n	80054b6 <_dtoa_r+0x116>
 80055e0:	2301      	movs	r3, #1
 80055e2:	e7b2      	b.n	800554a <_dtoa_r+0x1aa>
 80055e4:	900b      	str	r0, [sp, #44]	; 0x2c
 80055e6:	e7b1      	b.n	800554c <_dtoa_r+0x1ac>
 80055e8:	9b04      	ldr	r3, [sp, #16]
 80055ea:	9a00      	ldr	r2, [sp, #0]
 80055ec:	1a9b      	subs	r3, r3, r2
 80055ee:	9304      	str	r3, [sp, #16]
 80055f0:	4253      	negs	r3, r2
 80055f2:	9307      	str	r3, [sp, #28]
 80055f4:	2300      	movs	r3, #0
 80055f6:	930a      	str	r3, [sp, #40]	; 0x28
 80055f8:	e7bf      	b.n	800557a <_dtoa_r+0x1da>
 80055fa:	2300      	movs	r3, #0
 80055fc:	9308      	str	r3, [sp, #32]
 80055fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005600:	2b00      	cmp	r3, #0
 8005602:	dc55      	bgt.n	80056b0 <_dtoa_r+0x310>
 8005604:	2301      	movs	r3, #1
 8005606:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800560a:	461a      	mov	r2, r3
 800560c:	9209      	str	r2, [sp, #36]	; 0x24
 800560e:	e00c      	b.n	800562a <_dtoa_r+0x28a>
 8005610:	2301      	movs	r3, #1
 8005612:	e7f3      	b.n	80055fc <_dtoa_r+0x25c>
 8005614:	2300      	movs	r3, #0
 8005616:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005618:	9308      	str	r3, [sp, #32]
 800561a:	9b00      	ldr	r3, [sp, #0]
 800561c:	4413      	add	r3, r2
 800561e:	9302      	str	r3, [sp, #8]
 8005620:	3301      	adds	r3, #1
 8005622:	2b01      	cmp	r3, #1
 8005624:	9303      	str	r3, [sp, #12]
 8005626:	bfb8      	it	lt
 8005628:	2301      	movlt	r3, #1
 800562a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800562c:	2200      	movs	r2, #0
 800562e:	6042      	str	r2, [r0, #4]
 8005630:	2204      	movs	r2, #4
 8005632:	f102 0614 	add.w	r6, r2, #20
 8005636:	429e      	cmp	r6, r3
 8005638:	6841      	ldr	r1, [r0, #4]
 800563a:	d93d      	bls.n	80056b8 <_dtoa_r+0x318>
 800563c:	4620      	mov	r0, r4
 800563e:	f000 fdb1 	bl	80061a4 <_Balloc>
 8005642:	9001      	str	r0, [sp, #4]
 8005644:	2800      	cmp	r0, #0
 8005646:	d13b      	bne.n	80056c0 <_dtoa_r+0x320>
 8005648:	4b11      	ldr	r3, [pc, #68]	; (8005690 <_dtoa_r+0x2f0>)
 800564a:	4602      	mov	r2, r0
 800564c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005650:	e6c0      	b.n	80053d4 <_dtoa_r+0x34>
 8005652:	2301      	movs	r3, #1
 8005654:	e7df      	b.n	8005616 <_dtoa_r+0x276>
 8005656:	bf00      	nop
 8005658:	636f4361 	.word	0x636f4361
 800565c:	3fd287a7 	.word	0x3fd287a7
 8005660:	8b60c8b3 	.word	0x8b60c8b3
 8005664:	3fc68a28 	.word	0x3fc68a28
 8005668:	509f79fb 	.word	0x509f79fb
 800566c:	3fd34413 	.word	0x3fd34413
 8005670:	08007b0d 	.word	0x08007b0d
 8005674:	08007b24 	.word	0x08007b24
 8005678:	7ff00000 	.word	0x7ff00000
 800567c:	08007b09 	.word	0x08007b09
 8005680:	08007b00 	.word	0x08007b00
 8005684:	08007add 	.word	0x08007add
 8005688:	3ff80000 	.word	0x3ff80000
 800568c:	08007c78 	.word	0x08007c78
 8005690:	08007b7f 	.word	0x08007b7f
 8005694:	2501      	movs	r5, #1
 8005696:	2300      	movs	r3, #0
 8005698:	9306      	str	r3, [sp, #24]
 800569a:	9508      	str	r5, [sp, #32]
 800569c:	f04f 33ff 	mov.w	r3, #4294967295
 80056a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80056a4:	2200      	movs	r2, #0
 80056a6:	2312      	movs	r3, #18
 80056a8:	e7b0      	b.n	800560c <_dtoa_r+0x26c>
 80056aa:	2301      	movs	r3, #1
 80056ac:	9308      	str	r3, [sp, #32]
 80056ae:	e7f5      	b.n	800569c <_dtoa_r+0x2fc>
 80056b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80056b6:	e7b8      	b.n	800562a <_dtoa_r+0x28a>
 80056b8:	3101      	adds	r1, #1
 80056ba:	6041      	str	r1, [r0, #4]
 80056bc:	0052      	lsls	r2, r2, #1
 80056be:	e7b8      	b.n	8005632 <_dtoa_r+0x292>
 80056c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056c2:	9a01      	ldr	r2, [sp, #4]
 80056c4:	601a      	str	r2, [r3, #0]
 80056c6:	9b03      	ldr	r3, [sp, #12]
 80056c8:	2b0e      	cmp	r3, #14
 80056ca:	f200 809d 	bhi.w	8005808 <_dtoa_r+0x468>
 80056ce:	2d00      	cmp	r5, #0
 80056d0:	f000 809a 	beq.w	8005808 <_dtoa_r+0x468>
 80056d4:	9b00      	ldr	r3, [sp, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	dd32      	ble.n	8005740 <_dtoa_r+0x3a0>
 80056da:	4ab7      	ldr	r2, [pc, #732]	; (80059b8 <_dtoa_r+0x618>)
 80056dc:	f003 030f 	and.w	r3, r3, #15
 80056e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80056e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80056e8:	9b00      	ldr	r3, [sp, #0]
 80056ea:	05d8      	lsls	r0, r3, #23
 80056ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 80056f0:	d516      	bpl.n	8005720 <_dtoa_r+0x380>
 80056f2:	4bb2      	ldr	r3, [pc, #712]	; (80059bc <_dtoa_r+0x61c>)
 80056f4:	ec51 0b19 	vmov	r0, r1, d9
 80056f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80056fc:	f7fb f8c6 	bl	800088c <__aeabi_ddiv>
 8005700:	f007 070f 	and.w	r7, r7, #15
 8005704:	4682      	mov	sl, r0
 8005706:	468b      	mov	fp, r1
 8005708:	2503      	movs	r5, #3
 800570a:	4eac      	ldr	r6, [pc, #688]	; (80059bc <_dtoa_r+0x61c>)
 800570c:	b957      	cbnz	r7, 8005724 <_dtoa_r+0x384>
 800570e:	4642      	mov	r2, r8
 8005710:	464b      	mov	r3, r9
 8005712:	4650      	mov	r0, sl
 8005714:	4659      	mov	r1, fp
 8005716:	f7fb f8b9 	bl	800088c <__aeabi_ddiv>
 800571a:	4682      	mov	sl, r0
 800571c:	468b      	mov	fp, r1
 800571e:	e028      	b.n	8005772 <_dtoa_r+0x3d2>
 8005720:	2502      	movs	r5, #2
 8005722:	e7f2      	b.n	800570a <_dtoa_r+0x36a>
 8005724:	07f9      	lsls	r1, r7, #31
 8005726:	d508      	bpl.n	800573a <_dtoa_r+0x39a>
 8005728:	4640      	mov	r0, r8
 800572a:	4649      	mov	r1, r9
 800572c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005730:	f7fa ff82 	bl	8000638 <__aeabi_dmul>
 8005734:	3501      	adds	r5, #1
 8005736:	4680      	mov	r8, r0
 8005738:	4689      	mov	r9, r1
 800573a:	107f      	asrs	r7, r7, #1
 800573c:	3608      	adds	r6, #8
 800573e:	e7e5      	b.n	800570c <_dtoa_r+0x36c>
 8005740:	f000 809b 	beq.w	800587a <_dtoa_r+0x4da>
 8005744:	9b00      	ldr	r3, [sp, #0]
 8005746:	4f9d      	ldr	r7, [pc, #628]	; (80059bc <_dtoa_r+0x61c>)
 8005748:	425e      	negs	r6, r3
 800574a:	4b9b      	ldr	r3, [pc, #620]	; (80059b8 <_dtoa_r+0x618>)
 800574c:	f006 020f 	and.w	r2, r6, #15
 8005750:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005758:	ec51 0b19 	vmov	r0, r1, d9
 800575c:	f7fa ff6c 	bl	8000638 <__aeabi_dmul>
 8005760:	1136      	asrs	r6, r6, #4
 8005762:	4682      	mov	sl, r0
 8005764:	468b      	mov	fp, r1
 8005766:	2300      	movs	r3, #0
 8005768:	2502      	movs	r5, #2
 800576a:	2e00      	cmp	r6, #0
 800576c:	d17a      	bne.n	8005864 <_dtoa_r+0x4c4>
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1d3      	bne.n	800571a <_dtoa_r+0x37a>
 8005772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 8082 	beq.w	800587e <_dtoa_r+0x4de>
 800577a:	4b91      	ldr	r3, [pc, #580]	; (80059c0 <_dtoa_r+0x620>)
 800577c:	2200      	movs	r2, #0
 800577e:	4650      	mov	r0, sl
 8005780:	4659      	mov	r1, fp
 8005782:	f7fb f9cb 	bl	8000b1c <__aeabi_dcmplt>
 8005786:	2800      	cmp	r0, #0
 8005788:	d079      	beq.n	800587e <_dtoa_r+0x4de>
 800578a:	9b03      	ldr	r3, [sp, #12]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d076      	beq.n	800587e <_dtoa_r+0x4de>
 8005790:	9b02      	ldr	r3, [sp, #8]
 8005792:	2b00      	cmp	r3, #0
 8005794:	dd36      	ble.n	8005804 <_dtoa_r+0x464>
 8005796:	9b00      	ldr	r3, [sp, #0]
 8005798:	4650      	mov	r0, sl
 800579a:	4659      	mov	r1, fp
 800579c:	1e5f      	subs	r7, r3, #1
 800579e:	2200      	movs	r2, #0
 80057a0:	4b88      	ldr	r3, [pc, #544]	; (80059c4 <_dtoa_r+0x624>)
 80057a2:	f7fa ff49 	bl	8000638 <__aeabi_dmul>
 80057a6:	9e02      	ldr	r6, [sp, #8]
 80057a8:	4682      	mov	sl, r0
 80057aa:	468b      	mov	fp, r1
 80057ac:	3501      	adds	r5, #1
 80057ae:	4628      	mov	r0, r5
 80057b0:	f7fa fed8 	bl	8000564 <__aeabi_i2d>
 80057b4:	4652      	mov	r2, sl
 80057b6:	465b      	mov	r3, fp
 80057b8:	f7fa ff3e 	bl	8000638 <__aeabi_dmul>
 80057bc:	4b82      	ldr	r3, [pc, #520]	; (80059c8 <_dtoa_r+0x628>)
 80057be:	2200      	movs	r2, #0
 80057c0:	f7fa fd84 	bl	80002cc <__adddf3>
 80057c4:	46d0      	mov	r8, sl
 80057c6:	46d9      	mov	r9, fp
 80057c8:	4682      	mov	sl, r0
 80057ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80057ce:	2e00      	cmp	r6, #0
 80057d0:	d158      	bne.n	8005884 <_dtoa_r+0x4e4>
 80057d2:	4b7e      	ldr	r3, [pc, #504]	; (80059cc <_dtoa_r+0x62c>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	4640      	mov	r0, r8
 80057d8:	4649      	mov	r1, r9
 80057da:	f7fa fd75 	bl	80002c8 <__aeabi_dsub>
 80057de:	4652      	mov	r2, sl
 80057e0:	465b      	mov	r3, fp
 80057e2:	4680      	mov	r8, r0
 80057e4:	4689      	mov	r9, r1
 80057e6:	f7fb f9b7 	bl	8000b58 <__aeabi_dcmpgt>
 80057ea:	2800      	cmp	r0, #0
 80057ec:	f040 8295 	bne.w	8005d1a <_dtoa_r+0x97a>
 80057f0:	4652      	mov	r2, sl
 80057f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80057f6:	4640      	mov	r0, r8
 80057f8:	4649      	mov	r1, r9
 80057fa:	f7fb f98f 	bl	8000b1c <__aeabi_dcmplt>
 80057fe:	2800      	cmp	r0, #0
 8005800:	f040 8289 	bne.w	8005d16 <_dtoa_r+0x976>
 8005804:	ec5b ab19 	vmov	sl, fp, d9
 8005808:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800580a:	2b00      	cmp	r3, #0
 800580c:	f2c0 8148 	blt.w	8005aa0 <_dtoa_r+0x700>
 8005810:	9a00      	ldr	r2, [sp, #0]
 8005812:	2a0e      	cmp	r2, #14
 8005814:	f300 8144 	bgt.w	8005aa0 <_dtoa_r+0x700>
 8005818:	4b67      	ldr	r3, [pc, #412]	; (80059b8 <_dtoa_r+0x618>)
 800581a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800581e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005824:	2b00      	cmp	r3, #0
 8005826:	f280 80d5 	bge.w	80059d4 <_dtoa_r+0x634>
 800582a:	9b03      	ldr	r3, [sp, #12]
 800582c:	2b00      	cmp	r3, #0
 800582e:	f300 80d1 	bgt.w	80059d4 <_dtoa_r+0x634>
 8005832:	f040 826f 	bne.w	8005d14 <_dtoa_r+0x974>
 8005836:	4b65      	ldr	r3, [pc, #404]	; (80059cc <_dtoa_r+0x62c>)
 8005838:	2200      	movs	r2, #0
 800583a:	4640      	mov	r0, r8
 800583c:	4649      	mov	r1, r9
 800583e:	f7fa fefb 	bl	8000638 <__aeabi_dmul>
 8005842:	4652      	mov	r2, sl
 8005844:	465b      	mov	r3, fp
 8005846:	f7fb f97d 	bl	8000b44 <__aeabi_dcmpge>
 800584a:	9e03      	ldr	r6, [sp, #12]
 800584c:	4637      	mov	r7, r6
 800584e:	2800      	cmp	r0, #0
 8005850:	f040 8245 	bne.w	8005cde <_dtoa_r+0x93e>
 8005854:	9d01      	ldr	r5, [sp, #4]
 8005856:	2331      	movs	r3, #49	; 0x31
 8005858:	f805 3b01 	strb.w	r3, [r5], #1
 800585c:	9b00      	ldr	r3, [sp, #0]
 800585e:	3301      	adds	r3, #1
 8005860:	9300      	str	r3, [sp, #0]
 8005862:	e240      	b.n	8005ce6 <_dtoa_r+0x946>
 8005864:	07f2      	lsls	r2, r6, #31
 8005866:	d505      	bpl.n	8005874 <_dtoa_r+0x4d4>
 8005868:	e9d7 2300 	ldrd	r2, r3, [r7]
 800586c:	f7fa fee4 	bl	8000638 <__aeabi_dmul>
 8005870:	3501      	adds	r5, #1
 8005872:	2301      	movs	r3, #1
 8005874:	1076      	asrs	r6, r6, #1
 8005876:	3708      	adds	r7, #8
 8005878:	e777      	b.n	800576a <_dtoa_r+0x3ca>
 800587a:	2502      	movs	r5, #2
 800587c:	e779      	b.n	8005772 <_dtoa_r+0x3d2>
 800587e:	9f00      	ldr	r7, [sp, #0]
 8005880:	9e03      	ldr	r6, [sp, #12]
 8005882:	e794      	b.n	80057ae <_dtoa_r+0x40e>
 8005884:	9901      	ldr	r1, [sp, #4]
 8005886:	4b4c      	ldr	r3, [pc, #304]	; (80059b8 <_dtoa_r+0x618>)
 8005888:	4431      	add	r1, r6
 800588a:	910d      	str	r1, [sp, #52]	; 0x34
 800588c:	9908      	ldr	r1, [sp, #32]
 800588e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005892:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005896:	2900      	cmp	r1, #0
 8005898:	d043      	beq.n	8005922 <_dtoa_r+0x582>
 800589a:	494d      	ldr	r1, [pc, #308]	; (80059d0 <_dtoa_r+0x630>)
 800589c:	2000      	movs	r0, #0
 800589e:	f7fa fff5 	bl	800088c <__aeabi_ddiv>
 80058a2:	4652      	mov	r2, sl
 80058a4:	465b      	mov	r3, fp
 80058a6:	f7fa fd0f 	bl	80002c8 <__aeabi_dsub>
 80058aa:	9d01      	ldr	r5, [sp, #4]
 80058ac:	4682      	mov	sl, r0
 80058ae:	468b      	mov	fp, r1
 80058b0:	4649      	mov	r1, r9
 80058b2:	4640      	mov	r0, r8
 80058b4:	f7fb f970 	bl	8000b98 <__aeabi_d2iz>
 80058b8:	4606      	mov	r6, r0
 80058ba:	f7fa fe53 	bl	8000564 <__aeabi_i2d>
 80058be:	4602      	mov	r2, r0
 80058c0:	460b      	mov	r3, r1
 80058c2:	4640      	mov	r0, r8
 80058c4:	4649      	mov	r1, r9
 80058c6:	f7fa fcff 	bl	80002c8 <__aeabi_dsub>
 80058ca:	3630      	adds	r6, #48	; 0x30
 80058cc:	f805 6b01 	strb.w	r6, [r5], #1
 80058d0:	4652      	mov	r2, sl
 80058d2:	465b      	mov	r3, fp
 80058d4:	4680      	mov	r8, r0
 80058d6:	4689      	mov	r9, r1
 80058d8:	f7fb f920 	bl	8000b1c <__aeabi_dcmplt>
 80058dc:	2800      	cmp	r0, #0
 80058de:	d163      	bne.n	80059a8 <_dtoa_r+0x608>
 80058e0:	4642      	mov	r2, r8
 80058e2:	464b      	mov	r3, r9
 80058e4:	4936      	ldr	r1, [pc, #216]	; (80059c0 <_dtoa_r+0x620>)
 80058e6:	2000      	movs	r0, #0
 80058e8:	f7fa fcee 	bl	80002c8 <__aeabi_dsub>
 80058ec:	4652      	mov	r2, sl
 80058ee:	465b      	mov	r3, fp
 80058f0:	f7fb f914 	bl	8000b1c <__aeabi_dcmplt>
 80058f4:	2800      	cmp	r0, #0
 80058f6:	f040 80b5 	bne.w	8005a64 <_dtoa_r+0x6c4>
 80058fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058fc:	429d      	cmp	r5, r3
 80058fe:	d081      	beq.n	8005804 <_dtoa_r+0x464>
 8005900:	4b30      	ldr	r3, [pc, #192]	; (80059c4 <_dtoa_r+0x624>)
 8005902:	2200      	movs	r2, #0
 8005904:	4650      	mov	r0, sl
 8005906:	4659      	mov	r1, fp
 8005908:	f7fa fe96 	bl	8000638 <__aeabi_dmul>
 800590c:	4b2d      	ldr	r3, [pc, #180]	; (80059c4 <_dtoa_r+0x624>)
 800590e:	4682      	mov	sl, r0
 8005910:	468b      	mov	fp, r1
 8005912:	4640      	mov	r0, r8
 8005914:	4649      	mov	r1, r9
 8005916:	2200      	movs	r2, #0
 8005918:	f7fa fe8e 	bl	8000638 <__aeabi_dmul>
 800591c:	4680      	mov	r8, r0
 800591e:	4689      	mov	r9, r1
 8005920:	e7c6      	b.n	80058b0 <_dtoa_r+0x510>
 8005922:	4650      	mov	r0, sl
 8005924:	4659      	mov	r1, fp
 8005926:	f7fa fe87 	bl	8000638 <__aeabi_dmul>
 800592a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800592c:	9d01      	ldr	r5, [sp, #4]
 800592e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005930:	4682      	mov	sl, r0
 8005932:	468b      	mov	fp, r1
 8005934:	4649      	mov	r1, r9
 8005936:	4640      	mov	r0, r8
 8005938:	f7fb f92e 	bl	8000b98 <__aeabi_d2iz>
 800593c:	4606      	mov	r6, r0
 800593e:	f7fa fe11 	bl	8000564 <__aeabi_i2d>
 8005942:	3630      	adds	r6, #48	; 0x30
 8005944:	4602      	mov	r2, r0
 8005946:	460b      	mov	r3, r1
 8005948:	4640      	mov	r0, r8
 800594a:	4649      	mov	r1, r9
 800594c:	f7fa fcbc 	bl	80002c8 <__aeabi_dsub>
 8005950:	f805 6b01 	strb.w	r6, [r5], #1
 8005954:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005956:	429d      	cmp	r5, r3
 8005958:	4680      	mov	r8, r0
 800595a:	4689      	mov	r9, r1
 800595c:	f04f 0200 	mov.w	r2, #0
 8005960:	d124      	bne.n	80059ac <_dtoa_r+0x60c>
 8005962:	4b1b      	ldr	r3, [pc, #108]	; (80059d0 <_dtoa_r+0x630>)
 8005964:	4650      	mov	r0, sl
 8005966:	4659      	mov	r1, fp
 8005968:	f7fa fcb0 	bl	80002cc <__adddf3>
 800596c:	4602      	mov	r2, r0
 800596e:	460b      	mov	r3, r1
 8005970:	4640      	mov	r0, r8
 8005972:	4649      	mov	r1, r9
 8005974:	f7fb f8f0 	bl	8000b58 <__aeabi_dcmpgt>
 8005978:	2800      	cmp	r0, #0
 800597a:	d173      	bne.n	8005a64 <_dtoa_r+0x6c4>
 800597c:	4652      	mov	r2, sl
 800597e:	465b      	mov	r3, fp
 8005980:	4913      	ldr	r1, [pc, #76]	; (80059d0 <_dtoa_r+0x630>)
 8005982:	2000      	movs	r0, #0
 8005984:	f7fa fca0 	bl	80002c8 <__aeabi_dsub>
 8005988:	4602      	mov	r2, r0
 800598a:	460b      	mov	r3, r1
 800598c:	4640      	mov	r0, r8
 800598e:	4649      	mov	r1, r9
 8005990:	f7fb f8c4 	bl	8000b1c <__aeabi_dcmplt>
 8005994:	2800      	cmp	r0, #0
 8005996:	f43f af35 	beq.w	8005804 <_dtoa_r+0x464>
 800599a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800599c:	1e6b      	subs	r3, r5, #1
 800599e:	930f      	str	r3, [sp, #60]	; 0x3c
 80059a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80059a4:	2b30      	cmp	r3, #48	; 0x30
 80059a6:	d0f8      	beq.n	800599a <_dtoa_r+0x5fa>
 80059a8:	9700      	str	r7, [sp, #0]
 80059aa:	e049      	b.n	8005a40 <_dtoa_r+0x6a0>
 80059ac:	4b05      	ldr	r3, [pc, #20]	; (80059c4 <_dtoa_r+0x624>)
 80059ae:	f7fa fe43 	bl	8000638 <__aeabi_dmul>
 80059b2:	4680      	mov	r8, r0
 80059b4:	4689      	mov	r9, r1
 80059b6:	e7bd      	b.n	8005934 <_dtoa_r+0x594>
 80059b8:	08007c78 	.word	0x08007c78
 80059bc:	08007c50 	.word	0x08007c50
 80059c0:	3ff00000 	.word	0x3ff00000
 80059c4:	40240000 	.word	0x40240000
 80059c8:	401c0000 	.word	0x401c0000
 80059cc:	40140000 	.word	0x40140000
 80059d0:	3fe00000 	.word	0x3fe00000
 80059d4:	9d01      	ldr	r5, [sp, #4]
 80059d6:	4656      	mov	r6, sl
 80059d8:	465f      	mov	r7, fp
 80059da:	4642      	mov	r2, r8
 80059dc:	464b      	mov	r3, r9
 80059de:	4630      	mov	r0, r6
 80059e0:	4639      	mov	r1, r7
 80059e2:	f7fa ff53 	bl	800088c <__aeabi_ddiv>
 80059e6:	f7fb f8d7 	bl	8000b98 <__aeabi_d2iz>
 80059ea:	4682      	mov	sl, r0
 80059ec:	f7fa fdba 	bl	8000564 <__aeabi_i2d>
 80059f0:	4642      	mov	r2, r8
 80059f2:	464b      	mov	r3, r9
 80059f4:	f7fa fe20 	bl	8000638 <__aeabi_dmul>
 80059f8:	4602      	mov	r2, r0
 80059fa:	460b      	mov	r3, r1
 80059fc:	4630      	mov	r0, r6
 80059fe:	4639      	mov	r1, r7
 8005a00:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005a04:	f7fa fc60 	bl	80002c8 <__aeabi_dsub>
 8005a08:	f805 6b01 	strb.w	r6, [r5], #1
 8005a0c:	9e01      	ldr	r6, [sp, #4]
 8005a0e:	9f03      	ldr	r7, [sp, #12]
 8005a10:	1bae      	subs	r6, r5, r6
 8005a12:	42b7      	cmp	r7, r6
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	d135      	bne.n	8005a86 <_dtoa_r+0x6e6>
 8005a1a:	f7fa fc57 	bl	80002cc <__adddf3>
 8005a1e:	4642      	mov	r2, r8
 8005a20:	464b      	mov	r3, r9
 8005a22:	4606      	mov	r6, r0
 8005a24:	460f      	mov	r7, r1
 8005a26:	f7fb f897 	bl	8000b58 <__aeabi_dcmpgt>
 8005a2a:	b9d0      	cbnz	r0, 8005a62 <_dtoa_r+0x6c2>
 8005a2c:	4642      	mov	r2, r8
 8005a2e:	464b      	mov	r3, r9
 8005a30:	4630      	mov	r0, r6
 8005a32:	4639      	mov	r1, r7
 8005a34:	f7fb f868 	bl	8000b08 <__aeabi_dcmpeq>
 8005a38:	b110      	cbz	r0, 8005a40 <_dtoa_r+0x6a0>
 8005a3a:	f01a 0f01 	tst.w	sl, #1
 8005a3e:	d110      	bne.n	8005a62 <_dtoa_r+0x6c2>
 8005a40:	4620      	mov	r0, r4
 8005a42:	ee18 1a10 	vmov	r1, s16
 8005a46:	f000 fbed 	bl	8006224 <_Bfree>
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	9800      	ldr	r0, [sp, #0]
 8005a4e:	702b      	strb	r3, [r5, #0]
 8005a50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a52:	3001      	adds	r0, #1
 8005a54:	6018      	str	r0, [r3, #0]
 8005a56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f43f acf1 	beq.w	8005440 <_dtoa_r+0xa0>
 8005a5e:	601d      	str	r5, [r3, #0]
 8005a60:	e4ee      	b.n	8005440 <_dtoa_r+0xa0>
 8005a62:	9f00      	ldr	r7, [sp, #0]
 8005a64:	462b      	mov	r3, r5
 8005a66:	461d      	mov	r5, r3
 8005a68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a6c:	2a39      	cmp	r2, #57	; 0x39
 8005a6e:	d106      	bne.n	8005a7e <_dtoa_r+0x6de>
 8005a70:	9a01      	ldr	r2, [sp, #4]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d1f7      	bne.n	8005a66 <_dtoa_r+0x6c6>
 8005a76:	9901      	ldr	r1, [sp, #4]
 8005a78:	2230      	movs	r2, #48	; 0x30
 8005a7a:	3701      	adds	r7, #1
 8005a7c:	700a      	strb	r2, [r1, #0]
 8005a7e:	781a      	ldrb	r2, [r3, #0]
 8005a80:	3201      	adds	r2, #1
 8005a82:	701a      	strb	r2, [r3, #0]
 8005a84:	e790      	b.n	80059a8 <_dtoa_r+0x608>
 8005a86:	4ba6      	ldr	r3, [pc, #664]	; (8005d20 <_dtoa_r+0x980>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f7fa fdd5 	bl	8000638 <__aeabi_dmul>
 8005a8e:	2200      	movs	r2, #0
 8005a90:	2300      	movs	r3, #0
 8005a92:	4606      	mov	r6, r0
 8005a94:	460f      	mov	r7, r1
 8005a96:	f7fb f837 	bl	8000b08 <__aeabi_dcmpeq>
 8005a9a:	2800      	cmp	r0, #0
 8005a9c:	d09d      	beq.n	80059da <_dtoa_r+0x63a>
 8005a9e:	e7cf      	b.n	8005a40 <_dtoa_r+0x6a0>
 8005aa0:	9a08      	ldr	r2, [sp, #32]
 8005aa2:	2a00      	cmp	r2, #0
 8005aa4:	f000 80d7 	beq.w	8005c56 <_dtoa_r+0x8b6>
 8005aa8:	9a06      	ldr	r2, [sp, #24]
 8005aaa:	2a01      	cmp	r2, #1
 8005aac:	f300 80ba 	bgt.w	8005c24 <_dtoa_r+0x884>
 8005ab0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ab2:	2a00      	cmp	r2, #0
 8005ab4:	f000 80b2 	beq.w	8005c1c <_dtoa_r+0x87c>
 8005ab8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005abc:	9e07      	ldr	r6, [sp, #28]
 8005abe:	9d04      	ldr	r5, [sp, #16]
 8005ac0:	9a04      	ldr	r2, [sp, #16]
 8005ac2:	441a      	add	r2, r3
 8005ac4:	9204      	str	r2, [sp, #16]
 8005ac6:	9a05      	ldr	r2, [sp, #20]
 8005ac8:	2101      	movs	r1, #1
 8005aca:	441a      	add	r2, r3
 8005acc:	4620      	mov	r0, r4
 8005ace:	9205      	str	r2, [sp, #20]
 8005ad0:	f000 fc60 	bl	8006394 <__i2b>
 8005ad4:	4607      	mov	r7, r0
 8005ad6:	2d00      	cmp	r5, #0
 8005ad8:	dd0c      	ble.n	8005af4 <_dtoa_r+0x754>
 8005ada:	9b05      	ldr	r3, [sp, #20]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	dd09      	ble.n	8005af4 <_dtoa_r+0x754>
 8005ae0:	42ab      	cmp	r3, r5
 8005ae2:	9a04      	ldr	r2, [sp, #16]
 8005ae4:	bfa8      	it	ge
 8005ae6:	462b      	movge	r3, r5
 8005ae8:	1ad2      	subs	r2, r2, r3
 8005aea:	9204      	str	r2, [sp, #16]
 8005aec:	9a05      	ldr	r2, [sp, #20]
 8005aee:	1aed      	subs	r5, r5, r3
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	9305      	str	r3, [sp, #20]
 8005af4:	9b07      	ldr	r3, [sp, #28]
 8005af6:	b31b      	cbz	r3, 8005b40 <_dtoa_r+0x7a0>
 8005af8:	9b08      	ldr	r3, [sp, #32]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 80af 	beq.w	8005c5e <_dtoa_r+0x8be>
 8005b00:	2e00      	cmp	r6, #0
 8005b02:	dd13      	ble.n	8005b2c <_dtoa_r+0x78c>
 8005b04:	4639      	mov	r1, r7
 8005b06:	4632      	mov	r2, r6
 8005b08:	4620      	mov	r0, r4
 8005b0a:	f000 fd03 	bl	8006514 <__pow5mult>
 8005b0e:	ee18 2a10 	vmov	r2, s16
 8005b12:	4601      	mov	r1, r0
 8005b14:	4607      	mov	r7, r0
 8005b16:	4620      	mov	r0, r4
 8005b18:	f000 fc52 	bl	80063c0 <__multiply>
 8005b1c:	ee18 1a10 	vmov	r1, s16
 8005b20:	4680      	mov	r8, r0
 8005b22:	4620      	mov	r0, r4
 8005b24:	f000 fb7e 	bl	8006224 <_Bfree>
 8005b28:	ee08 8a10 	vmov	s16, r8
 8005b2c:	9b07      	ldr	r3, [sp, #28]
 8005b2e:	1b9a      	subs	r2, r3, r6
 8005b30:	d006      	beq.n	8005b40 <_dtoa_r+0x7a0>
 8005b32:	ee18 1a10 	vmov	r1, s16
 8005b36:	4620      	mov	r0, r4
 8005b38:	f000 fcec 	bl	8006514 <__pow5mult>
 8005b3c:	ee08 0a10 	vmov	s16, r0
 8005b40:	2101      	movs	r1, #1
 8005b42:	4620      	mov	r0, r4
 8005b44:	f000 fc26 	bl	8006394 <__i2b>
 8005b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	4606      	mov	r6, r0
 8005b4e:	f340 8088 	ble.w	8005c62 <_dtoa_r+0x8c2>
 8005b52:	461a      	mov	r2, r3
 8005b54:	4601      	mov	r1, r0
 8005b56:	4620      	mov	r0, r4
 8005b58:	f000 fcdc 	bl	8006514 <__pow5mult>
 8005b5c:	9b06      	ldr	r3, [sp, #24]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	4606      	mov	r6, r0
 8005b62:	f340 8081 	ble.w	8005c68 <_dtoa_r+0x8c8>
 8005b66:	f04f 0800 	mov.w	r8, #0
 8005b6a:	6933      	ldr	r3, [r6, #16]
 8005b6c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005b70:	6918      	ldr	r0, [r3, #16]
 8005b72:	f000 fbbf 	bl	80062f4 <__hi0bits>
 8005b76:	f1c0 0020 	rsb	r0, r0, #32
 8005b7a:	9b05      	ldr	r3, [sp, #20]
 8005b7c:	4418      	add	r0, r3
 8005b7e:	f010 001f 	ands.w	r0, r0, #31
 8005b82:	f000 8092 	beq.w	8005caa <_dtoa_r+0x90a>
 8005b86:	f1c0 0320 	rsb	r3, r0, #32
 8005b8a:	2b04      	cmp	r3, #4
 8005b8c:	f340 808a 	ble.w	8005ca4 <_dtoa_r+0x904>
 8005b90:	f1c0 001c 	rsb	r0, r0, #28
 8005b94:	9b04      	ldr	r3, [sp, #16]
 8005b96:	4403      	add	r3, r0
 8005b98:	9304      	str	r3, [sp, #16]
 8005b9a:	9b05      	ldr	r3, [sp, #20]
 8005b9c:	4403      	add	r3, r0
 8005b9e:	4405      	add	r5, r0
 8005ba0:	9305      	str	r3, [sp, #20]
 8005ba2:	9b04      	ldr	r3, [sp, #16]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	dd07      	ble.n	8005bb8 <_dtoa_r+0x818>
 8005ba8:	ee18 1a10 	vmov	r1, s16
 8005bac:	461a      	mov	r2, r3
 8005bae:	4620      	mov	r0, r4
 8005bb0:	f000 fd0a 	bl	80065c8 <__lshift>
 8005bb4:	ee08 0a10 	vmov	s16, r0
 8005bb8:	9b05      	ldr	r3, [sp, #20]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	dd05      	ble.n	8005bca <_dtoa_r+0x82a>
 8005bbe:	4631      	mov	r1, r6
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	4620      	mov	r0, r4
 8005bc4:	f000 fd00 	bl	80065c8 <__lshift>
 8005bc8:	4606      	mov	r6, r0
 8005bca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d06e      	beq.n	8005cae <_dtoa_r+0x90e>
 8005bd0:	ee18 0a10 	vmov	r0, s16
 8005bd4:	4631      	mov	r1, r6
 8005bd6:	f000 fd67 	bl	80066a8 <__mcmp>
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	da67      	bge.n	8005cae <_dtoa_r+0x90e>
 8005bde:	9b00      	ldr	r3, [sp, #0]
 8005be0:	3b01      	subs	r3, #1
 8005be2:	ee18 1a10 	vmov	r1, s16
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	220a      	movs	r2, #10
 8005bea:	2300      	movs	r3, #0
 8005bec:	4620      	mov	r0, r4
 8005bee:	f000 fb3b 	bl	8006268 <__multadd>
 8005bf2:	9b08      	ldr	r3, [sp, #32]
 8005bf4:	ee08 0a10 	vmov	s16, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 81b1 	beq.w	8005f60 <_dtoa_r+0xbc0>
 8005bfe:	2300      	movs	r3, #0
 8005c00:	4639      	mov	r1, r7
 8005c02:	220a      	movs	r2, #10
 8005c04:	4620      	mov	r0, r4
 8005c06:	f000 fb2f 	bl	8006268 <__multadd>
 8005c0a:	9b02      	ldr	r3, [sp, #8]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	4607      	mov	r7, r0
 8005c10:	f300 808e 	bgt.w	8005d30 <_dtoa_r+0x990>
 8005c14:	9b06      	ldr	r3, [sp, #24]
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	dc51      	bgt.n	8005cbe <_dtoa_r+0x91e>
 8005c1a:	e089      	b.n	8005d30 <_dtoa_r+0x990>
 8005c1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005c22:	e74b      	b.n	8005abc <_dtoa_r+0x71c>
 8005c24:	9b03      	ldr	r3, [sp, #12]
 8005c26:	1e5e      	subs	r6, r3, #1
 8005c28:	9b07      	ldr	r3, [sp, #28]
 8005c2a:	42b3      	cmp	r3, r6
 8005c2c:	bfbf      	itttt	lt
 8005c2e:	9b07      	ldrlt	r3, [sp, #28]
 8005c30:	9607      	strlt	r6, [sp, #28]
 8005c32:	1af2      	sublt	r2, r6, r3
 8005c34:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005c36:	bfb6      	itet	lt
 8005c38:	189b      	addlt	r3, r3, r2
 8005c3a:	1b9e      	subge	r6, r3, r6
 8005c3c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005c3e:	9b03      	ldr	r3, [sp, #12]
 8005c40:	bfb8      	it	lt
 8005c42:	2600      	movlt	r6, #0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	bfb7      	itett	lt
 8005c48:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005c4c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005c50:	1a9d      	sublt	r5, r3, r2
 8005c52:	2300      	movlt	r3, #0
 8005c54:	e734      	b.n	8005ac0 <_dtoa_r+0x720>
 8005c56:	9e07      	ldr	r6, [sp, #28]
 8005c58:	9d04      	ldr	r5, [sp, #16]
 8005c5a:	9f08      	ldr	r7, [sp, #32]
 8005c5c:	e73b      	b.n	8005ad6 <_dtoa_r+0x736>
 8005c5e:	9a07      	ldr	r2, [sp, #28]
 8005c60:	e767      	b.n	8005b32 <_dtoa_r+0x792>
 8005c62:	9b06      	ldr	r3, [sp, #24]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	dc18      	bgt.n	8005c9a <_dtoa_r+0x8fa>
 8005c68:	f1ba 0f00 	cmp.w	sl, #0
 8005c6c:	d115      	bne.n	8005c9a <_dtoa_r+0x8fa>
 8005c6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005c72:	b993      	cbnz	r3, 8005c9a <_dtoa_r+0x8fa>
 8005c74:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005c78:	0d1b      	lsrs	r3, r3, #20
 8005c7a:	051b      	lsls	r3, r3, #20
 8005c7c:	b183      	cbz	r3, 8005ca0 <_dtoa_r+0x900>
 8005c7e:	9b04      	ldr	r3, [sp, #16]
 8005c80:	3301      	adds	r3, #1
 8005c82:	9304      	str	r3, [sp, #16]
 8005c84:	9b05      	ldr	r3, [sp, #20]
 8005c86:	3301      	adds	r3, #1
 8005c88:	9305      	str	r3, [sp, #20]
 8005c8a:	f04f 0801 	mov.w	r8, #1
 8005c8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f47f af6a 	bne.w	8005b6a <_dtoa_r+0x7ca>
 8005c96:	2001      	movs	r0, #1
 8005c98:	e76f      	b.n	8005b7a <_dtoa_r+0x7da>
 8005c9a:	f04f 0800 	mov.w	r8, #0
 8005c9e:	e7f6      	b.n	8005c8e <_dtoa_r+0x8ee>
 8005ca0:	4698      	mov	r8, r3
 8005ca2:	e7f4      	b.n	8005c8e <_dtoa_r+0x8ee>
 8005ca4:	f43f af7d 	beq.w	8005ba2 <_dtoa_r+0x802>
 8005ca8:	4618      	mov	r0, r3
 8005caa:	301c      	adds	r0, #28
 8005cac:	e772      	b.n	8005b94 <_dtoa_r+0x7f4>
 8005cae:	9b03      	ldr	r3, [sp, #12]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	dc37      	bgt.n	8005d24 <_dtoa_r+0x984>
 8005cb4:	9b06      	ldr	r3, [sp, #24]
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	dd34      	ble.n	8005d24 <_dtoa_r+0x984>
 8005cba:	9b03      	ldr	r3, [sp, #12]
 8005cbc:	9302      	str	r3, [sp, #8]
 8005cbe:	9b02      	ldr	r3, [sp, #8]
 8005cc0:	b96b      	cbnz	r3, 8005cde <_dtoa_r+0x93e>
 8005cc2:	4631      	mov	r1, r6
 8005cc4:	2205      	movs	r2, #5
 8005cc6:	4620      	mov	r0, r4
 8005cc8:	f000 face 	bl	8006268 <__multadd>
 8005ccc:	4601      	mov	r1, r0
 8005cce:	4606      	mov	r6, r0
 8005cd0:	ee18 0a10 	vmov	r0, s16
 8005cd4:	f000 fce8 	bl	80066a8 <__mcmp>
 8005cd8:	2800      	cmp	r0, #0
 8005cda:	f73f adbb 	bgt.w	8005854 <_dtoa_r+0x4b4>
 8005cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ce0:	9d01      	ldr	r5, [sp, #4]
 8005ce2:	43db      	mvns	r3, r3
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	f04f 0800 	mov.w	r8, #0
 8005cea:	4631      	mov	r1, r6
 8005cec:	4620      	mov	r0, r4
 8005cee:	f000 fa99 	bl	8006224 <_Bfree>
 8005cf2:	2f00      	cmp	r7, #0
 8005cf4:	f43f aea4 	beq.w	8005a40 <_dtoa_r+0x6a0>
 8005cf8:	f1b8 0f00 	cmp.w	r8, #0
 8005cfc:	d005      	beq.n	8005d0a <_dtoa_r+0x96a>
 8005cfe:	45b8      	cmp	r8, r7
 8005d00:	d003      	beq.n	8005d0a <_dtoa_r+0x96a>
 8005d02:	4641      	mov	r1, r8
 8005d04:	4620      	mov	r0, r4
 8005d06:	f000 fa8d 	bl	8006224 <_Bfree>
 8005d0a:	4639      	mov	r1, r7
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	f000 fa89 	bl	8006224 <_Bfree>
 8005d12:	e695      	b.n	8005a40 <_dtoa_r+0x6a0>
 8005d14:	2600      	movs	r6, #0
 8005d16:	4637      	mov	r7, r6
 8005d18:	e7e1      	b.n	8005cde <_dtoa_r+0x93e>
 8005d1a:	9700      	str	r7, [sp, #0]
 8005d1c:	4637      	mov	r7, r6
 8005d1e:	e599      	b.n	8005854 <_dtoa_r+0x4b4>
 8005d20:	40240000 	.word	0x40240000
 8005d24:	9b08      	ldr	r3, [sp, #32]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f000 80ca 	beq.w	8005ec0 <_dtoa_r+0xb20>
 8005d2c:	9b03      	ldr	r3, [sp, #12]
 8005d2e:	9302      	str	r3, [sp, #8]
 8005d30:	2d00      	cmp	r5, #0
 8005d32:	dd05      	ble.n	8005d40 <_dtoa_r+0x9a0>
 8005d34:	4639      	mov	r1, r7
 8005d36:	462a      	mov	r2, r5
 8005d38:	4620      	mov	r0, r4
 8005d3a:	f000 fc45 	bl	80065c8 <__lshift>
 8005d3e:	4607      	mov	r7, r0
 8005d40:	f1b8 0f00 	cmp.w	r8, #0
 8005d44:	d05b      	beq.n	8005dfe <_dtoa_r+0xa5e>
 8005d46:	6879      	ldr	r1, [r7, #4]
 8005d48:	4620      	mov	r0, r4
 8005d4a:	f000 fa2b 	bl	80061a4 <_Balloc>
 8005d4e:	4605      	mov	r5, r0
 8005d50:	b928      	cbnz	r0, 8005d5e <_dtoa_r+0x9be>
 8005d52:	4b87      	ldr	r3, [pc, #540]	; (8005f70 <_dtoa_r+0xbd0>)
 8005d54:	4602      	mov	r2, r0
 8005d56:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005d5a:	f7ff bb3b 	b.w	80053d4 <_dtoa_r+0x34>
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	3202      	adds	r2, #2
 8005d62:	0092      	lsls	r2, r2, #2
 8005d64:	f107 010c 	add.w	r1, r7, #12
 8005d68:	300c      	adds	r0, #12
 8005d6a:	f000 fa0d 	bl	8006188 <memcpy>
 8005d6e:	2201      	movs	r2, #1
 8005d70:	4629      	mov	r1, r5
 8005d72:	4620      	mov	r0, r4
 8005d74:	f000 fc28 	bl	80065c8 <__lshift>
 8005d78:	9b01      	ldr	r3, [sp, #4]
 8005d7a:	f103 0901 	add.w	r9, r3, #1
 8005d7e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005d82:	4413      	add	r3, r2
 8005d84:	9305      	str	r3, [sp, #20]
 8005d86:	f00a 0301 	and.w	r3, sl, #1
 8005d8a:	46b8      	mov	r8, r7
 8005d8c:	9304      	str	r3, [sp, #16]
 8005d8e:	4607      	mov	r7, r0
 8005d90:	4631      	mov	r1, r6
 8005d92:	ee18 0a10 	vmov	r0, s16
 8005d96:	f7ff fa75 	bl	8005284 <quorem>
 8005d9a:	4641      	mov	r1, r8
 8005d9c:	9002      	str	r0, [sp, #8]
 8005d9e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005da2:	ee18 0a10 	vmov	r0, s16
 8005da6:	f000 fc7f 	bl	80066a8 <__mcmp>
 8005daa:	463a      	mov	r2, r7
 8005dac:	9003      	str	r0, [sp, #12]
 8005dae:	4631      	mov	r1, r6
 8005db0:	4620      	mov	r0, r4
 8005db2:	f000 fc95 	bl	80066e0 <__mdiff>
 8005db6:	68c2      	ldr	r2, [r0, #12]
 8005db8:	f109 3bff 	add.w	fp, r9, #4294967295
 8005dbc:	4605      	mov	r5, r0
 8005dbe:	bb02      	cbnz	r2, 8005e02 <_dtoa_r+0xa62>
 8005dc0:	4601      	mov	r1, r0
 8005dc2:	ee18 0a10 	vmov	r0, s16
 8005dc6:	f000 fc6f 	bl	80066a8 <__mcmp>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	4629      	mov	r1, r5
 8005dce:	4620      	mov	r0, r4
 8005dd0:	9207      	str	r2, [sp, #28]
 8005dd2:	f000 fa27 	bl	8006224 <_Bfree>
 8005dd6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005dda:	ea43 0102 	orr.w	r1, r3, r2
 8005dde:	9b04      	ldr	r3, [sp, #16]
 8005de0:	430b      	orrs	r3, r1
 8005de2:	464d      	mov	r5, r9
 8005de4:	d10f      	bne.n	8005e06 <_dtoa_r+0xa66>
 8005de6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005dea:	d02a      	beq.n	8005e42 <_dtoa_r+0xaa2>
 8005dec:	9b03      	ldr	r3, [sp, #12]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	dd02      	ble.n	8005df8 <_dtoa_r+0xa58>
 8005df2:	9b02      	ldr	r3, [sp, #8]
 8005df4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005df8:	f88b a000 	strb.w	sl, [fp]
 8005dfc:	e775      	b.n	8005cea <_dtoa_r+0x94a>
 8005dfe:	4638      	mov	r0, r7
 8005e00:	e7ba      	b.n	8005d78 <_dtoa_r+0x9d8>
 8005e02:	2201      	movs	r2, #1
 8005e04:	e7e2      	b.n	8005dcc <_dtoa_r+0xa2c>
 8005e06:	9b03      	ldr	r3, [sp, #12]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	db04      	blt.n	8005e16 <_dtoa_r+0xa76>
 8005e0c:	9906      	ldr	r1, [sp, #24]
 8005e0e:	430b      	orrs	r3, r1
 8005e10:	9904      	ldr	r1, [sp, #16]
 8005e12:	430b      	orrs	r3, r1
 8005e14:	d122      	bne.n	8005e5c <_dtoa_r+0xabc>
 8005e16:	2a00      	cmp	r2, #0
 8005e18:	ddee      	ble.n	8005df8 <_dtoa_r+0xa58>
 8005e1a:	ee18 1a10 	vmov	r1, s16
 8005e1e:	2201      	movs	r2, #1
 8005e20:	4620      	mov	r0, r4
 8005e22:	f000 fbd1 	bl	80065c8 <__lshift>
 8005e26:	4631      	mov	r1, r6
 8005e28:	ee08 0a10 	vmov	s16, r0
 8005e2c:	f000 fc3c 	bl	80066a8 <__mcmp>
 8005e30:	2800      	cmp	r0, #0
 8005e32:	dc03      	bgt.n	8005e3c <_dtoa_r+0xa9c>
 8005e34:	d1e0      	bne.n	8005df8 <_dtoa_r+0xa58>
 8005e36:	f01a 0f01 	tst.w	sl, #1
 8005e3a:	d0dd      	beq.n	8005df8 <_dtoa_r+0xa58>
 8005e3c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005e40:	d1d7      	bne.n	8005df2 <_dtoa_r+0xa52>
 8005e42:	2339      	movs	r3, #57	; 0x39
 8005e44:	f88b 3000 	strb.w	r3, [fp]
 8005e48:	462b      	mov	r3, r5
 8005e4a:	461d      	mov	r5, r3
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005e52:	2a39      	cmp	r2, #57	; 0x39
 8005e54:	d071      	beq.n	8005f3a <_dtoa_r+0xb9a>
 8005e56:	3201      	adds	r2, #1
 8005e58:	701a      	strb	r2, [r3, #0]
 8005e5a:	e746      	b.n	8005cea <_dtoa_r+0x94a>
 8005e5c:	2a00      	cmp	r2, #0
 8005e5e:	dd07      	ble.n	8005e70 <_dtoa_r+0xad0>
 8005e60:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005e64:	d0ed      	beq.n	8005e42 <_dtoa_r+0xaa2>
 8005e66:	f10a 0301 	add.w	r3, sl, #1
 8005e6a:	f88b 3000 	strb.w	r3, [fp]
 8005e6e:	e73c      	b.n	8005cea <_dtoa_r+0x94a>
 8005e70:	9b05      	ldr	r3, [sp, #20]
 8005e72:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005e76:	4599      	cmp	r9, r3
 8005e78:	d047      	beq.n	8005f0a <_dtoa_r+0xb6a>
 8005e7a:	ee18 1a10 	vmov	r1, s16
 8005e7e:	2300      	movs	r3, #0
 8005e80:	220a      	movs	r2, #10
 8005e82:	4620      	mov	r0, r4
 8005e84:	f000 f9f0 	bl	8006268 <__multadd>
 8005e88:	45b8      	cmp	r8, r7
 8005e8a:	ee08 0a10 	vmov	s16, r0
 8005e8e:	f04f 0300 	mov.w	r3, #0
 8005e92:	f04f 020a 	mov.w	r2, #10
 8005e96:	4641      	mov	r1, r8
 8005e98:	4620      	mov	r0, r4
 8005e9a:	d106      	bne.n	8005eaa <_dtoa_r+0xb0a>
 8005e9c:	f000 f9e4 	bl	8006268 <__multadd>
 8005ea0:	4680      	mov	r8, r0
 8005ea2:	4607      	mov	r7, r0
 8005ea4:	f109 0901 	add.w	r9, r9, #1
 8005ea8:	e772      	b.n	8005d90 <_dtoa_r+0x9f0>
 8005eaa:	f000 f9dd 	bl	8006268 <__multadd>
 8005eae:	4639      	mov	r1, r7
 8005eb0:	4680      	mov	r8, r0
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	220a      	movs	r2, #10
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	f000 f9d6 	bl	8006268 <__multadd>
 8005ebc:	4607      	mov	r7, r0
 8005ebe:	e7f1      	b.n	8005ea4 <_dtoa_r+0xb04>
 8005ec0:	9b03      	ldr	r3, [sp, #12]
 8005ec2:	9302      	str	r3, [sp, #8]
 8005ec4:	9d01      	ldr	r5, [sp, #4]
 8005ec6:	ee18 0a10 	vmov	r0, s16
 8005eca:	4631      	mov	r1, r6
 8005ecc:	f7ff f9da 	bl	8005284 <quorem>
 8005ed0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005ed4:	9b01      	ldr	r3, [sp, #4]
 8005ed6:	f805 ab01 	strb.w	sl, [r5], #1
 8005eda:	1aea      	subs	r2, r5, r3
 8005edc:	9b02      	ldr	r3, [sp, #8]
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	dd09      	ble.n	8005ef6 <_dtoa_r+0xb56>
 8005ee2:	ee18 1a10 	vmov	r1, s16
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	220a      	movs	r2, #10
 8005eea:	4620      	mov	r0, r4
 8005eec:	f000 f9bc 	bl	8006268 <__multadd>
 8005ef0:	ee08 0a10 	vmov	s16, r0
 8005ef4:	e7e7      	b.n	8005ec6 <_dtoa_r+0xb26>
 8005ef6:	9b02      	ldr	r3, [sp, #8]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	bfc8      	it	gt
 8005efc:	461d      	movgt	r5, r3
 8005efe:	9b01      	ldr	r3, [sp, #4]
 8005f00:	bfd8      	it	le
 8005f02:	2501      	movle	r5, #1
 8005f04:	441d      	add	r5, r3
 8005f06:	f04f 0800 	mov.w	r8, #0
 8005f0a:	ee18 1a10 	vmov	r1, s16
 8005f0e:	2201      	movs	r2, #1
 8005f10:	4620      	mov	r0, r4
 8005f12:	f000 fb59 	bl	80065c8 <__lshift>
 8005f16:	4631      	mov	r1, r6
 8005f18:	ee08 0a10 	vmov	s16, r0
 8005f1c:	f000 fbc4 	bl	80066a8 <__mcmp>
 8005f20:	2800      	cmp	r0, #0
 8005f22:	dc91      	bgt.n	8005e48 <_dtoa_r+0xaa8>
 8005f24:	d102      	bne.n	8005f2c <_dtoa_r+0xb8c>
 8005f26:	f01a 0f01 	tst.w	sl, #1
 8005f2a:	d18d      	bne.n	8005e48 <_dtoa_r+0xaa8>
 8005f2c:	462b      	mov	r3, r5
 8005f2e:	461d      	mov	r5, r3
 8005f30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f34:	2a30      	cmp	r2, #48	; 0x30
 8005f36:	d0fa      	beq.n	8005f2e <_dtoa_r+0xb8e>
 8005f38:	e6d7      	b.n	8005cea <_dtoa_r+0x94a>
 8005f3a:	9a01      	ldr	r2, [sp, #4]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d184      	bne.n	8005e4a <_dtoa_r+0xaaa>
 8005f40:	9b00      	ldr	r3, [sp, #0]
 8005f42:	3301      	adds	r3, #1
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	2331      	movs	r3, #49	; 0x31
 8005f48:	7013      	strb	r3, [r2, #0]
 8005f4a:	e6ce      	b.n	8005cea <_dtoa_r+0x94a>
 8005f4c:	4b09      	ldr	r3, [pc, #36]	; (8005f74 <_dtoa_r+0xbd4>)
 8005f4e:	f7ff ba95 	b.w	800547c <_dtoa_r+0xdc>
 8005f52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f47f aa6e 	bne.w	8005436 <_dtoa_r+0x96>
 8005f5a:	4b07      	ldr	r3, [pc, #28]	; (8005f78 <_dtoa_r+0xbd8>)
 8005f5c:	f7ff ba8e 	b.w	800547c <_dtoa_r+0xdc>
 8005f60:	9b02      	ldr	r3, [sp, #8]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	dcae      	bgt.n	8005ec4 <_dtoa_r+0xb24>
 8005f66:	9b06      	ldr	r3, [sp, #24]
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	f73f aea8 	bgt.w	8005cbe <_dtoa_r+0x91e>
 8005f6e:	e7a9      	b.n	8005ec4 <_dtoa_r+0xb24>
 8005f70:	08007b7f 	.word	0x08007b7f
 8005f74:	08007adc 	.word	0x08007adc
 8005f78:	08007b00 	.word	0x08007b00

08005f7c <std>:
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	b510      	push	{r4, lr}
 8005f80:	4604      	mov	r4, r0
 8005f82:	e9c0 3300 	strd	r3, r3, [r0]
 8005f86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f8a:	6083      	str	r3, [r0, #8]
 8005f8c:	8181      	strh	r1, [r0, #12]
 8005f8e:	6643      	str	r3, [r0, #100]	; 0x64
 8005f90:	81c2      	strh	r2, [r0, #14]
 8005f92:	6183      	str	r3, [r0, #24]
 8005f94:	4619      	mov	r1, r3
 8005f96:	2208      	movs	r2, #8
 8005f98:	305c      	adds	r0, #92	; 0x5c
 8005f9a:	f7fe fce9 	bl	8004970 <memset>
 8005f9e:	4b05      	ldr	r3, [pc, #20]	; (8005fb4 <std+0x38>)
 8005fa0:	6263      	str	r3, [r4, #36]	; 0x24
 8005fa2:	4b05      	ldr	r3, [pc, #20]	; (8005fb8 <std+0x3c>)
 8005fa4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005fa6:	4b05      	ldr	r3, [pc, #20]	; (8005fbc <std+0x40>)
 8005fa8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005faa:	4b05      	ldr	r3, [pc, #20]	; (8005fc0 <std+0x44>)
 8005fac:	6224      	str	r4, [r4, #32]
 8005fae:	6323      	str	r3, [r4, #48]	; 0x30
 8005fb0:	bd10      	pop	{r4, pc}
 8005fb2:	bf00      	nop
 8005fb4:	08006d6d 	.word	0x08006d6d
 8005fb8:	08006d8f 	.word	0x08006d8f
 8005fbc:	08006dc7 	.word	0x08006dc7
 8005fc0:	08006deb 	.word	0x08006deb

08005fc4 <_cleanup_r>:
 8005fc4:	4901      	ldr	r1, [pc, #4]	; (8005fcc <_cleanup_r+0x8>)
 8005fc6:	f000 b8af 	b.w	8006128 <_fwalk_reent>
 8005fca:	bf00      	nop
 8005fcc:	08007101 	.word	0x08007101

08005fd0 <__sfmoreglue>:
 8005fd0:	b570      	push	{r4, r5, r6, lr}
 8005fd2:	2268      	movs	r2, #104	; 0x68
 8005fd4:	1e4d      	subs	r5, r1, #1
 8005fd6:	4355      	muls	r5, r2
 8005fd8:	460e      	mov	r6, r1
 8005fda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005fde:	f000 fce7 	bl	80069b0 <_malloc_r>
 8005fe2:	4604      	mov	r4, r0
 8005fe4:	b140      	cbz	r0, 8005ff8 <__sfmoreglue+0x28>
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	e9c0 1600 	strd	r1, r6, [r0]
 8005fec:	300c      	adds	r0, #12
 8005fee:	60a0      	str	r0, [r4, #8]
 8005ff0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005ff4:	f7fe fcbc 	bl	8004970 <memset>
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	bd70      	pop	{r4, r5, r6, pc}

08005ffc <__sfp_lock_acquire>:
 8005ffc:	4801      	ldr	r0, [pc, #4]	; (8006004 <__sfp_lock_acquire+0x8>)
 8005ffe:	f000 b8b8 	b.w	8006172 <__retarget_lock_acquire_recursive>
 8006002:	bf00      	nop
 8006004:	200003b5 	.word	0x200003b5

08006008 <__sfp_lock_release>:
 8006008:	4801      	ldr	r0, [pc, #4]	; (8006010 <__sfp_lock_release+0x8>)
 800600a:	f000 b8b3 	b.w	8006174 <__retarget_lock_release_recursive>
 800600e:	bf00      	nop
 8006010:	200003b5 	.word	0x200003b5

08006014 <__sinit_lock_acquire>:
 8006014:	4801      	ldr	r0, [pc, #4]	; (800601c <__sinit_lock_acquire+0x8>)
 8006016:	f000 b8ac 	b.w	8006172 <__retarget_lock_acquire_recursive>
 800601a:	bf00      	nop
 800601c:	200003b6 	.word	0x200003b6

08006020 <__sinit_lock_release>:
 8006020:	4801      	ldr	r0, [pc, #4]	; (8006028 <__sinit_lock_release+0x8>)
 8006022:	f000 b8a7 	b.w	8006174 <__retarget_lock_release_recursive>
 8006026:	bf00      	nop
 8006028:	200003b6 	.word	0x200003b6

0800602c <__sinit>:
 800602c:	b510      	push	{r4, lr}
 800602e:	4604      	mov	r4, r0
 8006030:	f7ff fff0 	bl	8006014 <__sinit_lock_acquire>
 8006034:	69a3      	ldr	r3, [r4, #24]
 8006036:	b11b      	cbz	r3, 8006040 <__sinit+0x14>
 8006038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800603c:	f7ff bff0 	b.w	8006020 <__sinit_lock_release>
 8006040:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006044:	6523      	str	r3, [r4, #80]	; 0x50
 8006046:	4b13      	ldr	r3, [pc, #76]	; (8006094 <__sinit+0x68>)
 8006048:	4a13      	ldr	r2, [pc, #76]	; (8006098 <__sinit+0x6c>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	62a2      	str	r2, [r4, #40]	; 0x28
 800604e:	42a3      	cmp	r3, r4
 8006050:	bf04      	itt	eq
 8006052:	2301      	moveq	r3, #1
 8006054:	61a3      	streq	r3, [r4, #24]
 8006056:	4620      	mov	r0, r4
 8006058:	f000 f820 	bl	800609c <__sfp>
 800605c:	6060      	str	r0, [r4, #4]
 800605e:	4620      	mov	r0, r4
 8006060:	f000 f81c 	bl	800609c <__sfp>
 8006064:	60a0      	str	r0, [r4, #8]
 8006066:	4620      	mov	r0, r4
 8006068:	f000 f818 	bl	800609c <__sfp>
 800606c:	2200      	movs	r2, #0
 800606e:	60e0      	str	r0, [r4, #12]
 8006070:	2104      	movs	r1, #4
 8006072:	6860      	ldr	r0, [r4, #4]
 8006074:	f7ff ff82 	bl	8005f7c <std>
 8006078:	68a0      	ldr	r0, [r4, #8]
 800607a:	2201      	movs	r2, #1
 800607c:	2109      	movs	r1, #9
 800607e:	f7ff ff7d 	bl	8005f7c <std>
 8006082:	68e0      	ldr	r0, [r4, #12]
 8006084:	2202      	movs	r2, #2
 8006086:	2112      	movs	r1, #18
 8006088:	f7ff ff78 	bl	8005f7c <std>
 800608c:	2301      	movs	r3, #1
 800608e:	61a3      	str	r3, [r4, #24]
 8006090:	e7d2      	b.n	8006038 <__sinit+0xc>
 8006092:	bf00      	nop
 8006094:	08007ac8 	.word	0x08007ac8
 8006098:	08005fc5 	.word	0x08005fc5

0800609c <__sfp>:
 800609c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800609e:	4607      	mov	r7, r0
 80060a0:	f7ff ffac 	bl	8005ffc <__sfp_lock_acquire>
 80060a4:	4b1e      	ldr	r3, [pc, #120]	; (8006120 <__sfp+0x84>)
 80060a6:	681e      	ldr	r6, [r3, #0]
 80060a8:	69b3      	ldr	r3, [r6, #24]
 80060aa:	b913      	cbnz	r3, 80060b2 <__sfp+0x16>
 80060ac:	4630      	mov	r0, r6
 80060ae:	f7ff ffbd 	bl	800602c <__sinit>
 80060b2:	3648      	adds	r6, #72	; 0x48
 80060b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80060b8:	3b01      	subs	r3, #1
 80060ba:	d503      	bpl.n	80060c4 <__sfp+0x28>
 80060bc:	6833      	ldr	r3, [r6, #0]
 80060be:	b30b      	cbz	r3, 8006104 <__sfp+0x68>
 80060c0:	6836      	ldr	r6, [r6, #0]
 80060c2:	e7f7      	b.n	80060b4 <__sfp+0x18>
 80060c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80060c8:	b9d5      	cbnz	r5, 8006100 <__sfp+0x64>
 80060ca:	4b16      	ldr	r3, [pc, #88]	; (8006124 <__sfp+0x88>)
 80060cc:	60e3      	str	r3, [r4, #12]
 80060ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80060d2:	6665      	str	r5, [r4, #100]	; 0x64
 80060d4:	f000 f84c 	bl	8006170 <__retarget_lock_init_recursive>
 80060d8:	f7ff ff96 	bl	8006008 <__sfp_lock_release>
 80060dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80060e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80060e4:	6025      	str	r5, [r4, #0]
 80060e6:	61a5      	str	r5, [r4, #24]
 80060e8:	2208      	movs	r2, #8
 80060ea:	4629      	mov	r1, r5
 80060ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80060f0:	f7fe fc3e 	bl	8004970 <memset>
 80060f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80060f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80060fc:	4620      	mov	r0, r4
 80060fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006100:	3468      	adds	r4, #104	; 0x68
 8006102:	e7d9      	b.n	80060b8 <__sfp+0x1c>
 8006104:	2104      	movs	r1, #4
 8006106:	4638      	mov	r0, r7
 8006108:	f7ff ff62 	bl	8005fd0 <__sfmoreglue>
 800610c:	4604      	mov	r4, r0
 800610e:	6030      	str	r0, [r6, #0]
 8006110:	2800      	cmp	r0, #0
 8006112:	d1d5      	bne.n	80060c0 <__sfp+0x24>
 8006114:	f7ff ff78 	bl	8006008 <__sfp_lock_release>
 8006118:	230c      	movs	r3, #12
 800611a:	603b      	str	r3, [r7, #0]
 800611c:	e7ee      	b.n	80060fc <__sfp+0x60>
 800611e:	bf00      	nop
 8006120:	08007ac8 	.word	0x08007ac8
 8006124:	ffff0001 	.word	0xffff0001

08006128 <_fwalk_reent>:
 8006128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800612c:	4606      	mov	r6, r0
 800612e:	4688      	mov	r8, r1
 8006130:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006134:	2700      	movs	r7, #0
 8006136:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800613a:	f1b9 0901 	subs.w	r9, r9, #1
 800613e:	d505      	bpl.n	800614c <_fwalk_reent+0x24>
 8006140:	6824      	ldr	r4, [r4, #0]
 8006142:	2c00      	cmp	r4, #0
 8006144:	d1f7      	bne.n	8006136 <_fwalk_reent+0xe>
 8006146:	4638      	mov	r0, r7
 8006148:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800614c:	89ab      	ldrh	r3, [r5, #12]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d907      	bls.n	8006162 <_fwalk_reent+0x3a>
 8006152:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006156:	3301      	adds	r3, #1
 8006158:	d003      	beq.n	8006162 <_fwalk_reent+0x3a>
 800615a:	4629      	mov	r1, r5
 800615c:	4630      	mov	r0, r6
 800615e:	47c0      	blx	r8
 8006160:	4307      	orrs	r7, r0
 8006162:	3568      	adds	r5, #104	; 0x68
 8006164:	e7e9      	b.n	800613a <_fwalk_reent+0x12>
	...

08006168 <_localeconv_r>:
 8006168:	4800      	ldr	r0, [pc, #0]	; (800616c <_localeconv_r+0x4>)
 800616a:	4770      	bx	lr
 800616c:	20000208 	.word	0x20000208

08006170 <__retarget_lock_init_recursive>:
 8006170:	4770      	bx	lr

08006172 <__retarget_lock_acquire_recursive>:
 8006172:	4770      	bx	lr

08006174 <__retarget_lock_release_recursive>:
 8006174:	4770      	bx	lr
	...

08006178 <malloc>:
 8006178:	4b02      	ldr	r3, [pc, #8]	; (8006184 <malloc+0xc>)
 800617a:	4601      	mov	r1, r0
 800617c:	6818      	ldr	r0, [r3, #0]
 800617e:	f000 bc17 	b.w	80069b0 <_malloc_r>
 8006182:	bf00      	nop
 8006184:	200000b4 	.word	0x200000b4

08006188 <memcpy>:
 8006188:	440a      	add	r2, r1
 800618a:	4291      	cmp	r1, r2
 800618c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006190:	d100      	bne.n	8006194 <memcpy+0xc>
 8006192:	4770      	bx	lr
 8006194:	b510      	push	{r4, lr}
 8006196:	f811 4b01 	ldrb.w	r4, [r1], #1
 800619a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800619e:	4291      	cmp	r1, r2
 80061a0:	d1f9      	bne.n	8006196 <memcpy+0xe>
 80061a2:	bd10      	pop	{r4, pc}

080061a4 <_Balloc>:
 80061a4:	b570      	push	{r4, r5, r6, lr}
 80061a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80061a8:	4604      	mov	r4, r0
 80061aa:	460d      	mov	r5, r1
 80061ac:	b976      	cbnz	r6, 80061cc <_Balloc+0x28>
 80061ae:	2010      	movs	r0, #16
 80061b0:	f7ff ffe2 	bl	8006178 <malloc>
 80061b4:	4602      	mov	r2, r0
 80061b6:	6260      	str	r0, [r4, #36]	; 0x24
 80061b8:	b920      	cbnz	r0, 80061c4 <_Balloc+0x20>
 80061ba:	4b18      	ldr	r3, [pc, #96]	; (800621c <_Balloc+0x78>)
 80061bc:	4818      	ldr	r0, [pc, #96]	; (8006220 <_Balloc+0x7c>)
 80061be:	2166      	movs	r1, #102	; 0x66
 80061c0:	f000 feea 	bl	8006f98 <__assert_func>
 80061c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80061c8:	6006      	str	r6, [r0, #0]
 80061ca:	60c6      	str	r6, [r0, #12]
 80061cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80061ce:	68f3      	ldr	r3, [r6, #12]
 80061d0:	b183      	cbz	r3, 80061f4 <_Balloc+0x50>
 80061d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80061da:	b9b8      	cbnz	r0, 800620c <_Balloc+0x68>
 80061dc:	2101      	movs	r1, #1
 80061de:	fa01 f605 	lsl.w	r6, r1, r5
 80061e2:	1d72      	adds	r2, r6, #5
 80061e4:	0092      	lsls	r2, r2, #2
 80061e6:	4620      	mov	r0, r4
 80061e8:	f000 fb60 	bl	80068ac <_calloc_r>
 80061ec:	b160      	cbz	r0, 8006208 <_Balloc+0x64>
 80061ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80061f2:	e00e      	b.n	8006212 <_Balloc+0x6e>
 80061f4:	2221      	movs	r2, #33	; 0x21
 80061f6:	2104      	movs	r1, #4
 80061f8:	4620      	mov	r0, r4
 80061fa:	f000 fb57 	bl	80068ac <_calloc_r>
 80061fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006200:	60f0      	str	r0, [r6, #12]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1e4      	bne.n	80061d2 <_Balloc+0x2e>
 8006208:	2000      	movs	r0, #0
 800620a:	bd70      	pop	{r4, r5, r6, pc}
 800620c:	6802      	ldr	r2, [r0, #0]
 800620e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006212:	2300      	movs	r3, #0
 8006214:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006218:	e7f7      	b.n	800620a <_Balloc+0x66>
 800621a:	bf00      	nop
 800621c:	08007b0d 	.word	0x08007b0d
 8006220:	08007bf0 	.word	0x08007bf0

08006224 <_Bfree>:
 8006224:	b570      	push	{r4, r5, r6, lr}
 8006226:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006228:	4605      	mov	r5, r0
 800622a:	460c      	mov	r4, r1
 800622c:	b976      	cbnz	r6, 800624c <_Bfree+0x28>
 800622e:	2010      	movs	r0, #16
 8006230:	f7ff ffa2 	bl	8006178 <malloc>
 8006234:	4602      	mov	r2, r0
 8006236:	6268      	str	r0, [r5, #36]	; 0x24
 8006238:	b920      	cbnz	r0, 8006244 <_Bfree+0x20>
 800623a:	4b09      	ldr	r3, [pc, #36]	; (8006260 <_Bfree+0x3c>)
 800623c:	4809      	ldr	r0, [pc, #36]	; (8006264 <_Bfree+0x40>)
 800623e:	218a      	movs	r1, #138	; 0x8a
 8006240:	f000 feaa 	bl	8006f98 <__assert_func>
 8006244:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006248:	6006      	str	r6, [r0, #0]
 800624a:	60c6      	str	r6, [r0, #12]
 800624c:	b13c      	cbz	r4, 800625e <_Bfree+0x3a>
 800624e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006250:	6862      	ldr	r2, [r4, #4]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006258:	6021      	str	r1, [r4, #0]
 800625a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800625e:	bd70      	pop	{r4, r5, r6, pc}
 8006260:	08007b0d 	.word	0x08007b0d
 8006264:	08007bf0 	.word	0x08007bf0

08006268 <__multadd>:
 8006268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800626c:	690d      	ldr	r5, [r1, #16]
 800626e:	4607      	mov	r7, r0
 8006270:	460c      	mov	r4, r1
 8006272:	461e      	mov	r6, r3
 8006274:	f101 0c14 	add.w	ip, r1, #20
 8006278:	2000      	movs	r0, #0
 800627a:	f8dc 3000 	ldr.w	r3, [ip]
 800627e:	b299      	uxth	r1, r3
 8006280:	fb02 6101 	mla	r1, r2, r1, r6
 8006284:	0c1e      	lsrs	r6, r3, #16
 8006286:	0c0b      	lsrs	r3, r1, #16
 8006288:	fb02 3306 	mla	r3, r2, r6, r3
 800628c:	b289      	uxth	r1, r1
 800628e:	3001      	adds	r0, #1
 8006290:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006294:	4285      	cmp	r5, r0
 8006296:	f84c 1b04 	str.w	r1, [ip], #4
 800629a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800629e:	dcec      	bgt.n	800627a <__multadd+0x12>
 80062a0:	b30e      	cbz	r6, 80062e6 <__multadd+0x7e>
 80062a2:	68a3      	ldr	r3, [r4, #8]
 80062a4:	42ab      	cmp	r3, r5
 80062a6:	dc19      	bgt.n	80062dc <__multadd+0x74>
 80062a8:	6861      	ldr	r1, [r4, #4]
 80062aa:	4638      	mov	r0, r7
 80062ac:	3101      	adds	r1, #1
 80062ae:	f7ff ff79 	bl	80061a4 <_Balloc>
 80062b2:	4680      	mov	r8, r0
 80062b4:	b928      	cbnz	r0, 80062c2 <__multadd+0x5a>
 80062b6:	4602      	mov	r2, r0
 80062b8:	4b0c      	ldr	r3, [pc, #48]	; (80062ec <__multadd+0x84>)
 80062ba:	480d      	ldr	r0, [pc, #52]	; (80062f0 <__multadd+0x88>)
 80062bc:	21b5      	movs	r1, #181	; 0xb5
 80062be:	f000 fe6b 	bl	8006f98 <__assert_func>
 80062c2:	6922      	ldr	r2, [r4, #16]
 80062c4:	3202      	adds	r2, #2
 80062c6:	f104 010c 	add.w	r1, r4, #12
 80062ca:	0092      	lsls	r2, r2, #2
 80062cc:	300c      	adds	r0, #12
 80062ce:	f7ff ff5b 	bl	8006188 <memcpy>
 80062d2:	4621      	mov	r1, r4
 80062d4:	4638      	mov	r0, r7
 80062d6:	f7ff ffa5 	bl	8006224 <_Bfree>
 80062da:	4644      	mov	r4, r8
 80062dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80062e0:	3501      	adds	r5, #1
 80062e2:	615e      	str	r6, [r3, #20]
 80062e4:	6125      	str	r5, [r4, #16]
 80062e6:	4620      	mov	r0, r4
 80062e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062ec:	08007b7f 	.word	0x08007b7f
 80062f0:	08007bf0 	.word	0x08007bf0

080062f4 <__hi0bits>:
 80062f4:	0c03      	lsrs	r3, r0, #16
 80062f6:	041b      	lsls	r3, r3, #16
 80062f8:	b9d3      	cbnz	r3, 8006330 <__hi0bits+0x3c>
 80062fa:	0400      	lsls	r0, r0, #16
 80062fc:	2310      	movs	r3, #16
 80062fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006302:	bf04      	itt	eq
 8006304:	0200      	lsleq	r0, r0, #8
 8006306:	3308      	addeq	r3, #8
 8006308:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800630c:	bf04      	itt	eq
 800630e:	0100      	lsleq	r0, r0, #4
 8006310:	3304      	addeq	r3, #4
 8006312:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006316:	bf04      	itt	eq
 8006318:	0080      	lsleq	r0, r0, #2
 800631a:	3302      	addeq	r3, #2
 800631c:	2800      	cmp	r0, #0
 800631e:	db05      	blt.n	800632c <__hi0bits+0x38>
 8006320:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006324:	f103 0301 	add.w	r3, r3, #1
 8006328:	bf08      	it	eq
 800632a:	2320      	moveq	r3, #32
 800632c:	4618      	mov	r0, r3
 800632e:	4770      	bx	lr
 8006330:	2300      	movs	r3, #0
 8006332:	e7e4      	b.n	80062fe <__hi0bits+0xa>

08006334 <__lo0bits>:
 8006334:	6803      	ldr	r3, [r0, #0]
 8006336:	f013 0207 	ands.w	r2, r3, #7
 800633a:	4601      	mov	r1, r0
 800633c:	d00b      	beq.n	8006356 <__lo0bits+0x22>
 800633e:	07da      	lsls	r2, r3, #31
 8006340:	d423      	bmi.n	800638a <__lo0bits+0x56>
 8006342:	0798      	lsls	r0, r3, #30
 8006344:	bf49      	itett	mi
 8006346:	085b      	lsrmi	r3, r3, #1
 8006348:	089b      	lsrpl	r3, r3, #2
 800634a:	2001      	movmi	r0, #1
 800634c:	600b      	strmi	r3, [r1, #0]
 800634e:	bf5c      	itt	pl
 8006350:	600b      	strpl	r3, [r1, #0]
 8006352:	2002      	movpl	r0, #2
 8006354:	4770      	bx	lr
 8006356:	b298      	uxth	r0, r3
 8006358:	b9a8      	cbnz	r0, 8006386 <__lo0bits+0x52>
 800635a:	0c1b      	lsrs	r3, r3, #16
 800635c:	2010      	movs	r0, #16
 800635e:	b2da      	uxtb	r2, r3
 8006360:	b90a      	cbnz	r2, 8006366 <__lo0bits+0x32>
 8006362:	3008      	adds	r0, #8
 8006364:	0a1b      	lsrs	r3, r3, #8
 8006366:	071a      	lsls	r2, r3, #28
 8006368:	bf04      	itt	eq
 800636a:	091b      	lsreq	r3, r3, #4
 800636c:	3004      	addeq	r0, #4
 800636e:	079a      	lsls	r2, r3, #30
 8006370:	bf04      	itt	eq
 8006372:	089b      	lsreq	r3, r3, #2
 8006374:	3002      	addeq	r0, #2
 8006376:	07da      	lsls	r2, r3, #31
 8006378:	d403      	bmi.n	8006382 <__lo0bits+0x4e>
 800637a:	085b      	lsrs	r3, r3, #1
 800637c:	f100 0001 	add.w	r0, r0, #1
 8006380:	d005      	beq.n	800638e <__lo0bits+0x5a>
 8006382:	600b      	str	r3, [r1, #0]
 8006384:	4770      	bx	lr
 8006386:	4610      	mov	r0, r2
 8006388:	e7e9      	b.n	800635e <__lo0bits+0x2a>
 800638a:	2000      	movs	r0, #0
 800638c:	4770      	bx	lr
 800638e:	2020      	movs	r0, #32
 8006390:	4770      	bx	lr
	...

08006394 <__i2b>:
 8006394:	b510      	push	{r4, lr}
 8006396:	460c      	mov	r4, r1
 8006398:	2101      	movs	r1, #1
 800639a:	f7ff ff03 	bl	80061a4 <_Balloc>
 800639e:	4602      	mov	r2, r0
 80063a0:	b928      	cbnz	r0, 80063ae <__i2b+0x1a>
 80063a2:	4b05      	ldr	r3, [pc, #20]	; (80063b8 <__i2b+0x24>)
 80063a4:	4805      	ldr	r0, [pc, #20]	; (80063bc <__i2b+0x28>)
 80063a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80063aa:	f000 fdf5 	bl	8006f98 <__assert_func>
 80063ae:	2301      	movs	r3, #1
 80063b0:	6144      	str	r4, [r0, #20]
 80063b2:	6103      	str	r3, [r0, #16]
 80063b4:	bd10      	pop	{r4, pc}
 80063b6:	bf00      	nop
 80063b8:	08007b7f 	.word	0x08007b7f
 80063bc:	08007bf0 	.word	0x08007bf0

080063c0 <__multiply>:
 80063c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c4:	4691      	mov	r9, r2
 80063c6:	690a      	ldr	r2, [r1, #16]
 80063c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	bfb8      	it	lt
 80063d0:	460b      	movlt	r3, r1
 80063d2:	460c      	mov	r4, r1
 80063d4:	bfbc      	itt	lt
 80063d6:	464c      	movlt	r4, r9
 80063d8:	4699      	movlt	r9, r3
 80063da:	6927      	ldr	r7, [r4, #16]
 80063dc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80063e0:	68a3      	ldr	r3, [r4, #8]
 80063e2:	6861      	ldr	r1, [r4, #4]
 80063e4:	eb07 060a 	add.w	r6, r7, sl
 80063e8:	42b3      	cmp	r3, r6
 80063ea:	b085      	sub	sp, #20
 80063ec:	bfb8      	it	lt
 80063ee:	3101      	addlt	r1, #1
 80063f0:	f7ff fed8 	bl	80061a4 <_Balloc>
 80063f4:	b930      	cbnz	r0, 8006404 <__multiply+0x44>
 80063f6:	4602      	mov	r2, r0
 80063f8:	4b44      	ldr	r3, [pc, #272]	; (800650c <__multiply+0x14c>)
 80063fa:	4845      	ldr	r0, [pc, #276]	; (8006510 <__multiply+0x150>)
 80063fc:	f240 115d 	movw	r1, #349	; 0x15d
 8006400:	f000 fdca 	bl	8006f98 <__assert_func>
 8006404:	f100 0514 	add.w	r5, r0, #20
 8006408:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800640c:	462b      	mov	r3, r5
 800640e:	2200      	movs	r2, #0
 8006410:	4543      	cmp	r3, r8
 8006412:	d321      	bcc.n	8006458 <__multiply+0x98>
 8006414:	f104 0314 	add.w	r3, r4, #20
 8006418:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800641c:	f109 0314 	add.w	r3, r9, #20
 8006420:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006424:	9202      	str	r2, [sp, #8]
 8006426:	1b3a      	subs	r2, r7, r4
 8006428:	3a15      	subs	r2, #21
 800642a:	f022 0203 	bic.w	r2, r2, #3
 800642e:	3204      	adds	r2, #4
 8006430:	f104 0115 	add.w	r1, r4, #21
 8006434:	428f      	cmp	r7, r1
 8006436:	bf38      	it	cc
 8006438:	2204      	movcc	r2, #4
 800643a:	9201      	str	r2, [sp, #4]
 800643c:	9a02      	ldr	r2, [sp, #8]
 800643e:	9303      	str	r3, [sp, #12]
 8006440:	429a      	cmp	r2, r3
 8006442:	d80c      	bhi.n	800645e <__multiply+0x9e>
 8006444:	2e00      	cmp	r6, #0
 8006446:	dd03      	ble.n	8006450 <__multiply+0x90>
 8006448:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800644c:	2b00      	cmp	r3, #0
 800644e:	d05a      	beq.n	8006506 <__multiply+0x146>
 8006450:	6106      	str	r6, [r0, #16]
 8006452:	b005      	add	sp, #20
 8006454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006458:	f843 2b04 	str.w	r2, [r3], #4
 800645c:	e7d8      	b.n	8006410 <__multiply+0x50>
 800645e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006462:	f1ba 0f00 	cmp.w	sl, #0
 8006466:	d024      	beq.n	80064b2 <__multiply+0xf2>
 8006468:	f104 0e14 	add.w	lr, r4, #20
 800646c:	46a9      	mov	r9, r5
 800646e:	f04f 0c00 	mov.w	ip, #0
 8006472:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006476:	f8d9 1000 	ldr.w	r1, [r9]
 800647a:	fa1f fb82 	uxth.w	fp, r2
 800647e:	b289      	uxth	r1, r1
 8006480:	fb0a 110b 	mla	r1, sl, fp, r1
 8006484:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006488:	f8d9 2000 	ldr.w	r2, [r9]
 800648c:	4461      	add	r1, ip
 800648e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006492:	fb0a c20b 	mla	r2, sl, fp, ip
 8006496:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800649a:	b289      	uxth	r1, r1
 800649c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80064a0:	4577      	cmp	r7, lr
 80064a2:	f849 1b04 	str.w	r1, [r9], #4
 80064a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80064aa:	d8e2      	bhi.n	8006472 <__multiply+0xb2>
 80064ac:	9a01      	ldr	r2, [sp, #4]
 80064ae:	f845 c002 	str.w	ip, [r5, r2]
 80064b2:	9a03      	ldr	r2, [sp, #12]
 80064b4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80064b8:	3304      	adds	r3, #4
 80064ba:	f1b9 0f00 	cmp.w	r9, #0
 80064be:	d020      	beq.n	8006502 <__multiply+0x142>
 80064c0:	6829      	ldr	r1, [r5, #0]
 80064c2:	f104 0c14 	add.w	ip, r4, #20
 80064c6:	46ae      	mov	lr, r5
 80064c8:	f04f 0a00 	mov.w	sl, #0
 80064cc:	f8bc b000 	ldrh.w	fp, [ip]
 80064d0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80064d4:	fb09 220b 	mla	r2, r9, fp, r2
 80064d8:	4492      	add	sl, r2
 80064da:	b289      	uxth	r1, r1
 80064dc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80064e0:	f84e 1b04 	str.w	r1, [lr], #4
 80064e4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80064e8:	f8be 1000 	ldrh.w	r1, [lr]
 80064ec:	0c12      	lsrs	r2, r2, #16
 80064ee:	fb09 1102 	mla	r1, r9, r2, r1
 80064f2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80064f6:	4567      	cmp	r7, ip
 80064f8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80064fc:	d8e6      	bhi.n	80064cc <__multiply+0x10c>
 80064fe:	9a01      	ldr	r2, [sp, #4]
 8006500:	50a9      	str	r1, [r5, r2]
 8006502:	3504      	adds	r5, #4
 8006504:	e79a      	b.n	800643c <__multiply+0x7c>
 8006506:	3e01      	subs	r6, #1
 8006508:	e79c      	b.n	8006444 <__multiply+0x84>
 800650a:	bf00      	nop
 800650c:	08007b7f 	.word	0x08007b7f
 8006510:	08007bf0 	.word	0x08007bf0

08006514 <__pow5mult>:
 8006514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006518:	4615      	mov	r5, r2
 800651a:	f012 0203 	ands.w	r2, r2, #3
 800651e:	4606      	mov	r6, r0
 8006520:	460f      	mov	r7, r1
 8006522:	d007      	beq.n	8006534 <__pow5mult+0x20>
 8006524:	4c25      	ldr	r4, [pc, #148]	; (80065bc <__pow5mult+0xa8>)
 8006526:	3a01      	subs	r2, #1
 8006528:	2300      	movs	r3, #0
 800652a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800652e:	f7ff fe9b 	bl	8006268 <__multadd>
 8006532:	4607      	mov	r7, r0
 8006534:	10ad      	asrs	r5, r5, #2
 8006536:	d03d      	beq.n	80065b4 <__pow5mult+0xa0>
 8006538:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800653a:	b97c      	cbnz	r4, 800655c <__pow5mult+0x48>
 800653c:	2010      	movs	r0, #16
 800653e:	f7ff fe1b 	bl	8006178 <malloc>
 8006542:	4602      	mov	r2, r0
 8006544:	6270      	str	r0, [r6, #36]	; 0x24
 8006546:	b928      	cbnz	r0, 8006554 <__pow5mult+0x40>
 8006548:	4b1d      	ldr	r3, [pc, #116]	; (80065c0 <__pow5mult+0xac>)
 800654a:	481e      	ldr	r0, [pc, #120]	; (80065c4 <__pow5mult+0xb0>)
 800654c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006550:	f000 fd22 	bl	8006f98 <__assert_func>
 8006554:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006558:	6004      	str	r4, [r0, #0]
 800655a:	60c4      	str	r4, [r0, #12]
 800655c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006560:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006564:	b94c      	cbnz	r4, 800657a <__pow5mult+0x66>
 8006566:	f240 2171 	movw	r1, #625	; 0x271
 800656a:	4630      	mov	r0, r6
 800656c:	f7ff ff12 	bl	8006394 <__i2b>
 8006570:	2300      	movs	r3, #0
 8006572:	f8c8 0008 	str.w	r0, [r8, #8]
 8006576:	4604      	mov	r4, r0
 8006578:	6003      	str	r3, [r0, #0]
 800657a:	f04f 0900 	mov.w	r9, #0
 800657e:	07eb      	lsls	r3, r5, #31
 8006580:	d50a      	bpl.n	8006598 <__pow5mult+0x84>
 8006582:	4639      	mov	r1, r7
 8006584:	4622      	mov	r2, r4
 8006586:	4630      	mov	r0, r6
 8006588:	f7ff ff1a 	bl	80063c0 <__multiply>
 800658c:	4639      	mov	r1, r7
 800658e:	4680      	mov	r8, r0
 8006590:	4630      	mov	r0, r6
 8006592:	f7ff fe47 	bl	8006224 <_Bfree>
 8006596:	4647      	mov	r7, r8
 8006598:	106d      	asrs	r5, r5, #1
 800659a:	d00b      	beq.n	80065b4 <__pow5mult+0xa0>
 800659c:	6820      	ldr	r0, [r4, #0]
 800659e:	b938      	cbnz	r0, 80065b0 <__pow5mult+0x9c>
 80065a0:	4622      	mov	r2, r4
 80065a2:	4621      	mov	r1, r4
 80065a4:	4630      	mov	r0, r6
 80065a6:	f7ff ff0b 	bl	80063c0 <__multiply>
 80065aa:	6020      	str	r0, [r4, #0]
 80065ac:	f8c0 9000 	str.w	r9, [r0]
 80065b0:	4604      	mov	r4, r0
 80065b2:	e7e4      	b.n	800657e <__pow5mult+0x6a>
 80065b4:	4638      	mov	r0, r7
 80065b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065ba:	bf00      	nop
 80065bc:	08007d40 	.word	0x08007d40
 80065c0:	08007b0d 	.word	0x08007b0d
 80065c4:	08007bf0 	.word	0x08007bf0

080065c8 <__lshift>:
 80065c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065cc:	460c      	mov	r4, r1
 80065ce:	6849      	ldr	r1, [r1, #4]
 80065d0:	6923      	ldr	r3, [r4, #16]
 80065d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80065d6:	68a3      	ldr	r3, [r4, #8]
 80065d8:	4607      	mov	r7, r0
 80065da:	4691      	mov	r9, r2
 80065dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80065e0:	f108 0601 	add.w	r6, r8, #1
 80065e4:	42b3      	cmp	r3, r6
 80065e6:	db0b      	blt.n	8006600 <__lshift+0x38>
 80065e8:	4638      	mov	r0, r7
 80065ea:	f7ff fddb 	bl	80061a4 <_Balloc>
 80065ee:	4605      	mov	r5, r0
 80065f0:	b948      	cbnz	r0, 8006606 <__lshift+0x3e>
 80065f2:	4602      	mov	r2, r0
 80065f4:	4b2a      	ldr	r3, [pc, #168]	; (80066a0 <__lshift+0xd8>)
 80065f6:	482b      	ldr	r0, [pc, #172]	; (80066a4 <__lshift+0xdc>)
 80065f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80065fc:	f000 fccc 	bl	8006f98 <__assert_func>
 8006600:	3101      	adds	r1, #1
 8006602:	005b      	lsls	r3, r3, #1
 8006604:	e7ee      	b.n	80065e4 <__lshift+0x1c>
 8006606:	2300      	movs	r3, #0
 8006608:	f100 0114 	add.w	r1, r0, #20
 800660c:	f100 0210 	add.w	r2, r0, #16
 8006610:	4618      	mov	r0, r3
 8006612:	4553      	cmp	r3, sl
 8006614:	db37      	blt.n	8006686 <__lshift+0xbe>
 8006616:	6920      	ldr	r0, [r4, #16]
 8006618:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800661c:	f104 0314 	add.w	r3, r4, #20
 8006620:	f019 091f 	ands.w	r9, r9, #31
 8006624:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006628:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800662c:	d02f      	beq.n	800668e <__lshift+0xc6>
 800662e:	f1c9 0e20 	rsb	lr, r9, #32
 8006632:	468a      	mov	sl, r1
 8006634:	f04f 0c00 	mov.w	ip, #0
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	fa02 f209 	lsl.w	r2, r2, r9
 800663e:	ea42 020c 	orr.w	r2, r2, ip
 8006642:	f84a 2b04 	str.w	r2, [sl], #4
 8006646:	f853 2b04 	ldr.w	r2, [r3], #4
 800664a:	4298      	cmp	r0, r3
 800664c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006650:	d8f2      	bhi.n	8006638 <__lshift+0x70>
 8006652:	1b03      	subs	r3, r0, r4
 8006654:	3b15      	subs	r3, #21
 8006656:	f023 0303 	bic.w	r3, r3, #3
 800665a:	3304      	adds	r3, #4
 800665c:	f104 0215 	add.w	r2, r4, #21
 8006660:	4290      	cmp	r0, r2
 8006662:	bf38      	it	cc
 8006664:	2304      	movcc	r3, #4
 8006666:	f841 c003 	str.w	ip, [r1, r3]
 800666a:	f1bc 0f00 	cmp.w	ip, #0
 800666e:	d001      	beq.n	8006674 <__lshift+0xac>
 8006670:	f108 0602 	add.w	r6, r8, #2
 8006674:	3e01      	subs	r6, #1
 8006676:	4638      	mov	r0, r7
 8006678:	612e      	str	r6, [r5, #16]
 800667a:	4621      	mov	r1, r4
 800667c:	f7ff fdd2 	bl	8006224 <_Bfree>
 8006680:	4628      	mov	r0, r5
 8006682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006686:	f842 0f04 	str.w	r0, [r2, #4]!
 800668a:	3301      	adds	r3, #1
 800668c:	e7c1      	b.n	8006612 <__lshift+0x4a>
 800668e:	3904      	subs	r1, #4
 8006690:	f853 2b04 	ldr.w	r2, [r3], #4
 8006694:	f841 2f04 	str.w	r2, [r1, #4]!
 8006698:	4298      	cmp	r0, r3
 800669a:	d8f9      	bhi.n	8006690 <__lshift+0xc8>
 800669c:	e7ea      	b.n	8006674 <__lshift+0xac>
 800669e:	bf00      	nop
 80066a0:	08007b7f 	.word	0x08007b7f
 80066a4:	08007bf0 	.word	0x08007bf0

080066a8 <__mcmp>:
 80066a8:	b530      	push	{r4, r5, lr}
 80066aa:	6902      	ldr	r2, [r0, #16]
 80066ac:	690c      	ldr	r4, [r1, #16]
 80066ae:	1b12      	subs	r2, r2, r4
 80066b0:	d10e      	bne.n	80066d0 <__mcmp+0x28>
 80066b2:	f100 0314 	add.w	r3, r0, #20
 80066b6:	3114      	adds	r1, #20
 80066b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80066bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80066c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80066c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80066c8:	42a5      	cmp	r5, r4
 80066ca:	d003      	beq.n	80066d4 <__mcmp+0x2c>
 80066cc:	d305      	bcc.n	80066da <__mcmp+0x32>
 80066ce:	2201      	movs	r2, #1
 80066d0:	4610      	mov	r0, r2
 80066d2:	bd30      	pop	{r4, r5, pc}
 80066d4:	4283      	cmp	r3, r0
 80066d6:	d3f3      	bcc.n	80066c0 <__mcmp+0x18>
 80066d8:	e7fa      	b.n	80066d0 <__mcmp+0x28>
 80066da:	f04f 32ff 	mov.w	r2, #4294967295
 80066de:	e7f7      	b.n	80066d0 <__mcmp+0x28>

080066e0 <__mdiff>:
 80066e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e4:	460c      	mov	r4, r1
 80066e6:	4606      	mov	r6, r0
 80066e8:	4611      	mov	r1, r2
 80066ea:	4620      	mov	r0, r4
 80066ec:	4690      	mov	r8, r2
 80066ee:	f7ff ffdb 	bl	80066a8 <__mcmp>
 80066f2:	1e05      	subs	r5, r0, #0
 80066f4:	d110      	bne.n	8006718 <__mdiff+0x38>
 80066f6:	4629      	mov	r1, r5
 80066f8:	4630      	mov	r0, r6
 80066fa:	f7ff fd53 	bl	80061a4 <_Balloc>
 80066fe:	b930      	cbnz	r0, 800670e <__mdiff+0x2e>
 8006700:	4b3a      	ldr	r3, [pc, #232]	; (80067ec <__mdiff+0x10c>)
 8006702:	4602      	mov	r2, r0
 8006704:	f240 2132 	movw	r1, #562	; 0x232
 8006708:	4839      	ldr	r0, [pc, #228]	; (80067f0 <__mdiff+0x110>)
 800670a:	f000 fc45 	bl	8006f98 <__assert_func>
 800670e:	2301      	movs	r3, #1
 8006710:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006714:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006718:	bfa4      	itt	ge
 800671a:	4643      	movge	r3, r8
 800671c:	46a0      	movge	r8, r4
 800671e:	4630      	mov	r0, r6
 8006720:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006724:	bfa6      	itte	ge
 8006726:	461c      	movge	r4, r3
 8006728:	2500      	movge	r5, #0
 800672a:	2501      	movlt	r5, #1
 800672c:	f7ff fd3a 	bl	80061a4 <_Balloc>
 8006730:	b920      	cbnz	r0, 800673c <__mdiff+0x5c>
 8006732:	4b2e      	ldr	r3, [pc, #184]	; (80067ec <__mdiff+0x10c>)
 8006734:	4602      	mov	r2, r0
 8006736:	f44f 7110 	mov.w	r1, #576	; 0x240
 800673a:	e7e5      	b.n	8006708 <__mdiff+0x28>
 800673c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006740:	6926      	ldr	r6, [r4, #16]
 8006742:	60c5      	str	r5, [r0, #12]
 8006744:	f104 0914 	add.w	r9, r4, #20
 8006748:	f108 0514 	add.w	r5, r8, #20
 800674c:	f100 0e14 	add.w	lr, r0, #20
 8006750:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006754:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006758:	f108 0210 	add.w	r2, r8, #16
 800675c:	46f2      	mov	sl, lr
 800675e:	2100      	movs	r1, #0
 8006760:	f859 3b04 	ldr.w	r3, [r9], #4
 8006764:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006768:	fa1f f883 	uxth.w	r8, r3
 800676c:	fa11 f18b 	uxtah	r1, r1, fp
 8006770:	0c1b      	lsrs	r3, r3, #16
 8006772:	eba1 0808 	sub.w	r8, r1, r8
 8006776:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800677a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800677e:	fa1f f888 	uxth.w	r8, r8
 8006782:	1419      	asrs	r1, r3, #16
 8006784:	454e      	cmp	r6, r9
 8006786:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800678a:	f84a 3b04 	str.w	r3, [sl], #4
 800678e:	d8e7      	bhi.n	8006760 <__mdiff+0x80>
 8006790:	1b33      	subs	r3, r6, r4
 8006792:	3b15      	subs	r3, #21
 8006794:	f023 0303 	bic.w	r3, r3, #3
 8006798:	3304      	adds	r3, #4
 800679a:	3415      	adds	r4, #21
 800679c:	42a6      	cmp	r6, r4
 800679e:	bf38      	it	cc
 80067a0:	2304      	movcc	r3, #4
 80067a2:	441d      	add	r5, r3
 80067a4:	4473      	add	r3, lr
 80067a6:	469e      	mov	lr, r3
 80067a8:	462e      	mov	r6, r5
 80067aa:	4566      	cmp	r6, ip
 80067ac:	d30e      	bcc.n	80067cc <__mdiff+0xec>
 80067ae:	f10c 0203 	add.w	r2, ip, #3
 80067b2:	1b52      	subs	r2, r2, r5
 80067b4:	f022 0203 	bic.w	r2, r2, #3
 80067b8:	3d03      	subs	r5, #3
 80067ba:	45ac      	cmp	ip, r5
 80067bc:	bf38      	it	cc
 80067be:	2200      	movcc	r2, #0
 80067c0:	441a      	add	r2, r3
 80067c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80067c6:	b17b      	cbz	r3, 80067e8 <__mdiff+0x108>
 80067c8:	6107      	str	r7, [r0, #16]
 80067ca:	e7a3      	b.n	8006714 <__mdiff+0x34>
 80067cc:	f856 8b04 	ldr.w	r8, [r6], #4
 80067d0:	fa11 f288 	uxtah	r2, r1, r8
 80067d4:	1414      	asrs	r4, r2, #16
 80067d6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80067da:	b292      	uxth	r2, r2
 80067dc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80067e0:	f84e 2b04 	str.w	r2, [lr], #4
 80067e4:	1421      	asrs	r1, r4, #16
 80067e6:	e7e0      	b.n	80067aa <__mdiff+0xca>
 80067e8:	3f01      	subs	r7, #1
 80067ea:	e7ea      	b.n	80067c2 <__mdiff+0xe2>
 80067ec:	08007b7f 	.word	0x08007b7f
 80067f0:	08007bf0 	.word	0x08007bf0

080067f4 <__d2b>:
 80067f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80067f8:	4689      	mov	r9, r1
 80067fa:	2101      	movs	r1, #1
 80067fc:	ec57 6b10 	vmov	r6, r7, d0
 8006800:	4690      	mov	r8, r2
 8006802:	f7ff fccf 	bl	80061a4 <_Balloc>
 8006806:	4604      	mov	r4, r0
 8006808:	b930      	cbnz	r0, 8006818 <__d2b+0x24>
 800680a:	4602      	mov	r2, r0
 800680c:	4b25      	ldr	r3, [pc, #148]	; (80068a4 <__d2b+0xb0>)
 800680e:	4826      	ldr	r0, [pc, #152]	; (80068a8 <__d2b+0xb4>)
 8006810:	f240 310a 	movw	r1, #778	; 0x30a
 8006814:	f000 fbc0 	bl	8006f98 <__assert_func>
 8006818:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800681c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006820:	bb35      	cbnz	r5, 8006870 <__d2b+0x7c>
 8006822:	2e00      	cmp	r6, #0
 8006824:	9301      	str	r3, [sp, #4]
 8006826:	d028      	beq.n	800687a <__d2b+0x86>
 8006828:	4668      	mov	r0, sp
 800682a:	9600      	str	r6, [sp, #0]
 800682c:	f7ff fd82 	bl	8006334 <__lo0bits>
 8006830:	9900      	ldr	r1, [sp, #0]
 8006832:	b300      	cbz	r0, 8006876 <__d2b+0x82>
 8006834:	9a01      	ldr	r2, [sp, #4]
 8006836:	f1c0 0320 	rsb	r3, r0, #32
 800683a:	fa02 f303 	lsl.w	r3, r2, r3
 800683e:	430b      	orrs	r3, r1
 8006840:	40c2      	lsrs	r2, r0
 8006842:	6163      	str	r3, [r4, #20]
 8006844:	9201      	str	r2, [sp, #4]
 8006846:	9b01      	ldr	r3, [sp, #4]
 8006848:	61a3      	str	r3, [r4, #24]
 800684a:	2b00      	cmp	r3, #0
 800684c:	bf14      	ite	ne
 800684e:	2202      	movne	r2, #2
 8006850:	2201      	moveq	r2, #1
 8006852:	6122      	str	r2, [r4, #16]
 8006854:	b1d5      	cbz	r5, 800688c <__d2b+0x98>
 8006856:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800685a:	4405      	add	r5, r0
 800685c:	f8c9 5000 	str.w	r5, [r9]
 8006860:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006864:	f8c8 0000 	str.w	r0, [r8]
 8006868:	4620      	mov	r0, r4
 800686a:	b003      	add	sp, #12
 800686c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006870:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006874:	e7d5      	b.n	8006822 <__d2b+0x2e>
 8006876:	6161      	str	r1, [r4, #20]
 8006878:	e7e5      	b.n	8006846 <__d2b+0x52>
 800687a:	a801      	add	r0, sp, #4
 800687c:	f7ff fd5a 	bl	8006334 <__lo0bits>
 8006880:	9b01      	ldr	r3, [sp, #4]
 8006882:	6163      	str	r3, [r4, #20]
 8006884:	2201      	movs	r2, #1
 8006886:	6122      	str	r2, [r4, #16]
 8006888:	3020      	adds	r0, #32
 800688a:	e7e3      	b.n	8006854 <__d2b+0x60>
 800688c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006890:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006894:	f8c9 0000 	str.w	r0, [r9]
 8006898:	6918      	ldr	r0, [r3, #16]
 800689a:	f7ff fd2b 	bl	80062f4 <__hi0bits>
 800689e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80068a2:	e7df      	b.n	8006864 <__d2b+0x70>
 80068a4:	08007b7f 	.word	0x08007b7f
 80068a8:	08007bf0 	.word	0x08007bf0

080068ac <_calloc_r>:
 80068ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068ae:	fba1 2402 	umull	r2, r4, r1, r2
 80068b2:	b94c      	cbnz	r4, 80068c8 <_calloc_r+0x1c>
 80068b4:	4611      	mov	r1, r2
 80068b6:	9201      	str	r2, [sp, #4]
 80068b8:	f000 f87a 	bl	80069b0 <_malloc_r>
 80068bc:	9a01      	ldr	r2, [sp, #4]
 80068be:	4605      	mov	r5, r0
 80068c0:	b930      	cbnz	r0, 80068d0 <_calloc_r+0x24>
 80068c2:	4628      	mov	r0, r5
 80068c4:	b003      	add	sp, #12
 80068c6:	bd30      	pop	{r4, r5, pc}
 80068c8:	220c      	movs	r2, #12
 80068ca:	6002      	str	r2, [r0, #0]
 80068cc:	2500      	movs	r5, #0
 80068ce:	e7f8      	b.n	80068c2 <_calloc_r+0x16>
 80068d0:	4621      	mov	r1, r4
 80068d2:	f7fe f84d 	bl	8004970 <memset>
 80068d6:	e7f4      	b.n	80068c2 <_calloc_r+0x16>

080068d8 <_free_r>:
 80068d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068da:	2900      	cmp	r1, #0
 80068dc:	d044      	beq.n	8006968 <_free_r+0x90>
 80068de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068e2:	9001      	str	r0, [sp, #4]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f1a1 0404 	sub.w	r4, r1, #4
 80068ea:	bfb8      	it	lt
 80068ec:	18e4      	addlt	r4, r4, r3
 80068ee:	f000 fcdf 	bl	80072b0 <__malloc_lock>
 80068f2:	4a1e      	ldr	r2, [pc, #120]	; (800696c <_free_r+0x94>)
 80068f4:	9801      	ldr	r0, [sp, #4]
 80068f6:	6813      	ldr	r3, [r2, #0]
 80068f8:	b933      	cbnz	r3, 8006908 <_free_r+0x30>
 80068fa:	6063      	str	r3, [r4, #4]
 80068fc:	6014      	str	r4, [r2, #0]
 80068fe:	b003      	add	sp, #12
 8006900:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006904:	f000 bcda 	b.w	80072bc <__malloc_unlock>
 8006908:	42a3      	cmp	r3, r4
 800690a:	d908      	bls.n	800691e <_free_r+0x46>
 800690c:	6825      	ldr	r5, [r4, #0]
 800690e:	1961      	adds	r1, r4, r5
 8006910:	428b      	cmp	r3, r1
 8006912:	bf01      	itttt	eq
 8006914:	6819      	ldreq	r1, [r3, #0]
 8006916:	685b      	ldreq	r3, [r3, #4]
 8006918:	1949      	addeq	r1, r1, r5
 800691a:	6021      	streq	r1, [r4, #0]
 800691c:	e7ed      	b.n	80068fa <_free_r+0x22>
 800691e:	461a      	mov	r2, r3
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	b10b      	cbz	r3, 8006928 <_free_r+0x50>
 8006924:	42a3      	cmp	r3, r4
 8006926:	d9fa      	bls.n	800691e <_free_r+0x46>
 8006928:	6811      	ldr	r1, [r2, #0]
 800692a:	1855      	adds	r5, r2, r1
 800692c:	42a5      	cmp	r5, r4
 800692e:	d10b      	bne.n	8006948 <_free_r+0x70>
 8006930:	6824      	ldr	r4, [r4, #0]
 8006932:	4421      	add	r1, r4
 8006934:	1854      	adds	r4, r2, r1
 8006936:	42a3      	cmp	r3, r4
 8006938:	6011      	str	r1, [r2, #0]
 800693a:	d1e0      	bne.n	80068fe <_free_r+0x26>
 800693c:	681c      	ldr	r4, [r3, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	6053      	str	r3, [r2, #4]
 8006942:	4421      	add	r1, r4
 8006944:	6011      	str	r1, [r2, #0]
 8006946:	e7da      	b.n	80068fe <_free_r+0x26>
 8006948:	d902      	bls.n	8006950 <_free_r+0x78>
 800694a:	230c      	movs	r3, #12
 800694c:	6003      	str	r3, [r0, #0]
 800694e:	e7d6      	b.n	80068fe <_free_r+0x26>
 8006950:	6825      	ldr	r5, [r4, #0]
 8006952:	1961      	adds	r1, r4, r5
 8006954:	428b      	cmp	r3, r1
 8006956:	bf04      	itt	eq
 8006958:	6819      	ldreq	r1, [r3, #0]
 800695a:	685b      	ldreq	r3, [r3, #4]
 800695c:	6063      	str	r3, [r4, #4]
 800695e:	bf04      	itt	eq
 8006960:	1949      	addeq	r1, r1, r5
 8006962:	6021      	streq	r1, [r4, #0]
 8006964:	6054      	str	r4, [r2, #4]
 8006966:	e7ca      	b.n	80068fe <_free_r+0x26>
 8006968:	b003      	add	sp, #12
 800696a:	bd30      	pop	{r4, r5, pc}
 800696c:	200003b8 	.word	0x200003b8

08006970 <sbrk_aligned>:
 8006970:	b570      	push	{r4, r5, r6, lr}
 8006972:	4e0e      	ldr	r6, [pc, #56]	; (80069ac <sbrk_aligned+0x3c>)
 8006974:	460c      	mov	r4, r1
 8006976:	6831      	ldr	r1, [r6, #0]
 8006978:	4605      	mov	r5, r0
 800697a:	b911      	cbnz	r1, 8006982 <sbrk_aligned+0x12>
 800697c:	f000 f9e6 	bl	8006d4c <_sbrk_r>
 8006980:	6030      	str	r0, [r6, #0]
 8006982:	4621      	mov	r1, r4
 8006984:	4628      	mov	r0, r5
 8006986:	f000 f9e1 	bl	8006d4c <_sbrk_r>
 800698a:	1c43      	adds	r3, r0, #1
 800698c:	d00a      	beq.n	80069a4 <sbrk_aligned+0x34>
 800698e:	1cc4      	adds	r4, r0, #3
 8006990:	f024 0403 	bic.w	r4, r4, #3
 8006994:	42a0      	cmp	r0, r4
 8006996:	d007      	beq.n	80069a8 <sbrk_aligned+0x38>
 8006998:	1a21      	subs	r1, r4, r0
 800699a:	4628      	mov	r0, r5
 800699c:	f000 f9d6 	bl	8006d4c <_sbrk_r>
 80069a0:	3001      	adds	r0, #1
 80069a2:	d101      	bne.n	80069a8 <sbrk_aligned+0x38>
 80069a4:	f04f 34ff 	mov.w	r4, #4294967295
 80069a8:	4620      	mov	r0, r4
 80069aa:	bd70      	pop	{r4, r5, r6, pc}
 80069ac:	200003bc 	.word	0x200003bc

080069b0 <_malloc_r>:
 80069b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069b4:	1ccd      	adds	r5, r1, #3
 80069b6:	f025 0503 	bic.w	r5, r5, #3
 80069ba:	3508      	adds	r5, #8
 80069bc:	2d0c      	cmp	r5, #12
 80069be:	bf38      	it	cc
 80069c0:	250c      	movcc	r5, #12
 80069c2:	2d00      	cmp	r5, #0
 80069c4:	4607      	mov	r7, r0
 80069c6:	db01      	blt.n	80069cc <_malloc_r+0x1c>
 80069c8:	42a9      	cmp	r1, r5
 80069ca:	d905      	bls.n	80069d8 <_malloc_r+0x28>
 80069cc:	230c      	movs	r3, #12
 80069ce:	603b      	str	r3, [r7, #0]
 80069d0:	2600      	movs	r6, #0
 80069d2:	4630      	mov	r0, r6
 80069d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069d8:	4e2e      	ldr	r6, [pc, #184]	; (8006a94 <_malloc_r+0xe4>)
 80069da:	f000 fc69 	bl	80072b0 <__malloc_lock>
 80069de:	6833      	ldr	r3, [r6, #0]
 80069e0:	461c      	mov	r4, r3
 80069e2:	bb34      	cbnz	r4, 8006a32 <_malloc_r+0x82>
 80069e4:	4629      	mov	r1, r5
 80069e6:	4638      	mov	r0, r7
 80069e8:	f7ff ffc2 	bl	8006970 <sbrk_aligned>
 80069ec:	1c43      	adds	r3, r0, #1
 80069ee:	4604      	mov	r4, r0
 80069f0:	d14d      	bne.n	8006a8e <_malloc_r+0xde>
 80069f2:	6834      	ldr	r4, [r6, #0]
 80069f4:	4626      	mov	r6, r4
 80069f6:	2e00      	cmp	r6, #0
 80069f8:	d140      	bne.n	8006a7c <_malloc_r+0xcc>
 80069fa:	6823      	ldr	r3, [r4, #0]
 80069fc:	4631      	mov	r1, r6
 80069fe:	4638      	mov	r0, r7
 8006a00:	eb04 0803 	add.w	r8, r4, r3
 8006a04:	f000 f9a2 	bl	8006d4c <_sbrk_r>
 8006a08:	4580      	cmp	r8, r0
 8006a0a:	d13a      	bne.n	8006a82 <_malloc_r+0xd2>
 8006a0c:	6821      	ldr	r1, [r4, #0]
 8006a0e:	3503      	adds	r5, #3
 8006a10:	1a6d      	subs	r5, r5, r1
 8006a12:	f025 0503 	bic.w	r5, r5, #3
 8006a16:	3508      	adds	r5, #8
 8006a18:	2d0c      	cmp	r5, #12
 8006a1a:	bf38      	it	cc
 8006a1c:	250c      	movcc	r5, #12
 8006a1e:	4629      	mov	r1, r5
 8006a20:	4638      	mov	r0, r7
 8006a22:	f7ff ffa5 	bl	8006970 <sbrk_aligned>
 8006a26:	3001      	adds	r0, #1
 8006a28:	d02b      	beq.n	8006a82 <_malloc_r+0xd2>
 8006a2a:	6823      	ldr	r3, [r4, #0]
 8006a2c:	442b      	add	r3, r5
 8006a2e:	6023      	str	r3, [r4, #0]
 8006a30:	e00e      	b.n	8006a50 <_malloc_r+0xa0>
 8006a32:	6822      	ldr	r2, [r4, #0]
 8006a34:	1b52      	subs	r2, r2, r5
 8006a36:	d41e      	bmi.n	8006a76 <_malloc_r+0xc6>
 8006a38:	2a0b      	cmp	r2, #11
 8006a3a:	d916      	bls.n	8006a6a <_malloc_r+0xba>
 8006a3c:	1961      	adds	r1, r4, r5
 8006a3e:	42a3      	cmp	r3, r4
 8006a40:	6025      	str	r5, [r4, #0]
 8006a42:	bf18      	it	ne
 8006a44:	6059      	strne	r1, [r3, #4]
 8006a46:	6863      	ldr	r3, [r4, #4]
 8006a48:	bf08      	it	eq
 8006a4a:	6031      	streq	r1, [r6, #0]
 8006a4c:	5162      	str	r2, [r4, r5]
 8006a4e:	604b      	str	r3, [r1, #4]
 8006a50:	4638      	mov	r0, r7
 8006a52:	f104 060b 	add.w	r6, r4, #11
 8006a56:	f000 fc31 	bl	80072bc <__malloc_unlock>
 8006a5a:	f026 0607 	bic.w	r6, r6, #7
 8006a5e:	1d23      	adds	r3, r4, #4
 8006a60:	1af2      	subs	r2, r6, r3
 8006a62:	d0b6      	beq.n	80069d2 <_malloc_r+0x22>
 8006a64:	1b9b      	subs	r3, r3, r6
 8006a66:	50a3      	str	r3, [r4, r2]
 8006a68:	e7b3      	b.n	80069d2 <_malloc_r+0x22>
 8006a6a:	6862      	ldr	r2, [r4, #4]
 8006a6c:	42a3      	cmp	r3, r4
 8006a6e:	bf0c      	ite	eq
 8006a70:	6032      	streq	r2, [r6, #0]
 8006a72:	605a      	strne	r2, [r3, #4]
 8006a74:	e7ec      	b.n	8006a50 <_malloc_r+0xa0>
 8006a76:	4623      	mov	r3, r4
 8006a78:	6864      	ldr	r4, [r4, #4]
 8006a7a:	e7b2      	b.n	80069e2 <_malloc_r+0x32>
 8006a7c:	4634      	mov	r4, r6
 8006a7e:	6876      	ldr	r6, [r6, #4]
 8006a80:	e7b9      	b.n	80069f6 <_malloc_r+0x46>
 8006a82:	230c      	movs	r3, #12
 8006a84:	603b      	str	r3, [r7, #0]
 8006a86:	4638      	mov	r0, r7
 8006a88:	f000 fc18 	bl	80072bc <__malloc_unlock>
 8006a8c:	e7a1      	b.n	80069d2 <_malloc_r+0x22>
 8006a8e:	6025      	str	r5, [r4, #0]
 8006a90:	e7de      	b.n	8006a50 <_malloc_r+0xa0>
 8006a92:	bf00      	nop
 8006a94:	200003b8 	.word	0x200003b8

08006a98 <__sfputc_r>:
 8006a98:	6893      	ldr	r3, [r2, #8]
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	b410      	push	{r4}
 8006aa0:	6093      	str	r3, [r2, #8]
 8006aa2:	da08      	bge.n	8006ab6 <__sfputc_r+0x1e>
 8006aa4:	6994      	ldr	r4, [r2, #24]
 8006aa6:	42a3      	cmp	r3, r4
 8006aa8:	db01      	blt.n	8006aae <__sfputc_r+0x16>
 8006aaa:	290a      	cmp	r1, #10
 8006aac:	d103      	bne.n	8006ab6 <__sfputc_r+0x1e>
 8006aae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ab2:	f000 b99f 	b.w	8006df4 <__swbuf_r>
 8006ab6:	6813      	ldr	r3, [r2, #0]
 8006ab8:	1c58      	adds	r0, r3, #1
 8006aba:	6010      	str	r0, [r2, #0]
 8006abc:	7019      	strb	r1, [r3, #0]
 8006abe:	4608      	mov	r0, r1
 8006ac0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ac4:	4770      	bx	lr

08006ac6 <__sfputs_r>:
 8006ac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac8:	4606      	mov	r6, r0
 8006aca:	460f      	mov	r7, r1
 8006acc:	4614      	mov	r4, r2
 8006ace:	18d5      	adds	r5, r2, r3
 8006ad0:	42ac      	cmp	r4, r5
 8006ad2:	d101      	bne.n	8006ad8 <__sfputs_r+0x12>
 8006ad4:	2000      	movs	r0, #0
 8006ad6:	e007      	b.n	8006ae8 <__sfputs_r+0x22>
 8006ad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006adc:	463a      	mov	r2, r7
 8006ade:	4630      	mov	r0, r6
 8006ae0:	f7ff ffda 	bl	8006a98 <__sfputc_r>
 8006ae4:	1c43      	adds	r3, r0, #1
 8006ae6:	d1f3      	bne.n	8006ad0 <__sfputs_r+0xa>
 8006ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006aec <_vfiprintf_r>:
 8006aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af0:	460d      	mov	r5, r1
 8006af2:	b09d      	sub	sp, #116	; 0x74
 8006af4:	4614      	mov	r4, r2
 8006af6:	4698      	mov	r8, r3
 8006af8:	4606      	mov	r6, r0
 8006afa:	b118      	cbz	r0, 8006b04 <_vfiprintf_r+0x18>
 8006afc:	6983      	ldr	r3, [r0, #24]
 8006afe:	b90b      	cbnz	r3, 8006b04 <_vfiprintf_r+0x18>
 8006b00:	f7ff fa94 	bl	800602c <__sinit>
 8006b04:	4b89      	ldr	r3, [pc, #548]	; (8006d2c <_vfiprintf_r+0x240>)
 8006b06:	429d      	cmp	r5, r3
 8006b08:	d11b      	bne.n	8006b42 <_vfiprintf_r+0x56>
 8006b0a:	6875      	ldr	r5, [r6, #4]
 8006b0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b0e:	07d9      	lsls	r1, r3, #31
 8006b10:	d405      	bmi.n	8006b1e <_vfiprintf_r+0x32>
 8006b12:	89ab      	ldrh	r3, [r5, #12]
 8006b14:	059a      	lsls	r2, r3, #22
 8006b16:	d402      	bmi.n	8006b1e <_vfiprintf_r+0x32>
 8006b18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b1a:	f7ff fb2a 	bl	8006172 <__retarget_lock_acquire_recursive>
 8006b1e:	89ab      	ldrh	r3, [r5, #12]
 8006b20:	071b      	lsls	r3, r3, #28
 8006b22:	d501      	bpl.n	8006b28 <_vfiprintf_r+0x3c>
 8006b24:	692b      	ldr	r3, [r5, #16]
 8006b26:	b9eb      	cbnz	r3, 8006b64 <_vfiprintf_r+0x78>
 8006b28:	4629      	mov	r1, r5
 8006b2a:	4630      	mov	r0, r6
 8006b2c:	f000 f9c6 	bl	8006ebc <__swsetup_r>
 8006b30:	b1c0      	cbz	r0, 8006b64 <_vfiprintf_r+0x78>
 8006b32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b34:	07dc      	lsls	r4, r3, #31
 8006b36:	d50e      	bpl.n	8006b56 <_vfiprintf_r+0x6a>
 8006b38:	f04f 30ff 	mov.w	r0, #4294967295
 8006b3c:	b01d      	add	sp, #116	; 0x74
 8006b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b42:	4b7b      	ldr	r3, [pc, #492]	; (8006d30 <_vfiprintf_r+0x244>)
 8006b44:	429d      	cmp	r5, r3
 8006b46:	d101      	bne.n	8006b4c <_vfiprintf_r+0x60>
 8006b48:	68b5      	ldr	r5, [r6, #8]
 8006b4a:	e7df      	b.n	8006b0c <_vfiprintf_r+0x20>
 8006b4c:	4b79      	ldr	r3, [pc, #484]	; (8006d34 <_vfiprintf_r+0x248>)
 8006b4e:	429d      	cmp	r5, r3
 8006b50:	bf08      	it	eq
 8006b52:	68f5      	ldreq	r5, [r6, #12]
 8006b54:	e7da      	b.n	8006b0c <_vfiprintf_r+0x20>
 8006b56:	89ab      	ldrh	r3, [r5, #12]
 8006b58:	0598      	lsls	r0, r3, #22
 8006b5a:	d4ed      	bmi.n	8006b38 <_vfiprintf_r+0x4c>
 8006b5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b5e:	f7ff fb09 	bl	8006174 <__retarget_lock_release_recursive>
 8006b62:	e7e9      	b.n	8006b38 <_vfiprintf_r+0x4c>
 8006b64:	2300      	movs	r3, #0
 8006b66:	9309      	str	r3, [sp, #36]	; 0x24
 8006b68:	2320      	movs	r3, #32
 8006b6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b72:	2330      	movs	r3, #48	; 0x30
 8006b74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006d38 <_vfiprintf_r+0x24c>
 8006b78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b7c:	f04f 0901 	mov.w	r9, #1
 8006b80:	4623      	mov	r3, r4
 8006b82:	469a      	mov	sl, r3
 8006b84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b88:	b10a      	cbz	r2, 8006b8e <_vfiprintf_r+0xa2>
 8006b8a:	2a25      	cmp	r2, #37	; 0x25
 8006b8c:	d1f9      	bne.n	8006b82 <_vfiprintf_r+0x96>
 8006b8e:	ebba 0b04 	subs.w	fp, sl, r4
 8006b92:	d00b      	beq.n	8006bac <_vfiprintf_r+0xc0>
 8006b94:	465b      	mov	r3, fp
 8006b96:	4622      	mov	r2, r4
 8006b98:	4629      	mov	r1, r5
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	f7ff ff93 	bl	8006ac6 <__sfputs_r>
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	f000 80aa 	beq.w	8006cfa <_vfiprintf_r+0x20e>
 8006ba6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ba8:	445a      	add	r2, fp
 8006baa:	9209      	str	r2, [sp, #36]	; 0x24
 8006bac:	f89a 3000 	ldrb.w	r3, [sl]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f000 80a2 	beq.w	8006cfa <_vfiprintf_r+0x20e>
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8006bbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bc0:	f10a 0a01 	add.w	sl, sl, #1
 8006bc4:	9304      	str	r3, [sp, #16]
 8006bc6:	9307      	str	r3, [sp, #28]
 8006bc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006bcc:	931a      	str	r3, [sp, #104]	; 0x68
 8006bce:	4654      	mov	r4, sl
 8006bd0:	2205      	movs	r2, #5
 8006bd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bd6:	4858      	ldr	r0, [pc, #352]	; (8006d38 <_vfiprintf_r+0x24c>)
 8006bd8:	f7f9 fb22 	bl	8000220 <memchr>
 8006bdc:	9a04      	ldr	r2, [sp, #16]
 8006bde:	b9d8      	cbnz	r0, 8006c18 <_vfiprintf_r+0x12c>
 8006be0:	06d1      	lsls	r1, r2, #27
 8006be2:	bf44      	itt	mi
 8006be4:	2320      	movmi	r3, #32
 8006be6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bea:	0713      	lsls	r3, r2, #28
 8006bec:	bf44      	itt	mi
 8006bee:	232b      	movmi	r3, #43	; 0x2b
 8006bf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bf4:	f89a 3000 	ldrb.w	r3, [sl]
 8006bf8:	2b2a      	cmp	r3, #42	; 0x2a
 8006bfa:	d015      	beq.n	8006c28 <_vfiprintf_r+0x13c>
 8006bfc:	9a07      	ldr	r2, [sp, #28]
 8006bfe:	4654      	mov	r4, sl
 8006c00:	2000      	movs	r0, #0
 8006c02:	f04f 0c0a 	mov.w	ip, #10
 8006c06:	4621      	mov	r1, r4
 8006c08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c0c:	3b30      	subs	r3, #48	; 0x30
 8006c0e:	2b09      	cmp	r3, #9
 8006c10:	d94e      	bls.n	8006cb0 <_vfiprintf_r+0x1c4>
 8006c12:	b1b0      	cbz	r0, 8006c42 <_vfiprintf_r+0x156>
 8006c14:	9207      	str	r2, [sp, #28]
 8006c16:	e014      	b.n	8006c42 <_vfiprintf_r+0x156>
 8006c18:	eba0 0308 	sub.w	r3, r0, r8
 8006c1c:	fa09 f303 	lsl.w	r3, r9, r3
 8006c20:	4313      	orrs	r3, r2
 8006c22:	9304      	str	r3, [sp, #16]
 8006c24:	46a2      	mov	sl, r4
 8006c26:	e7d2      	b.n	8006bce <_vfiprintf_r+0xe2>
 8006c28:	9b03      	ldr	r3, [sp, #12]
 8006c2a:	1d19      	adds	r1, r3, #4
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	9103      	str	r1, [sp, #12]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	bfbb      	ittet	lt
 8006c34:	425b      	neglt	r3, r3
 8006c36:	f042 0202 	orrlt.w	r2, r2, #2
 8006c3a:	9307      	strge	r3, [sp, #28]
 8006c3c:	9307      	strlt	r3, [sp, #28]
 8006c3e:	bfb8      	it	lt
 8006c40:	9204      	strlt	r2, [sp, #16]
 8006c42:	7823      	ldrb	r3, [r4, #0]
 8006c44:	2b2e      	cmp	r3, #46	; 0x2e
 8006c46:	d10c      	bne.n	8006c62 <_vfiprintf_r+0x176>
 8006c48:	7863      	ldrb	r3, [r4, #1]
 8006c4a:	2b2a      	cmp	r3, #42	; 0x2a
 8006c4c:	d135      	bne.n	8006cba <_vfiprintf_r+0x1ce>
 8006c4e:	9b03      	ldr	r3, [sp, #12]
 8006c50:	1d1a      	adds	r2, r3, #4
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	9203      	str	r2, [sp, #12]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	bfb8      	it	lt
 8006c5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c5e:	3402      	adds	r4, #2
 8006c60:	9305      	str	r3, [sp, #20]
 8006c62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006d48 <_vfiprintf_r+0x25c>
 8006c66:	7821      	ldrb	r1, [r4, #0]
 8006c68:	2203      	movs	r2, #3
 8006c6a:	4650      	mov	r0, sl
 8006c6c:	f7f9 fad8 	bl	8000220 <memchr>
 8006c70:	b140      	cbz	r0, 8006c84 <_vfiprintf_r+0x198>
 8006c72:	2340      	movs	r3, #64	; 0x40
 8006c74:	eba0 000a 	sub.w	r0, r0, sl
 8006c78:	fa03 f000 	lsl.w	r0, r3, r0
 8006c7c:	9b04      	ldr	r3, [sp, #16]
 8006c7e:	4303      	orrs	r3, r0
 8006c80:	3401      	adds	r4, #1
 8006c82:	9304      	str	r3, [sp, #16]
 8006c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c88:	482c      	ldr	r0, [pc, #176]	; (8006d3c <_vfiprintf_r+0x250>)
 8006c8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c8e:	2206      	movs	r2, #6
 8006c90:	f7f9 fac6 	bl	8000220 <memchr>
 8006c94:	2800      	cmp	r0, #0
 8006c96:	d03f      	beq.n	8006d18 <_vfiprintf_r+0x22c>
 8006c98:	4b29      	ldr	r3, [pc, #164]	; (8006d40 <_vfiprintf_r+0x254>)
 8006c9a:	bb1b      	cbnz	r3, 8006ce4 <_vfiprintf_r+0x1f8>
 8006c9c:	9b03      	ldr	r3, [sp, #12]
 8006c9e:	3307      	adds	r3, #7
 8006ca0:	f023 0307 	bic.w	r3, r3, #7
 8006ca4:	3308      	adds	r3, #8
 8006ca6:	9303      	str	r3, [sp, #12]
 8006ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006caa:	443b      	add	r3, r7
 8006cac:	9309      	str	r3, [sp, #36]	; 0x24
 8006cae:	e767      	b.n	8006b80 <_vfiprintf_r+0x94>
 8006cb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cb4:	460c      	mov	r4, r1
 8006cb6:	2001      	movs	r0, #1
 8006cb8:	e7a5      	b.n	8006c06 <_vfiprintf_r+0x11a>
 8006cba:	2300      	movs	r3, #0
 8006cbc:	3401      	adds	r4, #1
 8006cbe:	9305      	str	r3, [sp, #20]
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	f04f 0c0a 	mov.w	ip, #10
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ccc:	3a30      	subs	r2, #48	; 0x30
 8006cce:	2a09      	cmp	r2, #9
 8006cd0:	d903      	bls.n	8006cda <_vfiprintf_r+0x1ee>
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d0c5      	beq.n	8006c62 <_vfiprintf_r+0x176>
 8006cd6:	9105      	str	r1, [sp, #20]
 8006cd8:	e7c3      	b.n	8006c62 <_vfiprintf_r+0x176>
 8006cda:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cde:	4604      	mov	r4, r0
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e7f0      	b.n	8006cc6 <_vfiprintf_r+0x1da>
 8006ce4:	ab03      	add	r3, sp, #12
 8006ce6:	9300      	str	r3, [sp, #0]
 8006ce8:	462a      	mov	r2, r5
 8006cea:	4b16      	ldr	r3, [pc, #88]	; (8006d44 <_vfiprintf_r+0x258>)
 8006cec:	a904      	add	r1, sp, #16
 8006cee:	4630      	mov	r0, r6
 8006cf0:	f7fd fee6 	bl	8004ac0 <_printf_float>
 8006cf4:	4607      	mov	r7, r0
 8006cf6:	1c78      	adds	r0, r7, #1
 8006cf8:	d1d6      	bne.n	8006ca8 <_vfiprintf_r+0x1bc>
 8006cfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cfc:	07d9      	lsls	r1, r3, #31
 8006cfe:	d405      	bmi.n	8006d0c <_vfiprintf_r+0x220>
 8006d00:	89ab      	ldrh	r3, [r5, #12]
 8006d02:	059a      	lsls	r2, r3, #22
 8006d04:	d402      	bmi.n	8006d0c <_vfiprintf_r+0x220>
 8006d06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d08:	f7ff fa34 	bl	8006174 <__retarget_lock_release_recursive>
 8006d0c:	89ab      	ldrh	r3, [r5, #12]
 8006d0e:	065b      	lsls	r3, r3, #25
 8006d10:	f53f af12 	bmi.w	8006b38 <_vfiprintf_r+0x4c>
 8006d14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d16:	e711      	b.n	8006b3c <_vfiprintf_r+0x50>
 8006d18:	ab03      	add	r3, sp, #12
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	462a      	mov	r2, r5
 8006d1e:	4b09      	ldr	r3, [pc, #36]	; (8006d44 <_vfiprintf_r+0x258>)
 8006d20:	a904      	add	r1, sp, #16
 8006d22:	4630      	mov	r0, r6
 8006d24:	f7fe f970 	bl	8005008 <_printf_i>
 8006d28:	e7e4      	b.n	8006cf4 <_vfiprintf_r+0x208>
 8006d2a:	bf00      	nop
 8006d2c:	08007bb0 	.word	0x08007bb0
 8006d30:	08007bd0 	.word	0x08007bd0
 8006d34:	08007b90 	.word	0x08007b90
 8006d38:	08007d4c 	.word	0x08007d4c
 8006d3c:	08007d56 	.word	0x08007d56
 8006d40:	08004ac1 	.word	0x08004ac1
 8006d44:	08006ac7 	.word	0x08006ac7
 8006d48:	08007d52 	.word	0x08007d52

08006d4c <_sbrk_r>:
 8006d4c:	b538      	push	{r3, r4, r5, lr}
 8006d4e:	4d06      	ldr	r5, [pc, #24]	; (8006d68 <_sbrk_r+0x1c>)
 8006d50:	2300      	movs	r3, #0
 8006d52:	4604      	mov	r4, r0
 8006d54:	4608      	mov	r0, r1
 8006d56:	602b      	str	r3, [r5, #0]
 8006d58:	f7fa fffe 	bl	8001d58 <_sbrk>
 8006d5c:	1c43      	adds	r3, r0, #1
 8006d5e:	d102      	bne.n	8006d66 <_sbrk_r+0x1a>
 8006d60:	682b      	ldr	r3, [r5, #0]
 8006d62:	b103      	cbz	r3, 8006d66 <_sbrk_r+0x1a>
 8006d64:	6023      	str	r3, [r4, #0]
 8006d66:	bd38      	pop	{r3, r4, r5, pc}
 8006d68:	200003c0 	.word	0x200003c0

08006d6c <__sread>:
 8006d6c:	b510      	push	{r4, lr}
 8006d6e:	460c      	mov	r4, r1
 8006d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d74:	f000 faa8 	bl	80072c8 <_read_r>
 8006d78:	2800      	cmp	r0, #0
 8006d7a:	bfab      	itete	ge
 8006d7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d7e:	89a3      	ldrhlt	r3, [r4, #12]
 8006d80:	181b      	addge	r3, r3, r0
 8006d82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d86:	bfac      	ite	ge
 8006d88:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d8a:	81a3      	strhlt	r3, [r4, #12]
 8006d8c:	bd10      	pop	{r4, pc}

08006d8e <__swrite>:
 8006d8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d92:	461f      	mov	r7, r3
 8006d94:	898b      	ldrh	r3, [r1, #12]
 8006d96:	05db      	lsls	r3, r3, #23
 8006d98:	4605      	mov	r5, r0
 8006d9a:	460c      	mov	r4, r1
 8006d9c:	4616      	mov	r6, r2
 8006d9e:	d505      	bpl.n	8006dac <__swrite+0x1e>
 8006da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006da4:	2302      	movs	r3, #2
 8006da6:	2200      	movs	r2, #0
 8006da8:	f000 f9f8 	bl	800719c <_lseek_r>
 8006dac:	89a3      	ldrh	r3, [r4, #12]
 8006dae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006db2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006db6:	81a3      	strh	r3, [r4, #12]
 8006db8:	4632      	mov	r2, r6
 8006dba:	463b      	mov	r3, r7
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dc2:	f000 b869 	b.w	8006e98 <_write_r>

08006dc6 <__sseek>:
 8006dc6:	b510      	push	{r4, lr}
 8006dc8:	460c      	mov	r4, r1
 8006dca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dce:	f000 f9e5 	bl	800719c <_lseek_r>
 8006dd2:	1c43      	adds	r3, r0, #1
 8006dd4:	89a3      	ldrh	r3, [r4, #12]
 8006dd6:	bf15      	itete	ne
 8006dd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006dda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006dde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006de2:	81a3      	strheq	r3, [r4, #12]
 8006de4:	bf18      	it	ne
 8006de6:	81a3      	strhne	r3, [r4, #12]
 8006de8:	bd10      	pop	{r4, pc}

08006dea <__sclose>:
 8006dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dee:	f000 b8f1 	b.w	8006fd4 <_close_r>
	...

08006df4 <__swbuf_r>:
 8006df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006df6:	460e      	mov	r6, r1
 8006df8:	4614      	mov	r4, r2
 8006dfa:	4605      	mov	r5, r0
 8006dfc:	b118      	cbz	r0, 8006e06 <__swbuf_r+0x12>
 8006dfe:	6983      	ldr	r3, [r0, #24]
 8006e00:	b90b      	cbnz	r3, 8006e06 <__swbuf_r+0x12>
 8006e02:	f7ff f913 	bl	800602c <__sinit>
 8006e06:	4b21      	ldr	r3, [pc, #132]	; (8006e8c <__swbuf_r+0x98>)
 8006e08:	429c      	cmp	r4, r3
 8006e0a:	d12b      	bne.n	8006e64 <__swbuf_r+0x70>
 8006e0c:	686c      	ldr	r4, [r5, #4]
 8006e0e:	69a3      	ldr	r3, [r4, #24]
 8006e10:	60a3      	str	r3, [r4, #8]
 8006e12:	89a3      	ldrh	r3, [r4, #12]
 8006e14:	071a      	lsls	r2, r3, #28
 8006e16:	d52f      	bpl.n	8006e78 <__swbuf_r+0x84>
 8006e18:	6923      	ldr	r3, [r4, #16]
 8006e1a:	b36b      	cbz	r3, 8006e78 <__swbuf_r+0x84>
 8006e1c:	6923      	ldr	r3, [r4, #16]
 8006e1e:	6820      	ldr	r0, [r4, #0]
 8006e20:	1ac0      	subs	r0, r0, r3
 8006e22:	6963      	ldr	r3, [r4, #20]
 8006e24:	b2f6      	uxtb	r6, r6
 8006e26:	4283      	cmp	r3, r0
 8006e28:	4637      	mov	r7, r6
 8006e2a:	dc04      	bgt.n	8006e36 <__swbuf_r+0x42>
 8006e2c:	4621      	mov	r1, r4
 8006e2e:	4628      	mov	r0, r5
 8006e30:	f000 f966 	bl	8007100 <_fflush_r>
 8006e34:	bb30      	cbnz	r0, 8006e84 <__swbuf_r+0x90>
 8006e36:	68a3      	ldr	r3, [r4, #8]
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	60a3      	str	r3, [r4, #8]
 8006e3c:	6823      	ldr	r3, [r4, #0]
 8006e3e:	1c5a      	adds	r2, r3, #1
 8006e40:	6022      	str	r2, [r4, #0]
 8006e42:	701e      	strb	r6, [r3, #0]
 8006e44:	6963      	ldr	r3, [r4, #20]
 8006e46:	3001      	adds	r0, #1
 8006e48:	4283      	cmp	r3, r0
 8006e4a:	d004      	beq.n	8006e56 <__swbuf_r+0x62>
 8006e4c:	89a3      	ldrh	r3, [r4, #12]
 8006e4e:	07db      	lsls	r3, r3, #31
 8006e50:	d506      	bpl.n	8006e60 <__swbuf_r+0x6c>
 8006e52:	2e0a      	cmp	r6, #10
 8006e54:	d104      	bne.n	8006e60 <__swbuf_r+0x6c>
 8006e56:	4621      	mov	r1, r4
 8006e58:	4628      	mov	r0, r5
 8006e5a:	f000 f951 	bl	8007100 <_fflush_r>
 8006e5e:	b988      	cbnz	r0, 8006e84 <__swbuf_r+0x90>
 8006e60:	4638      	mov	r0, r7
 8006e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e64:	4b0a      	ldr	r3, [pc, #40]	; (8006e90 <__swbuf_r+0x9c>)
 8006e66:	429c      	cmp	r4, r3
 8006e68:	d101      	bne.n	8006e6e <__swbuf_r+0x7a>
 8006e6a:	68ac      	ldr	r4, [r5, #8]
 8006e6c:	e7cf      	b.n	8006e0e <__swbuf_r+0x1a>
 8006e6e:	4b09      	ldr	r3, [pc, #36]	; (8006e94 <__swbuf_r+0xa0>)
 8006e70:	429c      	cmp	r4, r3
 8006e72:	bf08      	it	eq
 8006e74:	68ec      	ldreq	r4, [r5, #12]
 8006e76:	e7ca      	b.n	8006e0e <__swbuf_r+0x1a>
 8006e78:	4621      	mov	r1, r4
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	f000 f81e 	bl	8006ebc <__swsetup_r>
 8006e80:	2800      	cmp	r0, #0
 8006e82:	d0cb      	beq.n	8006e1c <__swbuf_r+0x28>
 8006e84:	f04f 37ff 	mov.w	r7, #4294967295
 8006e88:	e7ea      	b.n	8006e60 <__swbuf_r+0x6c>
 8006e8a:	bf00      	nop
 8006e8c:	08007bb0 	.word	0x08007bb0
 8006e90:	08007bd0 	.word	0x08007bd0
 8006e94:	08007b90 	.word	0x08007b90

08006e98 <_write_r>:
 8006e98:	b538      	push	{r3, r4, r5, lr}
 8006e9a:	4d07      	ldr	r5, [pc, #28]	; (8006eb8 <_write_r+0x20>)
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	4608      	mov	r0, r1
 8006ea0:	4611      	mov	r1, r2
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	602a      	str	r2, [r5, #0]
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	f7fa ff05 	bl	8001cb6 <_write>
 8006eac:	1c43      	adds	r3, r0, #1
 8006eae:	d102      	bne.n	8006eb6 <_write_r+0x1e>
 8006eb0:	682b      	ldr	r3, [r5, #0]
 8006eb2:	b103      	cbz	r3, 8006eb6 <_write_r+0x1e>
 8006eb4:	6023      	str	r3, [r4, #0]
 8006eb6:	bd38      	pop	{r3, r4, r5, pc}
 8006eb8:	200003c0 	.word	0x200003c0

08006ebc <__swsetup_r>:
 8006ebc:	4b32      	ldr	r3, [pc, #200]	; (8006f88 <__swsetup_r+0xcc>)
 8006ebe:	b570      	push	{r4, r5, r6, lr}
 8006ec0:	681d      	ldr	r5, [r3, #0]
 8006ec2:	4606      	mov	r6, r0
 8006ec4:	460c      	mov	r4, r1
 8006ec6:	b125      	cbz	r5, 8006ed2 <__swsetup_r+0x16>
 8006ec8:	69ab      	ldr	r3, [r5, #24]
 8006eca:	b913      	cbnz	r3, 8006ed2 <__swsetup_r+0x16>
 8006ecc:	4628      	mov	r0, r5
 8006ece:	f7ff f8ad 	bl	800602c <__sinit>
 8006ed2:	4b2e      	ldr	r3, [pc, #184]	; (8006f8c <__swsetup_r+0xd0>)
 8006ed4:	429c      	cmp	r4, r3
 8006ed6:	d10f      	bne.n	8006ef8 <__swsetup_r+0x3c>
 8006ed8:	686c      	ldr	r4, [r5, #4]
 8006eda:	89a3      	ldrh	r3, [r4, #12]
 8006edc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ee0:	0719      	lsls	r1, r3, #28
 8006ee2:	d42c      	bmi.n	8006f3e <__swsetup_r+0x82>
 8006ee4:	06dd      	lsls	r5, r3, #27
 8006ee6:	d411      	bmi.n	8006f0c <__swsetup_r+0x50>
 8006ee8:	2309      	movs	r3, #9
 8006eea:	6033      	str	r3, [r6, #0]
 8006eec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ef0:	81a3      	strh	r3, [r4, #12]
 8006ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef6:	e03e      	b.n	8006f76 <__swsetup_r+0xba>
 8006ef8:	4b25      	ldr	r3, [pc, #148]	; (8006f90 <__swsetup_r+0xd4>)
 8006efa:	429c      	cmp	r4, r3
 8006efc:	d101      	bne.n	8006f02 <__swsetup_r+0x46>
 8006efe:	68ac      	ldr	r4, [r5, #8]
 8006f00:	e7eb      	b.n	8006eda <__swsetup_r+0x1e>
 8006f02:	4b24      	ldr	r3, [pc, #144]	; (8006f94 <__swsetup_r+0xd8>)
 8006f04:	429c      	cmp	r4, r3
 8006f06:	bf08      	it	eq
 8006f08:	68ec      	ldreq	r4, [r5, #12]
 8006f0a:	e7e6      	b.n	8006eda <__swsetup_r+0x1e>
 8006f0c:	0758      	lsls	r0, r3, #29
 8006f0e:	d512      	bpl.n	8006f36 <__swsetup_r+0x7a>
 8006f10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f12:	b141      	cbz	r1, 8006f26 <__swsetup_r+0x6a>
 8006f14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f18:	4299      	cmp	r1, r3
 8006f1a:	d002      	beq.n	8006f22 <__swsetup_r+0x66>
 8006f1c:	4630      	mov	r0, r6
 8006f1e:	f7ff fcdb 	bl	80068d8 <_free_r>
 8006f22:	2300      	movs	r3, #0
 8006f24:	6363      	str	r3, [r4, #52]	; 0x34
 8006f26:	89a3      	ldrh	r3, [r4, #12]
 8006f28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f2c:	81a3      	strh	r3, [r4, #12]
 8006f2e:	2300      	movs	r3, #0
 8006f30:	6063      	str	r3, [r4, #4]
 8006f32:	6923      	ldr	r3, [r4, #16]
 8006f34:	6023      	str	r3, [r4, #0]
 8006f36:	89a3      	ldrh	r3, [r4, #12]
 8006f38:	f043 0308 	orr.w	r3, r3, #8
 8006f3c:	81a3      	strh	r3, [r4, #12]
 8006f3e:	6923      	ldr	r3, [r4, #16]
 8006f40:	b94b      	cbnz	r3, 8006f56 <__swsetup_r+0x9a>
 8006f42:	89a3      	ldrh	r3, [r4, #12]
 8006f44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f4c:	d003      	beq.n	8006f56 <__swsetup_r+0x9a>
 8006f4e:	4621      	mov	r1, r4
 8006f50:	4630      	mov	r0, r6
 8006f52:	f000 f95b 	bl	800720c <__smakebuf_r>
 8006f56:	89a0      	ldrh	r0, [r4, #12]
 8006f58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f5c:	f010 0301 	ands.w	r3, r0, #1
 8006f60:	d00a      	beq.n	8006f78 <__swsetup_r+0xbc>
 8006f62:	2300      	movs	r3, #0
 8006f64:	60a3      	str	r3, [r4, #8]
 8006f66:	6963      	ldr	r3, [r4, #20]
 8006f68:	425b      	negs	r3, r3
 8006f6a:	61a3      	str	r3, [r4, #24]
 8006f6c:	6923      	ldr	r3, [r4, #16]
 8006f6e:	b943      	cbnz	r3, 8006f82 <__swsetup_r+0xc6>
 8006f70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f74:	d1ba      	bne.n	8006eec <__swsetup_r+0x30>
 8006f76:	bd70      	pop	{r4, r5, r6, pc}
 8006f78:	0781      	lsls	r1, r0, #30
 8006f7a:	bf58      	it	pl
 8006f7c:	6963      	ldrpl	r3, [r4, #20]
 8006f7e:	60a3      	str	r3, [r4, #8]
 8006f80:	e7f4      	b.n	8006f6c <__swsetup_r+0xb0>
 8006f82:	2000      	movs	r0, #0
 8006f84:	e7f7      	b.n	8006f76 <__swsetup_r+0xba>
 8006f86:	bf00      	nop
 8006f88:	200000b4 	.word	0x200000b4
 8006f8c:	08007bb0 	.word	0x08007bb0
 8006f90:	08007bd0 	.word	0x08007bd0
 8006f94:	08007b90 	.word	0x08007b90

08006f98 <__assert_func>:
 8006f98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f9a:	4614      	mov	r4, r2
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	4b09      	ldr	r3, [pc, #36]	; (8006fc4 <__assert_func+0x2c>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4605      	mov	r5, r0
 8006fa4:	68d8      	ldr	r0, [r3, #12]
 8006fa6:	b14c      	cbz	r4, 8006fbc <__assert_func+0x24>
 8006fa8:	4b07      	ldr	r3, [pc, #28]	; (8006fc8 <__assert_func+0x30>)
 8006faa:	9100      	str	r1, [sp, #0]
 8006fac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006fb0:	4906      	ldr	r1, [pc, #24]	; (8006fcc <__assert_func+0x34>)
 8006fb2:	462b      	mov	r3, r5
 8006fb4:	f000 f8e0 	bl	8007178 <fiprintf>
 8006fb8:	f000 f9a5 	bl	8007306 <abort>
 8006fbc:	4b04      	ldr	r3, [pc, #16]	; (8006fd0 <__assert_func+0x38>)
 8006fbe:	461c      	mov	r4, r3
 8006fc0:	e7f3      	b.n	8006faa <__assert_func+0x12>
 8006fc2:	bf00      	nop
 8006fc4:	200000b4 	.word	0x200000b4
 8006fc8:	08007d5d 	.word	0x08007d5d
 8006fcc:	08007d6a 	.word	0x08007d6a
 8006fd0:	08007d98 	.word	0x08007d98

08006fd4 <_close_r>:
 8006fd4:	b538      	push	{r3, r4, r5, lr}
 8006fd6:	4d06      	ldr	r5, [pc, #24]	; (8006ff0 <_close_r+0x1c>)
 8006fd8:	2300      	movs	r3, #0
 8006fda:	4604      	mov	r4, r0
 8006fdc:	4608      	mov	r0, r1
 8006fde:	602b      	str	r3, [r5, #0]
 8006fe0:	f7fa fe85 	bl	8001cee <_close>
 8006fe4:	1c43      	adds	r3, r0, #1
 8006fe6:	d102      	bne.n	8006fee <_close_r+0x1a>
 8006fe8:	682b      	ldr	r3, [r5, #0]
 8006fea:	b103      	cbz	r3, 8006fee <_close_r+0x1a>
 8006fec:	6023      	str	r3, [r4, #0]
 8006fee:	bd38      	pop	{r3, r4, r5, pc}
 8006ff0:	200003c0 	.word	0x200003c0

08006ff4 <__sflush_r>:
 8006ff4:	898a      	ldrh	r2, [r1, #12]
 8006ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ffa:	4605      	mov	r5, r0
 8006ffc:	0710      	lsls	r0, r2, #28
 8006ffe:	460c      	mov	r4, r1
 8007000:	d458      	bmi.n	80070b4 <__sflush_r+0xc0>
 8007002:	684b      	ldr	r3, [r1, #4]
 8007004:	2b00      	cmp	r3, #0
 8007006:	dc05      	bgt.n	8007014 <__sflush_r+0x20>
 8007008:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800700a:	2b00      	cmp	r3, #0
 800700c:	dc02      	bgt.n	8007014 <__sflush_r+0x20>
 800700e:	2000      	movs	r0, #0
 8007010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007014:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007016:	2e00      	cmp	r6, #0
 8007018:	d0f9      	beq.n	800700e <__sflush_r+0x1a>
 800701a:	2300      	movs	r3, #0
 800701c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007020:	682f      	ldr	r7, [r5, #0]
 8007022:	602b      	str	r3, [r5, #0]
 8007024:	d032      	beq.n	800708c <__sflush_r+0x98>
 8007026:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007028:	89a3      	ldrh	r3, [r4, #12]
 800702a:	075a      	lsls	r2, r3, #29
 800702c:	d505      	bpl.n	800703a <__sflush_r+0x46>
 800702e:	6863      	ldr	r3, [r4, #4]
 8007030:	1ac0      	subs	r0, r0, r3
 8007032:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007034:	b10b      	cbz	r3, 800703a <__sflush_r+0x46>
 8007036:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007038:	1ac0      	subs	r0, r0, r3
 800703a:	2300      	movs	r3, #0
 800703c:	4602      	mov	r2, r0
 800703e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007040:	6a21      	ldr	r1, [r4, #32]
 8007042:	4628      	mov	r0, r5
 8007044:	47b0      	blx	r6
 8007046:	1c43      	adds	r3, r0, #1
 8007048:	89a3      	ldrh	r3, [r4, #12]
 800704a:	d106      	bne.n	800705a <__sflush_r+0x66>
 800704c:	6829      	ldr	r1, [r5, #0]
 800704e:	291d      	cmp	r1, #29
 8007050:	d82c      	bhi.n	80070ac <__sflush_r+0xb8>
 8007052:	4a2a      	ldr	r2, [pc, #168]	; (80070fc <__sflush_r+0x108>)
 8007054:	40ca      	lsrs	r2, r1
 8007056:	07d6      	lsls	r6, r2, #31
 8007058:	d528      	bpl.n	80070ac <__sflush_r+0xb8>
 800705a:	2200      	movs	r2, #0
 800705c:	6062      	str	r2, [r4, #4]
 800705e:	04d9      	lsls	r1, r3, #19
 8007060:	6922      	ldr	r2, [r4, #16]
 8007062:	6022      	str	r2, [r4, #0]
 8007064:	d504      	bpl.n	8007070 <__sflush_r+0x7c>
 8007066:	1c42      	adds	r2, r0, #1
 8007068:	d101      	bne.n	800706e <__sflush_r+0x7a>
 800706a:	682b      	ldr	r3, [r5, #0]
 800706c:	b903      	cbnz	r3, 8007070 <__sflush_r+0x7c>
 800706e:	6560      	str	r0, [r4, #84]	; 0x54
 8007070:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007072:	602f      	str	r7, [r5, #0]
 8007074:	2900      	cmp	r1, #0
 8007076:	d0ca      	beq.n	800700e <__sflush_r+0x1a>
 8007078:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800707c:	4299      	cmp	r1, r3
 800707e:	d002      	beq.n	8007086 <__sflush_r+0x92>
 8007080:	4628      	mov	r0, r5
 8007082:	f7ff fc29 	bl	80068d8 <_free_r>
 8007086:	2000      	movs	r0, #0
 8007088:	6360      	str	r0, [r4, #52]	; 0x34
 800708a:	e7c1      	b.n	8007010 <__sflush_r+0x1c>
 800708c:	6a21      	ldr	r1, [r4, #32]
 800708e:	2301      	movs	r3, #1
 8007090:	4628      	mov	r0, r5
 8007092:	47b0      	blx	r6
 8007094:	1c41      	adds	r1, r0, #1
 8007096:	d1c7      	bne.n	8007028 <__sflush_r+0x34>
 8007098:	682b      	ldr	r3, [r5, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d0c4      	beq.n	8007028 <__sflush_r+0x34>
 800709e:	2b1d      	cmp	r3, #29
 80070a0:	d001      	beq.n	80070a6 <__sflush_r+0xb2>
 80070a2:	2b16      	cmp	r3, #22
 80070a4:	d101      	bne.n	80070aa <__sflush_r+0xb6>
 80070a6:	602f      	str	r7, [r5, #0]
 80070a8:	e7b1      	b.n	800700e <__sflush_r+0x1a>
 80070aa:	89a3      	ldrh	r3, [r4, #12]
 80070ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070b0:	81a3      	strh	r3, [r4, #12]
 80070b2:	e7ad      	b.n	8007010 <__sflush_r+0x1c>
 80070b4:	690f      	ldr	r7, [r1, #16]
 80070b6:	2f00      	cmp	r7, #0
 80070b8:	d0a9      	beq.n	800700e <__sflush_r+0x1a>
 80070ba:	0793      	lsls	r3, r2, #30
 80070bc:	680e      	ldr	r6, [r1, #0]
 80070be:	bf08      	it	eq
 80070c0:	694b      	ldreq	r3, [r1, #20]
 80070c2:	600f      	str	r7, [r1, #0]
 80070c4:	bf18      	it	ne
 80070c6:	2300      	movne	r3, #0
 80070c8:	eba6 0807 	sub.w	r8, r6, r7
 80070cc:	608b      	str	r3, [r1, #8]
 80070ce:	f1b8 0f00 	cmp.w	r8, #0
 80070d2:	dd9c      	ble.n	800700e <__sflush_r+0x1a>
 80070d4:	6a21      	ldr	r1, [r4, #32]
 80070d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80070d8:	4643      	mov	r3, r8
 80070da:	463a      	mov	r2, r7
 80070dc:	4628      	mov	r0, r5
 80070de:	47b0      	blx	r6
 80070e0:	2800      	cmp	r0, #0
 80070e2:	dc06      	bgt.n	80070f2 <__sflush_r+0xfe>
 80070e4:	89a3      	ldrh	r3, [r4, #12]
 80070e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070ea:	81a3      	strh	r3, [r4, #12]
 80070ec:	f04f 30ff 	mov.w	r0, #4294967295
 80070f0:	e78e      	b.n	8007010 <__sflush_r+0x1c>
 80070f2:	4407      	add	r7, r0
 80070f4:	eba8 0800 	sub.w	r8, r8, r0
 80070f8:	e7e9      	b.n	80070ce <__sflush_r+0xda>
 80070fa:	bf00      	nop
 80070fc:	20400001 	.word	0x20400001

08007100 <_fflush_r>:
 8007100:	b538      	push	{r3, r4, r5, lr}
 8007102:	690b      	ldr	r3, [r1, #16]
 8007104:	4605      	mov	r5, r0
 8007106:	460c      	mov	r4, r1
 8007108:	b913      	cbnz	r3, 8007110 <_fflush_r+0x10>
 800710a:	2500      	movs	r5, #0
 800710c:	4628      	mov	r0, r5
 800710e:	bd38      	pop	{r3, r4, r5, pc}
 8007110:	b118      	cbz	r0, 800711a <_fflush_r+0x1a>
 8007112:	6983      	ldr	r3, [r0, #24]
 8007114:	b90b      	cbnz	r3, 800711a <_fflush_r+0x1a>
 8007116:	f7fe ff89 	bl	800602c <__sinit>
 800711a:	4b14      	ldr	r3, [pc, #80]	; (800716c <_fflush_r+0x6c>)
 800711c:	429c      	cmp	r4, r3
 800711e:	d11b      	bne.n	8007158 <_fflush_r+0x58>
 8007120:	686c      	ldr	r4, [r5, #4]
 8007122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d0ef      	beq.n	800710a <_fflush_r+0xa>
 800712a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800712c:	07d0      	lsls	r0, r2, #31
 800712e:	d404      	bmi.n	800713a <_fflush_r+0x3a>
 8007130:	0599      	lsls	r1, r3, #22
 8007132:	d402      	bmi.n	800713a <_fflush_r+0x3a>
 8007134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007136:	f7ff f81c 	bl	8006172 <__retarget_lock_acquire_recursive>
 800713a:	4628      	mov	r0, r5
 800713c:	4621      	mov	r1, r4
 800713e:	f7ff ff59 	bl	8006ff4 <__sflush_r>
 8007142:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007144:	07da      	lsls	r2, r3, #31
 8007146:	4605      	mov	r5, r0
 8007148:	d4e0      	bmi.n	800710c <_fflush_r+0xc>
 800714a:	89a3      	ldrh	r3, [r4, #12]
 800714c:	059b      	lsls	r3, r3, #22
 800714e:	d4dd      	bmi.n	800710c <_fflush_r+0xc>
 8007150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007152:	f7ff f80f 	bl	8006174 <__retarget_lock_release_recursive>
 8007156:	e7d9      	b.n	800710c <_fflush_r+0xc>
 8007158:	4b05      	ldr	r3, [pc, #20]	; (8007170 <_fflush_r+0x70>)
 800715a:	429c      	cmp	r4, r3
 800715c:	d101      	bne.n	8007162 <_fflush_r+0x62>
 800715e:	68ac      	ldr	r4, [r5, #8]
 8007160:	e7df      	b.n	8007122 <_fflush_r+0x22>
 8007162:	4b04      	ldr	r3, [pc, #16]	; (8007174 <_fflush_r+0x74>)
 8007164:	429c      	cmp	r4, r3
 8007166:	bf08      	it	eq
 8007168:	68ec      	ldreq	r4, [r5, #12]
 800716a:	e7da      	b.n	8007122 <_fflush_r+0x22>
 800716c:	08007bb0 	.word	0x08007bb0
 8007170:	08007bd0 	.word	0x08007bd0
 8007174:	08007b90 	.word	0x08007b90

08007178 <fiprintf>:
 8007178:	b40e      	push	{r1, r2, r3}
 800717a:	b503      	push	{r0, r1, lr}
 800717c:	4601      	mov	r1, r0
 800717e:	ab03      	add	r3, sp, #12
 8007180:	4805      	ldr	r0, [pc, #20]	; (8007198 <fiprintf+0x20>)
 8007182:	f853 2b04 	ldr.w	r2, [r3], #4
 8007186:	6800      	ldr	r0, [r0, #0]
 8007188:	9301      	str	r3, [sp, #4]
 800718a:	f7ff fcaf 	bl	8006aec <_vfiprintf_r>
 800718e:	b002      	add	sp, #8
 8007190:	f85d eb04 	ldr.w	lr, [sp], #4
 8007194:	b003      	add	sp, #12
 8007196:	4770      	bx	lr
 8007198:	200000b4 	.word	0x200000b4

0800719c <_lseek_r>:
 800719c:	b538      	push	{r3, r4, r5, lr}
 800719e:	4d07      	ldr	r5, [pc, #28]	; (80071bc <_lseek_r+0x20>)
 80071a0:	4604      	mov	r4, r0
 80071a2:	4608      	mov	r0, r1
 80071a4:	4611      	mov	r1, r2
 80071a6:	2200      	movs	r2, #0
 80071a8:	602a      	str	r2, [r5, #0]
 80071aa:	461a      	mov	r2, r3
 80071ac:	f7fa fdc6 	bl	8001d3c <_lseek>
 80071b0:	1c43      	adds	r3, r0, #1
 80071b2:	d102      	bne.n	80071ba <_lseek_r+0x1e>
 80071b4:	682b      	ldr	r3, [r5, #0]
 80071b6:	b103      	cbz	r3, 80071ba <_lseek_r+0x1e>
 80071b8:	6023      	str	r3, [r4, #0]
 80071ba:	bd38      	pop	{r3, r4, r5, pc}
 80071bc:	200003c0 	.word	0x200003c0

080071c0 <__swhatbuf_r>:
 80071c0:	b570      	push	{r4, r5, r6, lr}
 80071c2:	460e      	mov	r6, r1
 80071c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071c8:	2900      	cmp	r1, #0
 80071ca:	b096      	sub	sp, #88	; 0x58
 80071cc:	4614      	mov	r4, r2
 80071ce:	461d      	mov	r5, r3
 80071d0:	da08      	bge.n	80071e4 <__swhatbuf_r+0x24>
 80071d2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80071d6:	2200      	movs	r2, #0
 80071d8:	602a      	str	r2, [r5, #0]
 80071da:	061a      	lsls	r2, r3, #24
 80071dc:	d410      	bmi.n	8007200 <__swhatbuf_r+0x40>
 80071de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071e2:	e00e      	b.n	8007202 <__swhatbuf_r+0x42>
 80071e4:	466a      	mov	r2, sp
 80071e6:	f000 f895 	bl	8007314 <_fstat_r>
 80071ea:	2800      	cmp	r0, #0
 80071ec:	dbf1      	blt.n	80071d2 <__swhatbuf_r+0x12>
 80071ee:	9a01      	ldr	r2, [sp, #4]
 80071f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80071f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80071f8:	425a      	negs	r2, r3
 80071fa:	415a      	adcs	r2, r3
 80071fc:	602a      	str	r2, [r5, #0]
 80071fe:	e7ee      	b.n	80071de <__swhatbuf_r+0x1e>
 8007200:	2340      	movs	r3, #64	; 0x40
 8007202:	2000      	movs	r0, #0
 8007204:	6023      	str	r3, [r4, #0]
 8007206:	b016      	add	sp, #88	; 0x58
 8007208:	bd70      	pop	{r4, r5, r6, pc}
	...

0800720c <__smakebuf_r>:
 800720c:	898b      	ldrh	r3, [r1, #12]
 800720e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007210:	079d      	lsls	r5, r3, #30
 8007212:	4606      	mov	r6, r0
 8007214:	460c      	mov	r4, r1
 8007216:	d507      	bpl.n	8007228 <__smakebuf_r+0x1c>
 8007218:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800721c:	6023      	str	r3, [r4, #0]
 800721e:	6123      	str	r3, [r4, #16]
 8007220:	2301      	movs	r3, #1
 8007222:	6163      	str	r3, [r4, #20]
 8007224:	b002      	add	sp, #8
 8007226:	bd70      	pop	{r4, r5, r6, pc}
 8007228:	ab01      	add	r3, sp, #4
 800722a:	466a      	mov	r2, sp
 800722c:	f7ff ffc8 	bl	80071c0 <__swhatbuf_r>
 8007230:	9900      	ldr	r1, [sp, #0]
 8007232:	4605      	mov	r5, r0
 8007234:	4630      	mov	r0, r6
 8007236:	f7ff fbbb 	bl	80069b0 <_malloc_r>
 800723a:	b948      	cbnz	r0, 8007250 <__smakebuf_r+0x44>
 800723c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007240:	059a      	lsls	r2, r3, #22
 8007242:	d4ef      	bmi.n	8007224 <__smakebuf_r+0x18>
 8007244:	f023 0303 	bic.w	r3, r3, #3
 8007248:	f043 0302 	orr.w	r3, r3, #2
 800724c:	81a3      	strh	r3, [r4, #12]
 800724e:	e7e3      	b.n	8007218 <__smakebuf_r+0xc>
 8007250:	4b0d      	ldr	r3, [pc, #52]	; (8007288 <__smakebuf_r+0x7c>)
 8007252:	62b3      	str	r3, [r6, #40]	; 0x28
 8007254:	89a3      	ldrh	r3, [r4, #12]
 8007256:	6020      	str	r0, [r4, #0]
 8007258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800725c:	81a3      	strh	r3, [r4, #12]
 800725e:	9b00      	ldr	r3, [sp, #0]
 8007260:	6163      	str	r3, [r4, #20]
 8007262:	9b01      	ldr	r3, [sp, #4]
 8007264:	6120      	str	r0, [r4, #16]
 8007266:	b15b      	cbz	r3, 8007280 <__smakebuf_r+0x74>
 8007268:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800726c:	4630      	mov	r0, r6
 800726e:	f000 f863 	bl	8007338 <_isatty_r>
 8007272:	b128      	cbz	r0, 8007280 <__smakebuf_r+0x74>
 8007274:	89a3      	ldrh	r3, [r4, #12]
 8007276:	f023 0303 	bic.w	r3, r3, #3
 800727a:	f043 0301 	orr.w	r3, r3, #1
 800727e:	81a3      	strh	r3, [r4, #12]
 8007280:	89a0      	ldrh	r0, [r4, #12]
 8007282:	4305      	orrs	r5, r0
 8007284:	81a5      	strh	r5, [r4, #12]
 8007286:	e7cd      	b.n	8007224 <__smakebuf_r+0x18>
 8007288:	08005fc5 	.word	0x08005fc5

0800728c <__ascii_mbtowc>:
 800728c:	b082      	sub	sp, #8
 800728e:	b901      	cbnz	r1, 8007292 <__ascii_mbtowc+0x6>
 8007290:	a901      	add	r1, sp, #4
 8007292:	b142      	cbz	r2, 80072a6 <__ascii_mbtowc+0x1a>
 8007294:	b14b      	cbz	r3, 80072aa <__ascii_mbtowc+0x1e>
 8007296:	7813      	ldrb	r3, [r2, #0]
 8007298:	600b      	str	r3, [r1, #0]
 800729a:	7812      	ldrb	r2, [r2, #0]
 800729c:	1e10      	subs	r0, r2, #0
 800729e:	bf18      	it	ne
 80072a0:	2001      	movne	r0, #1
 80072a2:	b002      	add	sp, #8
 80072a4:	4770      	bx	lr
 80072a6:	4610      	mov	r0, r2
 80072a8:	e7fb      	b.n	80072a2 <__ascii_mbtowc+0x16>
 80072aa:	f06f 0001 	mvn.w	r0, #1
 80072ae:	e7f8      	b.n	80072a2 <__ascii_mbtowc+0x16>

080072b0 <__malloc_lock>:
 80072b0:	4801      	ldr	r0, [pc, #4]	; (80072b8 <__malloc_lock+0x8>)
 80072b2:	f7fe bf5e 	b.w	8006172 <__retarget_lock_acquire_recursive>
 80072b6:	bf00      	nop
 80072b8:	200003b4 	.word	0x200003b4

080072bc <__malloc_unlock>:
 80072bc:	4801      	ldr	r0, [pc, #4]	; (80072c4 <__malloc_unlock+0x8>)
 80072be:	f7fe bf59 	b.w	8006174 <__retarget_lock_release_recursive>
 80072c2:	bf00      	nop
 80072c4:	200003b4 	.word	0x200003b4

080072c8 <_read_r>:
 80072c8:	b538      	push	{r3, r4, r5, lr}
 80072ca:	4d07      	ldr	r5, [pc, #28]	; (80072e8 <_read_r+0x20>)
 80072cc:	4604      	mov	r4, r0
 80072ce:	4608      	mov	r0, r1
 80072d0:	4611      	mov	r1, r2
 80072d2:	2200      	movs	r2, #0
 80072d4:	602a      	str	r2, [r5, #0]
 80072d6:	461a      	mov	r2, r3
 80072d8:	f7fa fcd0 	bl	8001c7c <_read>
 80072dc:	1c43      	adds	r3, r0, #1
 80072de:	d102      	bne.n	80072e6 <_read_r+0x1e>
 80072e0:	682b      	ldr	r3, [r5, #0]
 80072e2:	b103      	cbz	r3, 80072e6 <_read_r+0x1e>
 80072e4:	6023      	str	r3, [r4, #0]
 80072e6:	bd38      	pop	{r3, r4, r5, pc}
 80072e8:	200003c0 	.word	0x200003c0

080072ec <__ascii_wctomb>:
 80072ec:	b149      	cbz	r1, 8007302 <__ascii_wctomb+0x16>
 80072ee:	2aff      	cmp	r2, #255	; 0xff
 80072f0:	bf85      	ittet	hi
 80072f2:	238a      	movhi	r3, #138	; 0x8a
 80072f4:	6003      	strhi	r3, [r0, #0]
 80072f6:	700a      	strbls	r2, [r1, #0]
 80072f8:	f04f 30ff 	movhi.w	r0, #4294967295
 80072fc:	bf98      	it	ls
 80072fe:	2001      	movls	r0, #1
 8007300:	4770      	bx	lr
 8007302:	4608      	mov	r0, r1
 8007304:	4770      	bx	lr

08007306 <abort>:
 8007306:	b508      	push	{r3, lr}
 8007308:	2006      	movs	r0, #6
 800730a:	f000 f84d 	bl	80073a8 <raise>
 800730e:	2001      	movs	r0, #1
 8007310:	f7fa fcaa 	bl	8001c68 <_exit>

08007314 <_fstat_r>:
 8007314:	b538      	push	{r3, r4, r5, lr}
 8007316:	4d07      	ldr	r5, [pc, #28]	; (8007334 <_fstat_r+0x20>)
 8007318:	2300      	movs	r3, #0
 800731a:	4604      	mov	r4, r0
 800731c:	4608      	mov	r0, r1
 800731e:	4611      	mov	r1, r2
 8007320:	602b      	str	r3, [r5, #0]
 8007322:	f7fa fcf0 	bl	8001d06 <_fstat>
 8007326:	1c43      	adds	r3, r0, #1
 8007328:	d102      	bne.n	8007330 <_fstat_r+0x1c>
 800732a:	682b      	ldr	r3, [r5, #0]
 800732c:	b103      	cbz	r3, 8007330 <_fstat_r+0x1c>
 800732e:	6023      	str	r3, [r4, #0]
 8007330:	bd38      	pop	{r3, r4, r5, pc}
 8007332:	bf00      	nop
 8007334:	200003c0 	.word	0x200003c0

08007338 <_isatty_r>:
 8007338:	b538      	push	{r3, r4, r5, lr}
 800733a:	4d06      	ldr	r5, [pc, #24]	; (8007354 <_isatty_r+0x1c>)
 800733c:	2300      	movs	r3, #0
 800733e:	4604      	mov	r4, r0
 8007340:	4608      	mov	r0, r1
 8007342:	602b      	str	r3, [r5, #0]
 8007344:	f7fa fcef 	bl	8001d26 <_isatty>
 8007348:	1c43      	adds	r3, r0, #1
 800734a:	d102      	bne.n	8007352 <_isatty_r+0x1a>
 800734c:	682b      	ldr	r3, [r5, #0]
 800734e:	b103      	cbz	r3, 8007352 <_isatty_r+0x1a>
 8007350:	6023      	str	r3, [r4, #0]
 8007352:	bd38      	pop	{r3, r4, r5, pc}
 8007354:	200003c0 	.word	0x200003c0

08007358 <_raise_r>:
 8007358:	291f      	cmp	r1, #31
 800735a:	b538      	push	{r3, r4, r5, lr}
 800735c:	4604      	mov	r4, r0
 800735e:	460d      	mov	r5, r1
 8007360:	d904      	bls.n	800736c <_raise_r+0x14>
 8007362:	2316      	movs	r3, #22
 8007364:	6003      	str	r3, [r0, #0]
 8007366:	f04f 30ff 	mov.w	r0, #4294967295
 800736a:	bd38      	pop	{r3, r4, r5, pc}
 800736c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800736e:	b112      	cbz	r2, 8007376 <_raise_r+0x1e>
 8007370:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007374:	b94b      	cbnz	r3, 800738a <_raise_r+0x32>
 8007376:	4620      	mov	r0, r4
 8007378:	f000 f830 	bl	80073dc <_getpid_r>
 800737c:	462a      	mov	r2, r5
 800737e:	4601      	mov	r1, r0
 8007380:	4620      	mov	r0, r4
 8007382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007386:	f000 b817 	b.w	80073b8 <_kill_r>
 800738a:	2b01      	cmp	r3, #1
 800738c:	d00a      	beq.n	80073a4 <_raise_r+0x4c>
 800738e:	1c59      	adds	r1, r3, #1
 8007390:	d103      	bne.n	800739a <_raise_r+0x42>
 8007392:	2316      	movs	r3, #22
 8007394:	6003      	str	r3, [r0, #0]
 8007396:	2001      	movs	r0, #1
 8007398:	e7e7      	b.n	800736a <_raise_r+0x12>
 800739a:	2400      	movs	r4, #0
 800739c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80073a0:	4628      	mov	r0, r5
 80073a2:	4798      	blx	r3
 80073a4:	2000      	movs	r0, #0
 80073a6:	e7e0      	b.n	800736a <_raise_r+0x12>

080073a8 <raise>:
 80073a8:	4b02      	ldr	r3, [pc, #8]	; (80073b4 <raise+0xc>)
 80073aa:	4601      	mov	r1, r0
 80073ac:	6818      	ldr	r0, [r3, #0]
 80073ae:	f7ff bfd3 	b.w	8007358 <_raise_r>
 80073b2:	bf00      	nop
 80073b4:	200000b4 	.word	0x200000b4

080073b8 <_kill_r>:
 80073b8:	b538      	push	{r3, r4, r5, lr}
 80073ba:	4d07      	ldr	r5, [pc, #28]	; (80073d8 <_kill_r+0x20>)
 80073bc:	2300      	movs	r3, #0
 80073be:	4604      	mov	r4, r0
 80073c0:	4608      	mov	r0, r1
 80073c2:	4611      	mov	r1, r2
 80073c4:	602b      	str	r3, [r5, #0]
 80073c6:	f7fa fc3f 	bl	8001c48 <_kill>
 80073ca:	1c43      	adds	r3, r0, #1
 80073cc:	d102      	bne.n	80073d4 <_kill_r+0x1c>
 80073ce:	682b      	ldr	r3, [r5, #0]
 80073d0:	b103      	cbz	r3, 80073d4 <_kill_r+0x1c>
 80073d2:	6023      	str	r3, [r4, #0]
 80073d4:	bd38      	pop	{r3, r4, r5, pc}
 80073d6:	bf00      	nop
 80073d8:	200003c0 	.word	0x200003c0

080073dc <_getpid_r>:
 80073dc:	f7fa bc2c 	b.w	8001c38 <_getpid>

080073e0 <atan>:
 80073e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e4:	ec55 4b10 	vmov	r4, r5, d0
 80073e8:	4bc3      	ldr	r3, [pc, #780]	; (80076f8 <atan+0x318>)
 80073ea:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80073ee:	429e      	cmp	r6, r3
 80073f0:	46ab      	mov	fp, r5
 80073f2:	dd18      	ble.n	8007426 <atan+0x46>
 80073f4:	4bc1      	ldr	r3, [pc, #772]	; (80076fc <atan+0x31c>)
 80073f6:	429e      	cmp	r6, r3
 80073f8:	dc01      	bgt.n	80073fe <atan+0x1e>
 80073fa:	d109      	bne.n	8007410 <atan+0x30>
 80073fc:	b144      	cbz	r4, 8007410 <atan+0x30>
 80073fe:	4622      	mov	r2, r4
 8007400:	462b      	mov	r3, r5
 8007402:	4620      	mov	r0, r4
 8007404:	4629      	mov	r1, r5
 8007406:	f7f8 ff61 	bl	80002cc <__adddf3>
 800740a:	4604      	mov	r4, r0
 800740c:	460d      	mov	r5, r1
 800740e:	e006      	b.n	800741e <atan+0x3e>
 8007410:	f1bb 0f00 	cmp.w	fp, #0
 8007414:	f300 8131 	bgt.w	800767a <atan+0x29a>
 8007418:	a59b      	add	r5, pc, #620	; (adr r5, 8007688 <atan+0x2a8>)
 800741a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800741e:	ec45 4b10 	vmov	d0, r4, r5
 8007422:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007426:	4bb6      	ldr	r3, [pc, #728]	; (8007700 <atan+0x320>)
 8007428:	429e      	cmp	r6, r3
 800742a:	dc14      	bgt.n	8007456 <atan+0x76>
 800742c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007430:	429e      	cmp	r6, r3
 8007432:	dc0d      	bgt.n	8007450 <atan+0x70>
 8007434:	a396      	add	r3, pc, #600	; (adr r3, 8007690 <atan+0x2b0>)
 8007436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743a:	ee10 0a10 	vmov	r0, s0
 800743e:	4629      	mov	r1, r5
 8007440:	f7f8 ff44 	bl	80002cc <__adddf3>
 8007444:	4baf      	ldr	r3, [pc, #700]	; (8007704 <atan+0x324>)
 8007446:	2200      	movs	r2, #0
 8007448:	f7f9 fb86 	bl	8000b58 <__aeabi_dcmpgt>
 800744c:	2800      	cmp	r0, #0
 800744e:	d1e6      	bne.n	800741e <atan+0x3e>
 8007450:	f04f 3aff 	mov.w	sl, #4294967295
 8007454:	e02b      	b.n	80074ae <atan+0xce>
 8007456:	f000 f963 	bl	8007720 <fabs>
 800745a:	4bab      	ldr	r3, [pc, #684]	; (8007708 <atan+0x328>)
 800745c:	429e      	cmp	r6, r3
 800745e:	ec55 4b10 	vmov	r4, r5, d0
 8007462:	f300 80bf 	bgt.w	80075e4 <atan+0x204>
 8007466:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800746a:	429e      	cmp	r6, r3
 800746c:	f300 80a0 	bgt.w	80075b0 <atan+0x1d0>
 8007470:	ee10 2a10 	vmov	r2, s0
 8007474:	ee10 0a10 	vmov	r0, s0
 8007478:	462b      	mov	r3, r5
 800747a:	4629      	mov	r1, r5
 800747c:	f7f8 ff26 	bl	80002cc <__adddf3>
 8007480:	4ba0      	ldr	r3, [pc, #640]	; (8007704 <atan+0x324>)
 8007482:	2200      	movs	r2, #0
 8007484:	f7f8 ff20 	bl	80002c8 <__aeabi_dsub>
 8007488:	2200      	movs	r2, #0
 800748a:	4606      	mov	r6, r0
 800748c:	460f      	mov	r7, r1
 800748e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007492:	4620      	mov	r0, r4
 8007494:	4629      	mov	r1, r5
 8007496:	f7f8 ff19 	bl	80002cc <__adddf3>
 800749a:	4602      	mov	r2, r0
 800749c:	460b      	mov	r3, r1
 800749e:	4630      	mov	r0, r6
 80074a0:	4639      	mov	r1, r7
 80074a2:	f7f9 f9f3 	bl	800088c <__aeabi_ddiv>
 80074a6:	f04f 0a00 	mov.w	sl, #0
 80074aa:	4604      	mov	r4, r0
 80074ac:	460d      	mov	r5, r1
 80074ae:	4622      	mov	r2, r4
 80074b0:	462b      	mov	r3, r5
 80074b2:	4620      	mov	r0, r4
 80074b4:	4629      	mov	r1, r5
 80074b6:	f7f9 f8bf 	bl	8000638 <__aeabi_dmul>
 80074ba:	4602      	mov	r2, r0
 80074bc:	460b      	mov	r3, r1
 80074be:	4680      	mov	r8, r0
 80074c0:	4689      	mov	r9, r1
 80074c2:	f7f9 f8b9 	bl	8000638 <__aeabi_dmul>
 80074c6:	a374      	add	r3, pc, #464	; (adr r3, 8007698 <atan+0x2b8>)
 80074c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074cc:	4606      	mov	r6, r0
 80074ce:	460f      	mov	r7, r1
 80074d0:	f7f9 f8b2 	bl	8000638 <__aeabi_dmul>
 80074d4:	a372      	add	r3, pc, #456	; (adr r3, 80076a0 <atan+0x2c0>)
 80074d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074da:	f7f8 fef7 	bl	80002cc <__adddf3>
 80074de:	4632      	mov	r2, r6
 80074e0:	463b      	mov	r3, r7
 80074e2:	f7f9 f8a9 	bl	8000638 <__aeabi_dmul>
 80074e6:	a370      	add	r3, pc, #448	; (adr r3, 80076a8 <atan+0x2c8>)
 80074e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ec:	f7f8 feee 	bl	80002cc <__adddf3>
 80074f0:	4632      	mov	r2, r6
 80074f2:	463b      	mov	r3, r7
 80074f4:	f7f9 f8a0 	bl	8000638 <__aeabi_dmul>
 80074f8:	a36d      	add	r3, pc, #436	; (adr r3, 80076b0 <atan+0x2d0>)
 80074fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fe:	f7f8 fee5 	bl	80002cc <__adddf3>
 8007502:	4632      	mov	r2, r6
 8007504:	463b      	mov	r3, r7
 8007506:	f7f9 f897 	bl	8000638 <__aeabi_dmul>
 800750a:	a36b      	add	r3, pc, #428	; (adr r3, 80076b8 <atan+0x2d8>)
 800750c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007510:	f7f8 fedc 	bl	80002cc <__adddf3>
 8007514:	4632      	mov	r2, r6
 8007516:	463b      	mov	r3, r7
 8007518:	f7f9 f88e 	bl	8000638 <__aeabi_dmul>
 800751c:	a368      	add	r3, pc, #416	; (adr r3, 80076c0 <atan+0x2e0>)
 800751e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007522:	f7f8 fed3 	bl	80002cc <__adddf3>
 8007526:	4642      	mov	r2, r8
 8007528:	464b      	mov	r3, r9
 800752a:	f7f9 f885 	bl	8000638 <__aeabi_dmul>
 800752e:	a366      	add	r3, pc, #408	; (adr r3, 80076c8 <atan+0x2e8>)
 8007530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007534:	4680      	mov	r8, r0
 8007536:	4689      	mov	r9, r1
 8007538:	4630      	mov	r0, r6
 800753a:	4639      	mov	r1, r7
 800753c:	f7f9 f87c 	bl	8000638 <__aeabi_dmul>
 8007540:	a363      	add	r3, pc, #396	; (adr r3, 80076d0 <atan+0x2f0>)
 8007542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007546:	f7f8 febf 	bl	80002c8 <__aeabi_dsub>
 800754a:	4632      	mov	r2, r6
 800754c:	463b      	mov	r3, r7
 800754e:	f7f9 f873 	bl	8000638 <__aeabi_dmul>
 8007552:	a361      	add	r3, pc, #388	; (adr r3, 80076d8 <atan+0x2f8>)
 8007554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007558:	f7f8 feb6 	bl	80002c8 <__aeabi_dsub>
 800755c:	4632      	mov	r2, r6
 800755e:	463b      	mov	r3, r7
 8007560:	f7f9 f86a 	bl	8000638 <__aeabi_dmul>
 8007564:	a35e      	add	r3, pc, #376	; (adr r3, 80076e0 <atan+0x300>)
 8007566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756a:	f7f8 fead 	bl	80002c8 <__aeabi_dsub>
 800756e:	4632      	mov	r2, r6
 8007570:	463b      	mov	r3, r7
 8007572:	f7f9 f861 	bl	8000638 <__aeabi_dmul>
 8007576:	a35c      	add	r3, pc, #368	; (adr r3, 80076e8 <atan+0x308>)
 8007578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757c:	f7f8 fea4 	bl	80002c8 <__aeabi_dsub>
 8007580:	4632      	mov	r2, r6
 8007582:	463b      	mov	r3, r7
 8007584:	f7f9 f858 	bl	8000638 <__aeabi_dmul>
 8007588:	4602      	mov	r2, r0
 800758a:	460b      	mov	r3, r1
 800758c:	4640      	mov	r0, r8
 800758e:	4649      	mov	r1, r9
 8007590:	f7f8 fe9c 	bl	80002cc <__adddf3>
 8007594:	4622      	mov	r2, r4
 8007596:	462b      	mov	r3, r5
 8007598:	f7f9 f84e 	bl	8000638 <__aeabi_dmul>
 800759c:	f1ba 3fff 	cmp.w	sl, #4294967295
 80075a0:	4602      	mov	r2, r0
 80075a2:	460b      	mov	r3, r1
 80075a4:	d14b      	bne.n	800763e <atan+0x25e>
 80075a6:	4620      	mov	r0, r4
 80075a8:	4629      	mov	r1, r5
 80075aa:	f7f8 fe8d 	bl	80002c8 <__aeabi_dsub>
 80075ae:	e72c      	b.n	800740a <atan+0x2a>
 80075b0:	ee10 0a10 	vmov	r0, s0
 80075b4:	4b53      	ldr	r3, [pc, #332]	; (8007704 <atan+0x324>)
 80075b6:	2200      	movs	r2, #0
 80075b8:	4629      	mov	r1, r5
 80075ba:	f7f8 fe85 	bl	80002c8 <__aeabi_dsub>
 80075be:	4b51      	ldr	r3, [pc, #324]	; (8007704 <atan+0x324>)
 80075c0:	4606      	mov	r6, r0
 80075c2:	460f      	mov	r7, r1
 80075c4:	2200      	movs	r2, #0
 80075c6:	4620      	mov	r0, r4
 80075c8:	4629      	mov	r1, r5
 80075ca:	f7f8 fe7f 	bl	80002cc <__adddf3>
 80075ce:	4602      	mov	r2, r0
 80075d0:	460b      	mov	r3, r1
 80075d2:	4630      	mov	r0, r6
 80075d4:	4639      	mov	r1, r7
 80075d6:	f7f9 f959 	bl	800088c <__aeabi_ddiv>
 80075da:	f04f 0a01 	mov.w	sl, #1
 80075de:	4604      	mov	r4, r0
 80075e0:	460d      	mov	r5, r1
 80075e2:	e764      	b.n	80074ae <atan+0xce>
 80075e4:	4b49      	ldr	r3, [pc, #292]	; (800770c <atan+0x32c>)
 80075e6:	429e      	cmp	r6, r3
 80075e8:	da1d      	bge.n	8007626 <atan+0x246>
 80075ea:	ee10 0a10 	vmov	r0, s0
 80075ee:	4b48      	ldr	r3, [pc, #288]	; (8007710 <atan+0x330>)
 80075f0:	2200      	movs	r2, #0
 80075f2:	4629      	mov	r1, r5
 80075f4:	f7f8 fe68 	bl	80002c8 <__aeabi_dsub>
 80075f8:	4b45      	ldr	r3, [pc, #276]	; (8007710 <atan+0x330>)
 80075fa:	4606      	mov	r6, r0
 80075fc:	460f      	mov	r7, r1
 80075fe:	2200      	movs	r2, #0
 8007600:	4620      	mov	r0, r4
 8007602:	4629      	mov	r1, r5
 8007604:	f7f9 f818 	bl	8000638 <__aeabi_dmul>
 8007608:	4b3e      	ldr	r3, [pc, #248]	; (8007704 <atan+0x324>)
 800760a:	2200      	movs	r2, #0
 800760c:	f7f8 fe5e 	bl	80002cc <__adddf3>
 8007610:	4602      	mov	r2, r0
 8007612:	460b      	mov	r3, r1
 8007614:	4630      	mov	r0, r6
 8007616:	4639      	mov	r1, r7
 8007618:	f7f9 f938 	bl	800088c <__aeabi_ddiv>
 800761c:	f04f 0a02 	mov.w	sl, #2
 8007620:	4604      	mov	r4, r0
 8007622:	460d      	mov	r5, r1
 8007624:	e743      	b.n	80074ae <atan+0xce>
 8007626:	462b      	mov	r3, r5
 8007628:	ee10 2a10 	vmov	r2, s0
 800762c:	4939      	ldr	r1, [pc, #228]	; (8007714 <atan+0x334>)
 800762e:	2000      	movs	r0, #0
 8007630:	f7f9 f92c 	bl	800088c <__aeabi_ddiv>
 8007634:	f04f 0a03 	mov.w	sl, #3
 8007638:	4604      	mov	r4, r0
 800763a:	460d      	mov	r5, r1
 800763c:	e737      	b.n	80074ae <atan+0xce>
 800763e:	4b36      	ldr	r3, [pc, #216]	; (8007718 <atan+0x338>)
 8007640:	4e36      	ldr	r6, [pc, #216]	; (800771c <atan+0x33c>)
 8007642:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007646:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800764a:	e9da 2300 	ldrd	r2, r3, [sl]
 800764e:	f7f8 fe3b 	bl	80002c8 <__aeabi_dsub>
 8007652:	4622      	mov	r2, r4
 8007654:	462b      	mov	r3, r5
 8007656:	f7f8 fe37 	bl	80002c8 <__aeabi_dsub>
 800765a:	4602      	mov	r2, r0
 800765c:	460b      	mov	r3, r1
 800765e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007662:	f7f8 fe31 	bl	80002c8 <__aeabi_dsub>
 8007666:	f1bb 0f00 	cmp.w	fp, #0
 800766a:	4604      	mov	r4, r0
 800766c:	460d      	mov	r5, r1
 800766e:	f6bf aed6 	bge.w	800741e <atan+0x3e>
 8007672:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007676:	461d      	mov	r5, r3
 8007678:	e6d1      	b.n	800741e <atan+0x3e>
 800767a:	a51d      	add	r5, pc, #116	; (adr r5, 80076f0 <atan+0x310>)
 800767c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007680:	e6cd      	b.n	800741e <atan+0x3e>
 8007682:	bf00      	nop
 8007684:	f3af 8000 	nop.w
 8007688:	54442d18 	.word	0x54442d18
 800768c:	bff921fb 	.word	0xbff921fb
 8007690:	8800759c 	.word	0x8800759c
 8007694:	7e37e43c 	.word	0x7e37e43c
 8007698:	e322da11 	.word	0xe322da11
 800769c:	3f90ad3a 	.word	0x3f90ad3a
 80076a0:	24760deb 	.word	0x24760deb
 80076a4:	3fa97b4b 	.word	0x3fa97b4b
 80076a8:	a0d03d51 	.word	0xa0d03d51
 80076ac:	3fb10d66 	.word	0x3fb10d66
 80076b0:	c54c206e 	.word	0xc54c206e
 80076b4:	3fb745cd 	.word	0x3fb745cd
 80076b8:	920083ff 	.word	0x920083ff
 80076bc:	3fc24924 	.word	0x3fc24924
 80076c0:	5555550d 	.word	0x5555550d
 80076c4:	3fd55555 	.word	0x3fd55555
 80076c8:	2c6a6c2f 	.word	0x2c6a6c2f
 80076cc:	bfa2b444 	.word	0xbfa2b444
 80076d0:	52defd9a 	.word	0x52defd9a
 80076d4:	3fadde2d 	.word	0x3fadde2d
 80076d8:	af749a6d 	.word	0xaf749a6d
 80076dc:	3fb3b0f2 	.word	0x3fb3b0f2
 80076e0:	fe231671 	.word	0xfe231671
 80076e4:	3fbc71c6 	.word	0x3fbc71c6
 80076e8:	9998ebc4 	.word	0x9998ebc4
 80076ec:	3fc99999 	.word	0x3fc99999
 80076f0:	54442d18 	.word	0x54442d18
 80076f4:	3ff921fb 	.word	0x3ff921fb
 80076f8:	440fffff 	.word	0x440fffff
 80076fc:	7ff00000 	.word	0x7ff00000
 8007700:	3fdbffff 	.word	0x3fdbffff
 8007704:	3ff00000 	.word	0x3ff00000
 8007708:	3ff2ffff 	.word	0x3ff2ffff
 800770c:	40038000 	.word	0x40038000
 8007710:	3ff80000 	.word	0x3ff80000
 8007714:	bff00000 	.word	0xbff00000
 8007718:	08007ec8 	.word	0x08007ec8
 800771c:	08007ea8 	.word	0x08007ea8

08007720 <fabs>:
 8007720:	ec51 0b10 	vmov	r0, r1, d0
 8007724:	ee10 2a10 	vmov	r2, s0
 8007728:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800772c:	ec43 2b10 	vmov	d0, r2, r3
 8007730:	4770      	bx	lr

08007732 <atan2>:
 8007732:	f000 b82d 	b.w	8007790 <__ieee754_atan2>

08007736 <sqrt>:
 8007736:	b538      	push	{r3, r4, r5, lr}
 8007738:	ed2d 8b02 	vpush	{d8}
 800773c:	ec55 4b10 	vmov	r4, r5, d0
 8007740:	f000 f8f0 	bl	8007924 <__ieee754_sqrt>
 8007744:	4622      	mov	r2, r4
 8007746:	462b      	mov	r3, r5
 8007748:	4620      	mov	r0, r4
 800774a:	4629      	mov	r1, r5
 800774c:	eeb0 8a40 	vmov.f32	s16, s0
 8007750:	eef0 8a60 	vmov.f32	s17, s1
 8007754:	f7f9 fa0a 	bl	8000b6c <__aeabi_dcmpun>
 8007758:	b990      	cbnz	r0, 8007780 <sqrt+0x4a>
 800775a:	2200      	movs	r2, #0
 800775c:	2300      	movs	r3, #0
 800775e:	4620      	mov	r0, r4
 8007760:	4629      	mov	r1, r5
 8007762:	f7f9 f9db 	bl	8000b1c <__aeabi_dcmplt>
 8007766:	b158      	cbz	r0, 8007780 <sqrt+0x4a>
 8007768:	f7fd f8d8 	bl	800491c <__errno>
 800776c:	2321      	movs	r3, #33	; 0x21
 800776e:	6003      	str	r3, [r0, #0]
 8007770:	2200      	movs	r2, #0
 8007772:	2300      	movs	r3, #0
 8007774:	4610      	mov	r0, r2
 8007776:	4619      	mov	r1, r3
 8007778:	f7f9 f888 	bl	800088c <__aeabi_ddiv>
 800777c:	ec41 0b18 	vmov	d8, r0, r1
 8007780:	eeb0 0a48 	vmov.f32	s0, s16
 8007784:	eef0 0a68 	vmov.f32	s1, s17
 8007788:	ecbd 8b02 	vpop	{d8}
 800778c:	bd38      	pop	{r3, r4, r5, pc}
	...

08007790 <__ieee754_atan2>:
 8007790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007794:	ec57 6b11 	vmov	r6, r7, d1
 8007798:	4273      	negs	r3, r6
 800779a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8007920 <__ieee754_atan2+0x190>
 800779e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80077a2:	4333      	orrs	r3, r6
 80077a4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80077a8:	4573      	cmp	r3, lr
 80077aa:	ec51 0b10 	vmov	r0, r1, d0
 80077ae:	ee11 8a10 	vmov	r8, s2
 80077b2:	d80a      	bhi.n	80077ca <__ieee754_atan2+0x3a>
 80077b4:	4244      	negs	r4, r0
 80077b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80077ba:	4304      	orrs	r4, r0
 80077bc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80077c0:	4574      	cmp	r4, lr
 80077c2:	ee10 9a10 	vmov	r9, s0
 80077c6:	468c      	mov	ip, r1
 80077c8:	d907      	bls.n	80077da <__ieee754_atan2+0x4a>
 80077ca:	4632      	mov	r2, r6
 80077cc:	463b      	mov	r3, r7
 80077ce:	f7f8 fd7d 	bl	80002cc <__adddf3>
 80077d2:	ec41 0b10 	vmov	d0, r0, r1
 80077d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077da:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80077de:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80077e2:	4334      	orrs	r4, r6
 80077e4:	d103      	bne.n	80077ee <__ieee754_atan2+0x5e>
 80077e6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077ea:	f7ff bdf9 	b.w	80073e0 <atan>
 80077ee:	17bc      	asrs	r4, r7, #30
 80077f0:	f004 0402 	and.w	r4, r4, #2
 80077f4:	ea53 0909 	orrs.w	r9, r3, r9
 80077f8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80077fc:	d107      	bne.n	800780e <__ieee754_atan2+0x7e>
 80077fe:	2c02      	cmp	r4, #2
 8007800:	d060      	beq.n	80078c4 <__ieee754_atan2+0x134>
 8007802:	2c03      	cmp	r4, #3
 8007804:	d1e5      	bne.n	80077d2 <__ieee754_atan2+0x42>
 8007806:	a142      	add	r1, pc, #264	; (adr r1, 8007910 <__ieee754_atan2+0x180>)
 8007808:	e9d1 0100 	ldrd	r0, r1, [r1]
 800780c:	e7e1      	b.n	80077d2 <__ieee754_atan2+0x42>
 800780e:	ea52 0808 	orrs.w	r8, r2, r8
 8007812:	d106      	bne.n	8007822 <__ieee754_atan2+0x92>
 8007814:	f1bc 0f00 	cmp.w	ip, #0
 8007818:	da5f      	bge.n	80078da <__ieee754_atan2+0x14a>
 800781a:	a13f      	add	r1, pc, #252	; (adr r1, 8007918 <__ieee754_atan2+0x188>)
 800781c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007820:	e7d7      	b.n	80077d2 <__ieee754_atan2+0x42>
 8007822:	4572      	cmp	r2, lr
 8007824:	d10f      	bne.n	8007846 <__ieee754_atan2+0xb6>
 8007826:	4293      	cmp	r3, r2
 8007828:	f104 34ff 	add.w	r4, r4, #4294967295
 800782c:	d107      	bne.n	800783e <__ieee754_atan2+0xae>
 800782e:	2c02      	cmp	r4, #2
 8007830:	d84c      	bhi.n	80078cc <__ieee754_atan2+0x13c>
 8007832:	4b35      	ldr	r3, [pc, #212]	; (8007908 <__ieee754_atan2+0x178>)
 8007834:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8007838:	e9d4 0100 	ldrd	r0, r1, [r4]
 800783c:	e7c9      	b.n	80077d2 <__ieee754_atan2+0x42>
 800783e:	2c02      	cmp	r4, #2
 8007840:	d848      	bhi.n	80078d4 <__ieee754_atan2+0x144>
 8007842:	4b32      	ldr	r3, [pc, #200]	; (800790c <__ieee754_atan2+0x17c>)
 8007844:	e7f6      	b.n	8007834 <__ieee754_atan2+0xa4>
 8007846:	4573      	cmp	r3, lr
 8007848:	d0e4      	beq.n	8007814 <__ieee754_atan2+0x84>
 800784a:	1a9b      	subs	r3, r3, r2
 800784c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8007850:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007854:	da1e      	bge.n	8007894 <__ieee754_atan2+0x104>
 8007856:	2f00      	cmp	r7, #0
 8007858:	da01      	bge.n	800785e <__ieee754_atan2+0xce>
 800785a:	323c      	adds	r2, #60	; 0x3c
 800785c:	db1e      	blt.n	800789c <__ieee754_atan2+0x10c>
 800785e:	4632      	mov	r2, r6
 8007860:	463b      	mov	r3, r7
 8007862:	f7f9 f813 	bl	800088c <__aeabi_ddiv>
 8007866:	ec41 0b10 	vmov	d0, r0, r1
 800786a:	f7ff ff59 	bl	8007720 <fabs>
 800786e:	f7ff fdb7 	bl	80073e0 <atan>
 8007872:	ec51 0b10 	vmov	r0, r1, d0
 8007876:	2c01      	cmp	r4, #1
 8007878:	d013      	beq.n	80078a2 <__ieee754_atan2+0x112>
 800787a:	2c02      	cmp	r4, #2
 800787c:	d015      	beq.n	80078aa <__ieee754_atan2+0x11a>
 800787e:	2c00      	cmp	r4, #0
 8007880:	d0a7      	beq.n	80077d2 <__ieee754_atan2+0x42>
 8007882:	a319      	add	r3, pc, #100	; (adr r3, 80078e8 <__ieee754_atan2+0x158>)
 8007884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007888:	f7f8 fd1e 	bl	80002c8 <__aeabi_dsub>
 800788c:	a318      	add	r3, pc, #96	; (adr r3, 80078f0 <__ieee754_atan2+0x160>)
 800788e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007892:	e014      	b.n	80078be <__ieee754_atan2+0x12e>
 8007894:	a118      	add	r1, pc, #96	; (adr r1, 80078f8 <__ieee754_atan2+0x168>)
 8007896:	e9d1 0100 	ldrd	r0, r1, [r1]
 800789a:	e7ec      	b.n	8007876 <__ieee754_atan2+0xe6>
 800789c:	2000      	movs	r0, #0
 800789e:	2100      	movs	r1, #0
 80078a0:	e7e9      	b.n	8007876 <__ieee754_atan2+0xe6>
 80078a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078a6:	4619      	mov	r1, r3
 80078a8:	e793      	b.n	80077d2 <__ieee754_atan2+0x42>
 80078aa:	a30f      	add	r3, pc, #60	; (adr r3, 80078e8 <__ieee754_atan2+0x158>)
 80078ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b0:	f7f8 fd0a 	bl	80002c8 <__aeabi_dsub>
 80078b4:	4602      	mov	r2, r0
 80078b6:	460b      	mov	r3, r1
 80078b8:	a10d      	add	r1, pc, #52	; (adr r1, 80078f0 <__ieee754_atan2+0x160>)
 80078ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078be:	f7f8 fd03 	bl	80002c8 <__aeabi_dsub>
 80078c2:	e786      	b.n	80077d2 <__ieee754_atan2+0x42>
 80078c4:	a10a      	add	r1, pc, #40	; (adr r1, 80078f0 <__ieee754_atan2+0x160>)
 80078c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078ca:	e782      	b.n	80077d2 <__ieee754_atan2+0x42>
 80078cc:	a10c      	add	r1, pc, #48	; (adr r1, 8007900 <__ieee754_atan2+0x170>)
 80078ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078d2:	e77e      	b.n	80077d2 <__ieee754_atan2+0x42>
 80078d4:	2000      	movs	r0, #0
 80078d6:	2100      	movs	r1, #0
 80078d8:	e77b      	b.n	80077d2 <__ieee754_atan2+0x42>
 80078da:	a107      	add	r1, pc, #28	; (adr r1, 80078f8 <__ieee754_atan2+0x168>)
 80078dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078e0:	e777      	b.n	80077d2 <__ieee754_atan2+0x42>
 80078e2:	bf00      	nop
 80078e4:	f3af 8000 	nop.w
 80078e8:	33145c07 	.word	0x33145c07
 80078ec:	3ca1a626 	.word	0x3ca1a626
 80078f0:	54442d18 	.word	0x54442d18
 80078f4:	400921fb 	.word	0x400921fb
 80078f8:	54442d18 	.word	0x54442d18
 80078fc:	3ff921fb 	.word	0x3ff921fb
 8007900:	54442d18 	.word	0x54442d18
 8007904:	3fe921fb 	.word	0x3fe921fb
 8007908:	08007ee8 	.word	0x08007ee8
 800790c:	08007f00 	.word	0x08007f00
 8007910:	54442d18 	.word	0x54442d18
 8007914:	c00921fb 	.word	0xc00921fb
 8007918:	54442d18 	.word	0x54442d18
 800791c:	bff921fb 	.word	0xbff921fb
 8007920:	7ff00000 	.word	0x7ff00000

08007924 <__ieee754_sqrt>:
 8007924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007928:	ec55 4b10 	vmov	r4, r5, d0
 800792c:	4e55      	ldr	r6, [pc, #340]	; (8007a84 <__ieee754_sqrt+0x160>)
 800792e:	43ae      	bics	r6, r5
 8007930:	ee10 0a10 	vmov	r0, s0
 8007934:	ee10 3a10 	vmov	r3, s0
 8007938:	462a      	mov	r2, r5
 800793a:	4629      	mov	r1, r5
 800793c:	d110      	bne.n	8007960 <__ieee754_sqrt+0x3c>
 800793e:	ee10 2a10 	vmov	r2, s0
 8007942:	462b      	mov	r3, r5
 8007944:	f7f8 fe78 	bl	8000638 <__aeabi_dmul>
 8007948:	4602      	mov	r2, r0
 800794a:	460b      	mov	r3, r1
 800794c:	4620      	mov	r0, r4
 800794e:	4629      	mov	r1, r5
 8007950:	f7f8 fcbc 	bl	80002cc <__adddf3>
 8007954:	4604      	mov	r4, r0
 8007956:	460d      	mov	r5, r1
 8007958:	ec45 4b10 	vmov	d0, r4, r5
 800795c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007960:	2d00      	cmp	r5, #0
 8007962:	dc10      	bgt.n	8007986 <__ieee754_sqrt+0x62>
 8007964:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007968:	4330      	orrs	r0, r6
 800796a:	d0f5      	beq.n	8007958 <__ieee754_sqrt+0x34>
 800796c:	b15d      	cbz	r5, 8007986 <__ieee754_sqrt+0x62>
 800796e:	ee10 2a10 	vmov	r2, s0
 8007972:	462b      	mov	r3, r5
 8007974:	ee10 0a10 	vmov	r0, s0
 8007978:	f7f8 fca6 	bl	80002c8 <__aeabi_dsub>
 800797c:	4602      	mov	r2, r0
 800797e:	460b      	mov	r3, r1
 8007980:	f7f8 ff84 	bl	800088c <__aeabi_ddiv>
 8007984:	e7e6      	b.n	8007954 <__ieee754_sqrt+0x30>
 8007986:	1512      	asrs	r2, r2, #20
 8007988:	d074      	beq.n	8007a74 <__ieee754_sqrt+0x150>
 800798a:	07d4      	lsls	r4, r2, #31
 800798c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007990:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8007994:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007998:	bf5e      	ittt	pl
 800799a:	0fda      	lsrpl	r2, r3, #31
 800799c:	005b      	lslpl	r3, r3, #1
 800799e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80079a2:	2400      	movs	r4, #0
 80079a4:	0fda      	lsrs	r2, r3, #31
 80079a6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80079aa:	107f      	asrs	r7, r7, #1
 80079ac:	005b      	lsls	r3, r3, #1
 80079ae:	2516      	movs	r5, #22
 80079b0:	4620      	mov	r0, r4
 80079b2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80079b6:	1886      	adds	r6, r0, r2
 80079b8:	428e      	cmp	r6, r1
 80079ba:	bfde      	ittt	le
 80079bc:	1b89      	suble	r1, r1, r6
 80079be:	18b0      	addle	r0, r6, r2
 80079c0:	18a4      	addle	r4, r4, r2
 80079c2:	0049      	lsls	r1, r1, #1
 80079c4:	3d01      	subs	r5, #1
 80079c6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80079ca:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80079ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80079d2:	d1f0      	bne.n	80079b6 <__ieee754_sqrt+0x92>
 80079d4:	462a      	mov	r2, r5
 80079d6:	f04f 0e20 	mov.w	lr, #32
 80079da:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80079de:	4281      	cmp	r1, r0
 80079e0:	eb06 0c05 	add.w	ip, r6, r5
 80079e4:	dc02      	bgt.n	80079ec <__ieee754_sqrt+0xc8>
 80079e6:	d113      	bne.n	8007a10 <__ieee754_sqrt+0xec>
 80079e8:	459c      	cmp	ip, r3
 80079ea:	d811      	bhi.n	8007a10 <__ieee754_sqrt+0xec>
 80079ec:	f1bc 0f00 	cmp.w	ip, #0
 80079f0:	eb0c 0506 	add.w	r5, ip, r6
 80079f4:	da43      	bge.n	8007a7e <__ieee754_sqrt+0x15a>
 80079f6:	2d00      	cmp	r5, #0
 80079f8:	db41      	blt.n	8007a7e <__ieee754_sqrt+0x15a>
 80079fa:	f100 0801 	add.w	r8, r0, #1
 80079fe:	1a09      	subs	r1, r1, r0
 8007a00:	459c      	cmp	ip, r3
 8007a02:	bf88      	it	hi
 8007a04:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8007a08:	eba3 030c 	sub.w	r3, r3, ip
 8007a0c:	4432      	add	r2, r6
 8007a0e:	4640      	mov	r0, r8
 8007a10:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8007a14:	f1be 0e01 	subs.w	lr, lr, #1
 8007a18:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8007a1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007a20:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007a24:	d1db      	bne.n	80079de <__ieee754_sqrt+0xba>
 8007a26:	430b      	orrs	r3, r1
 8007a28:	d006      	beq.n	8007a38 <__ieee754_sqrt+0x114>
 8007a2a:	1c50      	adds	r0, r2, #1
 8007a2c:	bf13      	iteet	ne
 8007a2e:	3201      	addne	r2, #1
 8007a30:	3401      	addeq	r4, #1
 8007a32:	4672      	moveq	r2, lr
 8007a34:	f022 0201 	bicne.w	r2, r2, #1
 8007a38:	1063      	asrs	r3, r4, #1
 8007a3a:	0852      	lsrs	r2, r2, #1
 8007a3c:	07e1      	lsls	r1, r4, #31
 8007a3e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007a42:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007a46:	bf48      	it	mi
 8007a48:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007a4c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007a50:	4614      	mov	r4, r2
 8007a52:	e781      	b.n	8007958 <__ieee754_sqrt+0x34>
 8007a54:	0ad9      	lsrs	r1, r3, #11
 8007a56:	3815      	subs	r0, #21
 8007a58:	055b      	lsls	r3, r3, #21
 8007a5a:	2900      	cmp	r1, #0
 8007a5c:	d0fa      	beq.n	8007a54 <__ieee754_sqrt+0x130>
 8007a5e:	02cd      	lsls	r5, r1, #11
 8007a60:	d50a      	bpl.n	8007a78 <__ieee754_sqrt+0x154>
 8007a62:	f1c2 0420 	rsb	r4, r2, #32
 8007a66:	fa23 f404 	lsr.w	r4, r3, r4
 8007a6a:	1e55      	subs	r5, r2, #1
 8007a6c:	4093      	lsls	r3, r2
 8007a6e:	4321      	orrs	r1, r4
 8007a70:	1b42      	subs	r2, r0, r5
 8007a72:	e78a      	b.n	800798a <__ieee754_sqrt+0x66>
 8007a74:	4610      	mov	r0, r2
 8007a76:	e7f0      	b.n	8007a5a <__ieee754_sqrt+0x136>
 8007a78:	0049      	lsls	r1, r1, #1
 8007a7a:	3201      	adds	r2, #1
 8007a7c:	e7ef      	b.n	8007a5e <__ieee754_sqrt+0x13a>
 8007a7e:	4680      	mov	r8, r0
 8007a80:	e7bd      	b.n	80079fe <__ieee754_sqrt+0xda>
 8007a82:	bf00      	nop
 8007a84:	7ff00000 	.word	0x7ff00000

08007a88 <_init>:
 8007a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a8a:	bf00      	nop
 8007a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a8e:	bc08      	pop	{r3}
 8007a90:	469e      	mov	lr, r3
 8007a92:	4770      	bx	lr

08007a94 <_fini>:
 8007a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a96:	bf00      	nop
 8007a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a9a:	bc08      	pop	{r3}
 8007a9c:	469e      	mov	lr, r3
 8007a9e:	4770      	bx	lr
